# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+junit
+package org.eolang
+version 0.0.0

[] > writes-into-cage
  [z] > a
  cage 0 > x
  assert-that > @
    seq
      x.write
        a 7
      x.z
    $.equal-to 7

[] > avoid-infinite-loop
  cage 0 > x
  x' > copy
  assert-that > @
    seq
      x.write 42
      copy.<
      x.write (7.plus copy)
      x
    $.equal-to 49

[] > avoid-infinite-loop-second-case
  [first second] > pair
  [head tail] > add
    pair head tail > @
  cage 0 > list
  list' > copy
  assert-that > @
    seq
      list.write (pair 1 0)
      copy.<
      list.write (add 2 copy)
      list.second.second
    $.equal-to 0

[] > cage-nested-objects
  cage 0 > c
  c' > copy
  [x] > dummy
    x > @
  assert-that > @
    seq
      c.write (dummy 42)
      copy.<
      c.write (dummy copy)
      c.x.x
    $.equal-to 42

[] > overwrites-caged-object-with-integer
  cage 0 > c
  [] > t
    42 > attr
  assert-that > @
    seq
      c.write t
      c.attr
      c.write 66
      c
    $.equal-to 66

[] > dataizes-encaged-object-lazily-first
  cage 0 > x
  cage 0 > sum
  assert-that > @
    seq
      x.write 42
      sum.write (x.plus 1)
      x.write 7
      sum
    $.equal-to 8

[] > dataizes-encaged-object-lazily-second
  cage 0 > x
  cage 0 > sum
  assert-that > @
    seq
      x.write 42
      sum.write (1.plus x)
      x.write 7
      sum
    $.equal-to 8

[] > dataizes-encaged-object-lazily-third
  cage 0 > x
  cage 0 > y
  cage 0 > sum
  assert-that > @
    seq
      x.write 42
      y.write 7
      sum.write (x.plus y)
      y.write 13
      x.write 4
      sum
    $.equal-to 17

[] > stores-abstract-object-into-cage
  cage 0 > c
  assert-that > @
    seq
      write.
        c
        [x]
          112 > @
      c.@
        42
    $.equal-to 112

[] > multi-layer-volatility
  memory 0 > ma
  cage a > ca
  [] > a
    [] > @
      [] > @
        [] > @
          seq > @
            ma.write (ma.plus 1)
            ma
  memory 0 > mb
  cage b > cb
  [] > b
    [] > @
      [] > @
        [] > @
          seq > z
            mb.write (mb.plus 1)
            mb
  assert-that > @
    seq
      ca
      ca.plus 40
    $.equal-to
      seq
        cb.z
        cb.z.plus 40

[] > infinite-loop-check
  cage 0 > x
  cage 0 > tmp
  [value] > pyint
    [y] > add
      pyint (value.plus (y.value)) > @
  seq > @
    x.write (pyint 0)
    tmp.write (x.add (pyint 1))
    tmp.value.eq 1
