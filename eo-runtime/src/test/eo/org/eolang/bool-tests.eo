# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.io.stdout
+alias org.eolang.math.number
+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+junit
+package org.eolang
+version 0.0.0

[] > compares-two-bools
  assert-that > @
    TRUE
    $.equal-to TRUE

[] > compares-two-different-types
  assert-that > @
    TRUE
    $.is
      $.not
        $.equal-to 42

[] > joins-many-ANDs
  assert-that > @
    and.
      TRUE
      5.lt 10
      4.gt -6
      TRUE
      0.eq 0
    $.equal-to TRUE

[] > forks-on-condition
  assert-that > @
    if.
      5.eq 8
      123
      42
    $.equal-to 42

[] > iterates-over-simple-counter
  memory 0 > x
  assert-that > @
    and.
      eq.
        x.write 5
        5
      eq.
        11
        while.
          x.lt 10
          [i]
            ^.^.^ > x
            x.write (x.plus i) > @
    $.equal-to TRUE

[] > prints-nice-formulas
  memory 0 > x
  assert-that > @
    seq
      x.write 2
      while.
        x.lt 6
        [i]
          ^.^.^ > x
          seq > @
            stdout
              sprintf "%dx%d = %d\n" x x ((number x).pow 2)
            x.write (x.plus 1)
      TRUE
    $.equal-to TRUE

# tests that bool.and stops calculations if its i'th
# object is false (including the base object)
[] > and-short-circuiting
  memory 0 > mFirst
  memory 0 > mThird
  assert-that > @
    and.
      not.
        and.
          (mFirst.write 1).eq 100
          (mFirst.write 2).eq 2
          (mFirst.write 3).eq 3
      not.
        and.
          (mThird.write 1).eq 1
          (mThird.write 2).eq 2
          (mThird.write 3).eq 300
          (mThird.write 4).eq 4
      mFirst.eq 1
      mThird.eq 3
    $.equal-to TRUE

# tests that bool.or stops calculations if its i'th
# object is true (including the base object)
[] > or-short-circuiting
  memory 0 > mFirst
  memory 0 > mThird
  assert-that > @
    and.
      or.
        (mFirst.write 1).eq 1
        mFirst.write 2
        mFirst.write 3
      or.
        (mThird.write 1).eq 100
        (mThird.write 2).eq 200
        (mThird.write 3).eq 3
        mThird.write 4
      mFirst.eq 1
      mThird.eq 3
    $.equal-to TRUE

[] > compares-bool-to-bytes
  assert-that > @
    and.
      TRUE.eq 01-
      FALSE.eq 00-
    $.equal-to TRUE

[] > compares-bool-to-string
  assert-that > @
    and.
      TRUE.eq "\001"
      FALSE.eq "\000"
    $.equal-to TRUE

[] > compares-bool-to-bytes-reverse
  assert-that > @
    and.
      01-.as-bytes.eq TRUE
      00-.as-bytes.eq FALSE
    $.equal-to TRUE

[] > complex-bool-expression-in-while
  memory 0 > m
  assert-that > @
    seq
      m.write 5
      while.
        eq.
          m.gt 0
          TRUE
        [i]
          seq > @
            m.write (m.minus 1)
            stdout (sprintf "%d\n" m)
      TRUE
    $.equal-to TRUE

[] > hash-equals-the-value
  assert-that > @
    and.
      eq.
        1231
        TRUE.as-hash
      eq.
        1237
        FALSE.as-hash
    $.equal-to TRUE

[] > last-while-dataization-object
  memory 3 > x
  assert-that > @
    while.
      x.lt 6
      [i]
        seq > @
          x.write (x.plus i)
          x
    $.equal-to 6

[] > last-while-dataization-object-with-false-condition
  memory 3 > x
  assert-that > @
    while.
      x.lt 1
      [i]
        seq > @
          x.write (x.plus i)
          x
    $.equal-to FALSE
