# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.fs.dir
+alias org.eolang.fs.tmpdir
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang.fs
+version 0.0.0

# Test.
[] > bound-tmpfile-does-not-recreates-file
  tmpdir.tmpfile > f
  f.path.eq f.path > @

# test.
[] > makes-new-directory
  made. > d
    dir
      tmpdir.tmpfile.deleted.resolved "foo-new"
  and. > @
    d.exists
    d.is-directory

# Test.
[] > deletes-empty-directory
  dir
    tmpdir.tmpfile.deleted.resolved
      "bar-empty"
  .made
  .deleted
  .exists
  .not > @

# Test.
[] > throws-on-opening-directory
  tmpdir.open > @
    "w"
    true > [d]

# Test.
[] > deletes-directory-with-files-recursively
  (dir tmpdir.tmpfile.deleted).made > d
  d.tmpfile > first
  d.tmpfile > second
  and. > @
    and.
      and.
        and.
          first.exists
          second.exists
        d.deleted.exists.not
      first.exists.not
    second.exists.not

# Test.
[] > deletes-directory-with-file-and-dir
  (dir tmpdir.tmpfile.deleted).made > d
  (dir d.tmpfile.deleted).made > inner
  d.tmpfile > f
  and. > @
    and.
      and.
        and.
          and.
            inner.is-directory
            inner.exists
          f.exists
        d.deleted.exists.not
      inner.exists.not
    f.exists.not

# Test.
[] > walks-recursively
  (dir tmpdir.tmpfile.deleted).made > d
  seq > @
    *
      (dir (d.resolved "foo/bar")).made
      (d.resolved "foo/bar/test.txt").touched
      (dir (d.resolved "x/y/z")).made
      (d.resolved "x/y/z/a.txt").touched
      (d.walk "**/*.txt").length.eq 2
