# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.hamcrest.assert-that
+home https://github.com/objectionary/eo
+junit
+package org.eolang
+version 0.0.0

[] > makes-array-through-special-syntax
  assert-that > @
    (* 1 2).length
    $.equal-to 2

[] > gets-lengths-of-empty-array-through-special-syntax
  assert-that > @
    *.length
    $.equal-to 0

# check that an empty array's .length equals to zero
[] > empty-array-length
  [elements...] > arr
  assert-that > @
    (arr).elements.length
    $.equal-to 0

# check that array.length works properly for non-empty arrays
[] > non-empty-array-length-test
  [elements...] > arr
  assert-that > @
    (arr "a" "b" "c" "d" "e").elements.length
    $.equal-to 5

[] > array-as-a-bound-attribute-size-0
  * > anArray
  assert-that > @
    anArray.length
    $.equal-to 0

[] > array-as-a-bound-attribute-size-1
  * > anArray
    100
  assert-that > @
    anArray.at 0
    $.equal-to 100

[] > array-as-a-bound-attribute-size-2
  * > anArray
    1
    2
  assert-that > @
    anArray
    $.array-each
      $.equal-to 1
      $.equal-to 2

[] > array-with-in-seq
  [a] > foo
    seq > @
      a.with "hi" > t
      t
  seq > @
    foo
      * 1 2 3
    TRUE

[] > array-with
  assert-that > @
    with.
      * 1 2 3
      "with"
    $.equal-to
      list
        * 1 2 3 "with"

[] > array-at-with-error
  assert-that > @
    try
      []
        at. > @
          * 1 2 3 4
          20
      [e]
        e > @
      nop
    $.is
      $.equal-to
        "Can't at() the 20th element of the array, there are just 4 of them"

[] > concat-array-with-empty-array-1
  * 1 2 3 > a
  * > b
  concat. > res
    list a
    b
  assert-that > @
    res.length
    $.equal-to 3

[] > concat-array-with-empty-array-2
  * > a
  * 1 2 3 > b
  concat. > res
    list a
    b
  assert-that > @
    res.length
    $.equal-to 3

[] > concat-array-with-empty-array-3
  * > a
  * > b
  concat. > res
    list a
    b
  assert-that > @
    res.length
    $.equal-to 0

[] > concat-arrays
  * 1 2 3 > a
  * 100 200 > b
  concat. > res
    list a
    b
  assert-that > @
    plus.
      res.at 2
      res.at 4
    $.equal-to 203

[] > concat-three-arrays
  * 0 1 2 > a
  * 3 4 > b
  * (* "five" "six") (* "siven") > c
  concat. > res
    list a
    concat.
      list b
      c
  assert-that > @
    * (res.length) ((res.at 5).at 1)
    $.equal-to
      list
        * 7 "six"
