# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# Test.
[] > makes-tuple-through-special-syntax
  eq. > @
    (* 1 2).length
    2

# Test.
[] > gets-lengths-of-empty-tuple-through-special-syntax
  eq. > @
    *.length
    0

# Check that an empty tuples .length equals to zero.
[] > empty-tuple-length
  # Array.
  [elements] > arr
  eq. > @
    (arr *).elements.length
    0

# Check that tuple.length works properly for non-empty tuples.
[] > non-empty-tuple-length-test
  # Array.
  [elements] > arr
  eq. > @
    arr
      * "a" "b" "c" "d" "e"
    .elements
    .length
    5

# Test.
[] > tuple-as-a-bound-attribute-size-0
  * > anArray
  eq. > @
    anArray.length
    0

# Test.
[] > tuple-as-a-bound-attribute-size-1
  * > anArray
    100
  eq. > @
    anArray.at 0
    100

# Test.
[] > tuple-as-a-bound-attribute-size-2
  * > arr!
    1
    2
  and. > @
    eq.
      arr.at 0
      1
    eq.
      arr.at 1
      2

# Test.
[] > tuple-with
  with. > arr!
    * 1 2 3
    "with"
  and. > @
    and.
      and.
        eq.
          arr.at 0
          1
        eq.
          arr.at 1
          2
      eq.
        arr.at 2
        3
    eq.
      arr.at 3
      "with"

# Test.
[] > tuple-at-with-error
  eq. > @
    try
      []
        at. > @
          * 1 2 3 4
          20
      [e]
        e > @
      nop
    "Given index is out of tuple bounds"

# Test.
[] > tuple-fluent-with
  ((*.with 1).with 2).with 3 > arr
  and. > @
    and.
      eq.
        arr.at 0
        1
      eq.
        arr.at 1
        2
    eq.
      arr.at 2
      3

# Test.
[] > tuple-fluent-with-indented
  *
  .with 1
  .with 2
  .with 3 > arr
  and. > @
    and.
      eq.
        arr.at 0
        1
      eq.
        arr.at 1
        2
    eq.
      arr.at 2
      3

# Test.
[] > gets-lengths-of-empty-tuple
  tuple.empty > a
  eq. > @
    a.length
    0

# Test.
[] > gets-lengths-of-empty-tuple-without-additional-obj
  eq. > @
    tuple.empty.length
    0

# Test.
[] > creates-empty-tuple-with-number
  tuple.empty.with 3 > a
  eq. > @
    a.at 0
    3

# Test.
[] > tuple-empty-fluent-with-indented-keyword
  tuple
  .empty
  .with 1
  .with 2
  .with 3 > arr
  and. > @
    and.
      eq.
        arr.at 0
        1
      eq.
        arr.at 1
        2
    eq.
      arr.at 2
      3

# Test.
[] > tuple-with-negative-index-gets-last
  * 0 1 2 3 4 > arr
  eq. > @
    arr.at -1
    4

# Test.
[] > tuple-with-negative-index-gets-first
  * 0 1 2 3 4 > arr
  eq. > @
    arr.at -5
    0

# Test.
[] > tuple-with-negative-index-out-of-bounds
  * 0 1 2 3 4 > arr
  eq. > @
    try
      []
        arr.at -6 > @
      [e]
        e > @
      nop
    "Given index is out of tuple bounds"
