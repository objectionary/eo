# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# Test.
[] > simple-division-by-zero
  try > @
    []
      42.div 0 > @
    [e]
      QQ.io.stdout > @
        e
    []
      QQ.io.stdout > @
        "\nfinally"

# Test.
[] > catches-simple-exception
  eq. > @
    try
      []
        slice. > @
          "some string"
          7
          5
      [e]
        e > @
      []
        FALSE > @
    "Start index + length must not exceed string length but was 12 > 11"

# Test.
[] > two-nested-try-blocks
  eq. > @
    try
      []
        try > @
          []
            slice. > @
              "some string"
              7
              5
          [e]
            e > @
          nop
      [e]
        e > @
      nop
    "Start index + length must not exceed string length but was 12 > 11"

# Test.
[] > try-without-error-block
  eq. > @
    try
      []
        30.plus 2 > @
      [e]
        e > @
      nop
    32

# Test.
[] > try-memory-update
  memory 0 > m
  eq. > @
    seq
      *
        m.write 1
        try
          []
            m.write (m.as-int.plus 1) > @
          [e]
            e > @
          nop
        m.as-int
    3

# Test.
[] > try-memory-update-catch
  memory 0 > m
  eq. > @
    seq
      *
        m.write 1
        try
          []
            seq > @
              5.div 0
              m.write (m.plus 1)
          [e]
            e > @
          nop
        m
    1
