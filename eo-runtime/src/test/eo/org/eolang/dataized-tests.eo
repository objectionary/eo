# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# This unit test is supposed to check the functionality of the corresponding object.
[] > dataized-does-not-do-recalculation
  eq. > @
    malloc.for
      0
      [m]
        [] > func
          ^.m.put (^.m.as-number.plus 1) > @
        (dataized func).as-bytes > cached
        seq > @
          *
            cached.as-number
            cached.as-bytes
            cached.as-bool
            m
    1

# This unit test is supposed to check the functionality of the corresponding object.
[] > dataizes-as-bytes-behaves-as-exclamationed
  # Func.
  [] > func
    malloc.for > @
      0
      [m]
        seq > @
          *
            true
            m.put (m.as-number.plus 1)
  (dataized func).as-bytes > cached1
  func > cached2!
  seq > @
    *
      cached1
      cached2
      cached1
      cached2
      and.
        cached1.eq cached2
        1.eq cached1
