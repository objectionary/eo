# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.io.stdout
+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# @todo #761:30min Let's make sure memory can only accept one "type" of data primitives.
#  If we try to write a float into a memory that was initialized with an int, we should
#  get an error. The same goes for strings and booleans. We should also make sure that
#  we can't write a string that is longer than the memory size. We should also make sure
#  that we can't write a number that is bigger than the memory size. And etc.
#  We can also implement memory in EO instead of Java and let it use ram object.
#  Let's not forget to update the "Origins of Objects" paper.
[] > writes-into-memory
  memory 0 > x
  assert-that > @
    seq
      x.write 10
      x
    $.equal-to 10

[] > double-writes
  memory "1234567890123" > m
  assert-that > @
    seq
      m.write "Hello, world!"
      m.write 42
      m
    $.equal-to 42

[] > rewrites-and-increments-itself
  memory 0 > m
  assert-that > @
    seq
      m.write 1
      m.write (m.as-int.plus 5)
      m
    $.equal-to 6

[] > memory-in-outer-scope
  [] > outer
    memory 0 > x
  outer > a
  seq > @
    a.x.write 1
    stdout
      sprintf
        "%d"
        a.x.as-int

[] > writes-into-two-memory-objects
  memory 0 > a
  memory 0 > b
  assert-that > @
    and.
      seq
        a.write 10
        eq.
          b.write 20
          20
      a.eq 10
    $.equal-to TRUE

[] > writes-into-two-memory-objects-and-check-first
  memory 0 > a
  memory 0 > b
  assert-that > @
    seq
      a.write 10
      b.write 20
      a
    $.equal-to 10

[] > memory-is-strictly-typed-bool-error-overflow
  memory FALSE > m
  nop > @
    assert-that
      try
        []
          m.write 86124867.88 > @
        [e]
          e > @
        nop
      $.equal-to "Not enough memory to write: expected <1> byte, got <2^61>"

[] > memory-is-strictly-typed-string-error-overflow
  memory "Hello" > m
  nop > @
    assert-that
      try
        []
          m.write "Much longer string!" > @
        [e]
          e > @
        nop
      $.equal-to "Not enough memory to write: expected <5>, got <20>"

[] > memory-is-strictly-typed-int
  memory 12248 > m
  nop > @
    assert-that
      try
        []
          m.write 2556 > @
        [e]
          e > @
        nop
      $.equal-to 2556

[] > memory-is-strictly-typed-float
  memory 245.88 > m
  nop > @
    assert-that
      try
        []
          m.write 82.22 > @
        [e]
          e > @
        nop
      $.equal-to 82.22

[] > memory-is-strictly-typed-string
  memory "Hello" > m
  nop > @
    assert-that
      try
        []
          m.write "Hell" > @
        [e]
          e > @
        nop
      $.equal-to "Hell"

[] > memory-is-strictly-typed-bool
  memory FALSE > m
  nop > @
    assert-that
      try
        []
          m.write TRUE > @
        [e]
          e > @
        nop
      $.equal-to TRUE
