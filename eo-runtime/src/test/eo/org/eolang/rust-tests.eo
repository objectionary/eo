# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# Works with long names correctly.
[] > rust-long-variable
  QQ.rust > very-looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};

    pub fn foo(_portal: &mut Portal) -> Option<EO> {
      Some(EONumber(0.0))
    }
    """
    []
    *
  eq. > @
    very-looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong
    0

# Test
[] > rust-returns-positive-number
  QQ.rust > r
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};

    pub fn foo(_portal: &mut Portal) -> Option<EO> {
      println!("Hello world from rust");
      Some(EONumber(2.0))
    }
    """
    []
    *
  eq. > @
    r
    2

# Test.
[] > rust-returns-negative-int
  QQ.rust > r
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};

    pub fn foo(_portal: &mut Portal) -> Option<EO> {
      println!("Hello world from rust");
      Some(EONumber(-10.0))
    }
    """
    []
    *
  eq. > @
    r
    -10

# Test.
[] > rust-returns-positive-double
  QQ.rust > r
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};

    pub fn foo(_portal: &mut Portal) -> Option<EO> {
      Some(EONumber(1.23456789))
    }
    """
    []
    *
  eq. > @
    r
    1.23456789

# Test.
[] > rust-returns-negative-double
  QQ.rust > r
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};

    pub fn foo(_portal: &mut Portal) -> Option<EO> {
      Some(EONumber(-1.23456789))
    }
    """
    []
    *
  eq. > @
    r
    -1.23456789

# Test.
[] > rust-is-byte-array
  QQ.rust > my-bytes
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EORaw};

    pub fn foo(_portal: &mut Portal) -> Option<EO> {
      Some(
        EORaw(
          Box::from(
            [0x00, 0x1a, 0xEE]
          )
        )
      )
    }
    """
    []
    *
  eq. > @
    my-bytes
    00-1A-EE

# Test.
[] > rust-find-returns-number
  123 > a
  QQ.rust > r
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      Some(
        EONumber(portal.find("$.^.a")? as f64)
      )
    }
    """
    [] >>
    *
  not. > @
    lt.
      r
      0

# Test.
[] > rust-returns-vertex
  "content" > book
  QQ.rust > read
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EOVertex};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      let v = portal.find("$.^.book")?;
      Some(EOVertex(v))
    }
    """
    [] >>
    *
  eq. > @
    read
    "content"

# Test.
[] > rust-is-string
  QQ.rust > content
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EOString};

    pub fn foo(_portal: &mut Portal) -> Option<EO> {
      Some(EOString("Привет world".to_string()))
    }
    """
    []
    *
  eq. > @
    content
    "Привет world"

# Test.
[] > rust-invalid-put
  "Error at \"EOorg.EOeolang.EOrust#λ\" attribute; caused by Rust insert failed " > message
  QQ.rust > put
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber, EOError};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      portal.put(-1i32 as u32, &[0x00, 0x1a, 0xEE, 0xf, 0xf3])?;
      Some(EOError("put failed".to_string()))
    }
    """
    []
    *
  eq. > @
    slice.
      try
        put
        e > [e]
        true
      0
      length.
        message
    message

# Test.
[] > rust-invalid-bind
  1 > a
  2 > b
  "Error at \"EOorg.EOeolang.EOrust#λ\" attribute; caused by Rust insert failed " > to-check
  QQ.rust > insert
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      let v1 = portal.find("$.^.a")?;
      let v2 = portal.find("$.^.b")?;
      portal.bind(v1 , v2, "EO-att")?;
      Some(EONumber(0 as f64))
    }
    """
    [] >>
    *
  try > res
    insert
    e > [e]
    true
  eq. > @
    res.slice
      0
      to-check.length
    to-check

# Test.
[] > rust-copy-not-fails
  123 > a
  QQ.rust > copy
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EOVertex};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      let v = portal.find("$.^.a")?;
      let copy = portal.copy(v)?;
      Some(EOVertex(copy))
    }
    """
    [] >>
    *
  eq. > @
    copy
    123

# Test.
[] > rust-dataize-not-fails
  1 > a
  QQ.rust > dataized
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      let v = portal.find("$.^.a")?;
      let _bytes = portal.dataize(v)?;
      Some(EONumber(v as f64))
    }
    """
    [] >>
    *
  not. > @
    lt.
      dataized
      0

# Test.
[] > rust-plus
  5 > a
  10 > b
  QQ.rust > plus
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EONumber};
    use byteorder::{BigEndian, ReadBytesExt};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      let a = portal.find("$.^.a")?;
      let bytes_a = portal.dataize(a)?;
      let a = bytes_a.as_slice().read_f64::<BigEndian>().ok()?;

      let b = portal.find("$.^.b")?;
      let bytes_b = portal.dataize(b)?;
      let b = bytes_b.as_slice().read_f64::<BigEndian>().ok()?;
      println!("sum 5 + 10 = {}", a + b);
      Some(EONumber(a + b))
    }
    """
    [] >>
    *
      "byteorder:1.4.3"
  eq. > @
    plus
    15

# Test.
[] > rust-error
  "Error at \"EOorg.EOeolang.EOrust#λ\" attribute; caused by Rust insert failed " > message
  QQ.rust > err
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EOError};

    pub fn foo(_portal: &mut Portal) -> Option<EO> {
      Some(EOError("Custom error".to_string()))
    }
    """
    []
    *
  try > res
    err
    e > [e]
    true
  eq. > @
    slice.
      res
      0
      length.
        message
    message

# Test.
[] > rust-put-to-copy
  QQ.rust > data
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EOVertex, EOError};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      let eobytes = portal.find("Q.org.eolang.bytes")?;
      let copy = portal.copy(eobytes)?;
      portal.put(copy.clone(), &[0x00, 0x1a, 0xEE])?;
      Some(EOVertex(copy))
    }
    """
    []
    *
  eq. > @
    data
    00-1A-EE

# Test.
[] > rust-bind-to-copy
  # Book.
  [content] > book
  "qwerty" > line
  QQ.rust > applied
    """
    use eo::Portal;
    use eo::eo_enum::EO;
    use eo::eo_enum::EO::{EOVertex};

    pub fn foo(portal: &mut Portal) -> Option<EO> {
      let eobook = portal.find("$.^.book")?;
      let copy = portal.copy(eobook)?;
      let eoline = portal.find("$.^.line")?;
      portal.bind(copy.clone(), eoline, "content")?;
      Some(EOVertex(copy))
    }
    """
    [] >>
    *
  eq. > @
    applied.content
    "qwerty"

# This is the default 64+ symbols comment in front of named abstract object.
[] > rust-with-string-fqn
  Q
  .org
  .eolang
  .rust > r
    Q
    .org
    .eolang
    .string:0
      Q
      .org
      .eolang
      .bytes:0
        75-73-65-20-65-6F-3A-3A-50-6F-72-74-61-6C-3B-0A-75-73-65-20-65-6F-3A-3A-65-6F-5F-65-6E-75-6D-3A-3A-45-4F-3B-0A-75-73-65-20-65-6F-3A-3A-65-6F-5F-65-6E-75-6D-3A-3A-45-4F-3A-3A-7B-45-4F-4E-75-6D-62-65-72-7D-3B-0A-0A-70-75-62-20-66-6E-20-66-6F-6F-28-5F-70-6F-72-74-61-6C-3A-20-26-6D-75-74-20-50-6F-72-74-61-6C-29-20-2D-3E-20-4F-70-74-69-6F-6E-3C-45-4F-3E-20-7B-0A-20-20-70-72-69-6E-74-6C-6E-21-28-22-48-65-6C-6C-6F-20-77-6F-72-6C-64-20-66-72-6F-6D-20-72-75-73-74-22-29-3B-0A-20-20-53-6F-6D-65-28-45-4F-4E-75-6D-62-65-72-28-32-2E-30-29-29-0A-7D
    []:1
    Q
    .org
    .eolang
    .tuple
    .empty:2
  $
  .r
  .eq > @
    Q
    .org
    .eolang
    .number:0
      Q
      .org
      .eolang
      .bytes:0
        40-00-00-00-00-00-00-00

# This is the default 64+ symbols comment in front of named abstract object.
[] > rust-reversed-notation
  rust. > r
    eolang.
      org.
        Q
    string.:0
      eolang.
        org.
          Q
      bytes.:0
        eolang.
          org.
            Q
        75-73-65-20-65-6F-3A-3A-50-6F-72-74-61-6C-3B-0A-75-73-65-20-65-6F-3A-3A-65-6F-5F-65-6E-75-6D-3A-3A-45-4F-3B-0A-75-73-65-20-65-6F-3A-3A-65-6F-5F-65-6E-75-6D-3A-3A-45-4F-3A-3A-7B-45-4F-4E-75-6D-62-65-72-7D-3B-0A-0A-70-75-62-20-66-6E-20-66-6F-6F-28-5F-70-6F-72-74-61-6C-3A-20-26-6D-75-74-20-50-6F-72-74-61-6C-29-20-2D-3E-20-4F-70-74-69-6F-6E-3C-45-4F-3E-20-7B-0A-20-20-70-72-69-6E-74-6C-6E-21-28-22-48-65-6C-6C-6F-20-77-6F-72-6C-64-20-66-72-6F-6D-20-72-75-73-74-22-29-3B-0A-20-20-53-6F-6D-65-28-45-4F-4E-75-6D-62-65-72-28-32-2E-30-29-29-0A-7D
    []:1
    empty.:2
      tuple.
        eolang.
          org.
            Q
  eq. > @
    r.
      $
    number.:0
      eolang.
        org.
          Q
      bytes.:0
        eolang.
          org.
            Q
        40-00-00-00-00-00-00-00

# Test.
[] > rust-unwrapped-plus
  number. > a
    eolang.
      org.
        Q
    bytes.:0
      eolang.
        org.
          Q
      00-00-00-00-00-00-00-05
  number. > b
    eolang.
      org.
        Q
    bytes.:0
      eolang.
        org.
          Q
      00-00-00-00-00-00-00-0A
  rust. > plus
    eolang.
      org.
        Q
    string.:0
      eolang.
        org.
          Q
      bytes.:0
        eolang.
          org.
            Q
        75-73-65-20-65-6F-3A-3A-50-6F-72-74-61-6C-3B-0A-75-73-65-20-65-6F-3A-3A-65-6F-5F-65-6E-75-6D-3A-3A-45-4F-3B-0A-75-73-65-20-65-6F-3A-3A-65-6F-5F-65-6E-75-6D-3A-3A-45-4F-3A-3A-7B-45-4F-4E-75-6D-62-65-72-7D-3B-0A-75-73-65-20-62-79-74-65-6F-72-64-65-72-3A-3A-7B-42-69-67-45-6E-64-69-61-6E-2C-20-52-65-61-64-42-79-74-65-73-45-78-74-7D-3B-0A-0A-70-75-62-20-66-6E-20-66-6F-6F-28-70-6F-72-74-61-6C-3A-20-26-6D-75-74-20-50-6F-72-74-61-6C-29-20-2D-3E-20-4F-70-74-69-6F-6E-3C-45-4F-3E-20-7B-0A-20-20-6C-65-74-20-61-20-3D-20-70-6F-72-74-61-6C-2E-66-69-6E-64-28-22-24-2E-5E-2E-61-22-29-3F-3B-0A-20-20-6C-65-74-20-62-79-74-65-73-5F-61-20-3D-20-70-6F-72-74-61-6C-2E-64-61-74-61-69-7A-65-28-61-29-3F-3B-0A-20-20-6C-65-74-20-61-20-3D-20-62-79-74-65-73-5F-61-2E-61-73-5F-73-6C-69-63-65-28-29-2E-72-65-61-64-5F-66-36-34-3A-3A-3C-42-69-67-45-6E-64-69-61-6E-3E-28-29-2E-6F-6B-28-29-3F-3B-0A-0A-20-20-6C-65-74-20-62-20-3D-20-70-6F-72-74-61-6C-2E-66-69-6E-64-28-22-24-2E-5E-2E-62-22-29-3F-3B-0A-20-20-6C-65-74-20-62-79-74-65-73-5F-62-20-3D-20-70-6F-72-74-61-6C-2E-64-61-74-61-69-7A-65-28-62-29-3F-3B-0A-20-20-6C-65-74-20-62-20-3D-20-62-79-74-65-73-5F-62-2E-61-73-5F-73-6C-69-63-65-28-29-2E-72-65-61-64-5F-66-36-34-3A-3A-3C-42-69-67-45-6E-64-69-61-6E-3E-28-29-2E-6F-6B-28-29-3F-3B-0A-20-20-70-72-69-6E-74-6C-6E-21-28-22-73-75-6D-20-35-20-2B-20-31-30-20-3D-20-7B-7D-22-2C-20-61-20-2B-20-62-29-3B-0A-20-20-53-6F-6D-65-28-45-4F-4E-75-6D-62-65-72-28-61-20-2B-20-62-29-29-0A-7D
    auto-named-attr-at-327-6.:1
      $
    tuple.:2
      eolang.
        org.
          Q
      empty.:0
        tuple.
          eolang.
            org.
              Q
      string.:1
        eolang.
          org.
            Q
        bytes.:0
          eolang.
            org.
              Q
          62-79-74-65-6F-72-64-65-72-3A-31-2E-34-2E-33
  eq. > res
    plus.
      $
    number.:0
      eolang.
        org.
          Q
      bytes.:0
        eolang.
          org.
            Q
        00-00-00-00-00-00-00-0F
  # This is the default 64+ symbols comment in front of named abstract object.
  [] > auto-named-attr-at-327-6
  true > @
