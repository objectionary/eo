# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.structs.hash-code-of
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang.structs
+version 0.0.0

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-code-of-bools-is-number
  hash-code-of true > true-code
  hash-code-of false > false-code
  and. > @
    true-code.as-bytes.size.eq 8
    false-code.as-bytes.size.eq 8

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-code-of-int-is-int
  hash-code-of 42 > num-code!
  eq. > @
    1
    div.
      number num-code
      number num-code

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-the-same-big-ints-are-equal
  123456789012345678 > big-int
  eq. > @
    hash-code-of big-int
    hash-code-of big-int

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-the-same-ints-are-equal
  eq. > @
    hash-code-of 42
    hash-code-of 42

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-different-ints-are-not-equal
  not. > @
    eq.
      hash-code-of 42
      hash-code-of 24

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-different-sign-ints-are-not-equal
  not. > @
    eq.
      hash-code-of 42
      hash-code-of -42

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-code-of-string-is-int
  hash-code-of "hello" > str-code!
  eq. > @
    1
    div.
      number str-code
      number str-code

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-the-same-strings-are-equal
  eq. > @
    hash-code-of "Hello"
    hash-code-of "Hello"

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-same-length-strings-are-not-equal
  not. > @
    eq.
      hash-code-of "one"
      hash-code-of "two"

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-different-strings-are-not-equal
  not. > @
    eq.
      hash-code-of "hello"
      hash-code-of "bye!!!"

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-code-of-abstract-object-is-int
  [x] > obj
    x > @
  hash-code-of (obj 42) > obj-code!
  eq. > @
    1
    div.
      number obj-code
      number obj-code

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-the-same-abstract-objects-are-equal
  [x] > obj
    x > @
  obj 42 > forty-two-obj
  eq. > @
    hash-code-of forty-two-obj
    hash-code-of forty-two-obj

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-different-abstract-objects-are-not-equal
  [x] > obj
    x > @
  not. > @
    eq.
      hash-code-of (obj 42)
      hash-code-of (obj "42")

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-code-of-float-is-int
  hash-code-of 42.42 > float-code!
  eq. > @
    1
    div.
      number float-code
      number float-code

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-the-same-floats-are-equal
  0.911 > emergency
  eq. > @
    hash-code-of emergency
    hash-code-of emergency

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-the-same-big-floats-are-equal
  42.42e42 > big-float!
  eq. > @
    hash-code-of big-float
    hash-code-of big-float

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-different-floats-are-not-equal
  not. > @
    eq.
      hash-code-of 3.14
      hash-code-of 2.72

# This unit test is supposed to check the functionality of the corresponding object.
[] > hash-codes-of-different-sign-floats-are-not-equal
  not. > @
    eq.
      hash-code-of 3.22
      hash-code-of -3.22
