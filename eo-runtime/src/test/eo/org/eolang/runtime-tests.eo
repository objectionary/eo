# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.math.number
+alias org.eolang.math.random
+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+junit
+package org.eolang
+version 0.0.0

[] > understands-this-correctly
  [x] > a
    $.x > @
  assert-that > @
    a 42
    $.equal-to 42

[] > takes-parent-object
  [x] > a
    [] > take
      ^.x > @
    take > @
  assert-that > @
    a 42
    $.equal-to 42

[] > makes-object-a-constant
  [] > foo
    as-int. > @
      number
        times.
          random.pseudo
          100.0
  foo.@ > f!
  assert-that > @
    f
    $.equal-to f

[] > kids-are-accessible-in-const-object
  [] > a
    [] > hello
      42 > @
  a > b!
  assert-that > @
    b.hello
    $.equal-to 42

[] > takes-parent-through-attribute
  42 > x
  $ > this
  [] > @
    [] > @
      [] > @
        assert-that > @
          this.x
          $.equal-to 42

[] > throws-when-applies-to-closed-object
  [x] > a
    x > @
  a FALSE > closed
  closed TRUE > @

[] > makes-deep-object-recursively
  assert-that > @
    x 5
    $.equal-to 0
  [i] > x
    if. > @
      i.lt 0
      0
      x
        i.minus 1

[] > iterates-over-sigma
  memory 0 > x
  assert-that > @
    seq
      x.write TRUE
      eq.
        TRUE
        x.while
          [i]
            &.x.write FALSE > @
    $.equal-to FALSE

[] > calculates-only-once-BROKEN
  memory 0 > x
  [] > a
    seq > @
      x.write (x.plus 1)
      42
  assert-that > @
    seq
      x.write 0
      a.neg.neg.neg.neg.eq 42
      x
    $.equal-to 1

[] > rho-of-add-should-not-change
  memory 0 > f1
  cage 0 > f2
  memory 0 > f0
  assert-that > @
    seq
      f0.write 0
      f1.write 1
      f2.write ((f0).plus (f1))
      f1.write f2
      TRUE
    $.equal-to TRUE

[] > positive-object-vertices
  assert-that > @
    and.
      42.<.eq (42.<)
      "Hello".<.eq ("Hello".<)
      42.plus.<.gt 0
      45-1F-E7.<.eq (45-1F-E7.<)
    $.equal-to TRUE

[] > negative-object-vertices
  [x] > a
  assert-that > @
    or.
      (2.plus 3).<.eq (5.<)
      42.<.eq (42.0.<)
      45-1F-E8.<.eq (45-1F-E8-83.<)
      (a 5).<.eq ((a 5).<)
      (* 1 2 3).<.eq ((* 1 2 3).<)
    $.is
      $.not
        $.equal-to TRUE

[] > recursion-without-arguments
  memory 0 > n
  [] > func
    if. > @
      n.gt 0
      seq
        n.write (n.minus 1)
        ^.func
        TRUE
      TRUE
  assert-that > @
    seq
      n.write 4
      func
    $.equal-to TRUE

[] > creates-vararg-from-variable-array
  * "Jeff" 42 > a
  assert-that > @
    sprintf
      "Hello, %s, are you %d?"
      ...a
    $.equal-to "Hello, Jeff, are you 42?"

[] > creates-vararg-from-array
  assert-that > @
    sprintf
      "Hello, %s, are you %d?"
      ...* "Jeff" 42
    $.equal-to "Hello, Jeff, are you 42?"

[] > returns-same-object
  [] > foo
    [] > @
      memory 0 > x
  assert-that > @
    foo.x.<
    $.equal-to
      foo.x.<

[] > compiles-correctly-with-long-duplicate-names
  [] > long-object-name
    [] > long-object-name
      [] > long-object-name
        [] > long-object-name
          [] > long-object-name
  assert-that > @
    long-object-name
    $.is
      $.anything

[] > refers-to-inner-vars-correctly
  memory 0 > go
  assert-that > @
    seq
      go.write TRUE
      go.while
        [i]
          memory 0 > m
          seq > @
            42 > x
            m.write x
            go.write FALSE
      TRUE
    $.equal-to TRUE

[] > named-inner-abstract-object
  [] > @
    seq > @
      [] > a
        TRUE > @

[] > calling-caged-function
  cage 0 > h
  [x] > func
    sprintf "Hello, %s!" x > @
  assert-that > @
    seq
      h.write func
      h.@ "Jeff"
    $.equal-to "Hello, Jeff!"

[] > app-that-calls-varargs-func
  [] > app
    [args...] > f
      1 > a
      2 > @
    (f 1 2 3) > @
  app > output
  assert-that > @
    output
    $.equal-to 2

[] > directly-accesses-objects-from-root
  Q.org.eolang.memory 0 > m
  assert-that > @
    seq
      m.write 42
      Q.org.eolang.io.stdout
        "Hello, world!"
      m.write (m.minus 2)
      m
    $.equal-to 40

[] > directly-accesses-objects-from-standard-root
  QQ.memory 0 > m
  assert-that > @
    seq
      m.write 42
      QQ.io.stdout
        "Works fine!"
      m.write (m.minus 2)
      m
    $.equal-to 40

[] > standard-root-and-root
  QQ.txt.sprintf > stand-root
    "one %s"
    "two"
  Q.org.eolang.txt.sprintf > root
    "%s two"
    "one"
  assert-that > @
    root
    $.equal-to stand-root

[] > extract-attribute-from-decoratee
  [foo] > return
  [] > a
    return > @
      plus.
        42
        1
  assert-that > @
    a.foo
    $.equal-to 43

[] > takes-object-id-from-abstract-empty
  [] > foo
    [] > y
  assert-that > @
    foo.y.<.eq
      foo.y.<
    $.equal-to TRUE

[] > compares-two-foreign-objects
  assert-that > @
    sprintf.<
    $.all-of
      $.equal-to
        QQ.txt.sprintf.<
      $.equal-to
        Q.org.eolang.txt.sprintf.<

[] > compares-two-local-objects
  assert-that > @
    5.plus.<
    $.is
      $.not
        $.equal-to
          5.plus.<

[] > constant-defends-against-side-effects
  memory 7 > a
  [x] > inc
    seq > @
      x.write
        x.plus 1
      x
  inc a > n!
  assert-that > @
    times.
      n
      n
    $.equal-to 64

[] > makes-shallow-copy
  [] > a
    memory' > v
  [] > b
    a > @
  b' > b1
  b' > b2
  seq > @
    b1.v.write 0
    b2.v.write 1
    assert-that
      b1.v
      $.equal-to 1

[] > copy-object-with-dot
  [] > book
    "qwerty" > title
  book.title' > copy-title
  eq. > @
    copy-title
    "qwerty"

[] > parent-in-vertical-notation
  memory 5 > m
  [] > value
    [] > @
      m. > @
        ^.
          ^
  eq. > @
    value
    5

[] > parent-in-horizontal-notation
  memory 5 > m
  [] > value
    [] > @
      ^.^.m > @
  eq. > @
    value
    5

[] > phi-in-vertical-notation
  [] > value
    [] > @
      100 > @
  eq. > @
    @.
      value
    100

[] > phi-in-horizontal-notation
  [] > value
    [] > @
      100 > @
  eq. > @
    value.@
    100

