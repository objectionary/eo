# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.io.stdout
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# Test.
[] > goto-jumps-backwards
  memory 0 > i
  eq. > @
    seq
      *
        i.write 1
        goto
          [g]
            seq > @
              *
                i.write (i.as-int.plus 1)
                if.
                  i.as-int.lt 10
                  g.backward
                  TRUE
        stdout "Finished!"
        i
    11

# Test.
[] > goto-jumps-backwards-without-last-datization
  memory 0 > i
  eq. > @
    seq
      *
        i.write 1
        goto
          [g]
            seq > @
              *
                i.write (i.as-int.plus 1)
                if.
                  i.as-int.lt 10
                  g.backward
                  TRUE
        .@
        .<
        stdout "Finished!"
        i
    10

# Test.
[] > goto-jumps-forward
  # Div.
  [x] > div
    memory 0 > r
    seq > @
      *
        r.write 0
        goto
          [g]
            seq > @
              *
                if.
                  x.eq 0
                  g.forward TRUE
                  TRUE
                r.write (42.div x)
        r
  eq. > @
    and.
      eq.
        div 7
        6
      eq.
        div 0
        0
    TRUE

# Test.
[] > returns-from-method-body
  # Max.
  [a b] > max
    goto > @
      [g]
        seq > @
          *
            if.
              a.gt b
              g.forward a
              TRUE
            b
  eq. > @
    max 7 42
    42

# Test.
[] > nested-goto
  eq. > @
    goto
      [g1]
        seq > @
          *
            goto
              [g2]
                g1.forward 42 > @
            7
    42
