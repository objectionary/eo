# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.io.stdout
+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+junit
+package org.eolang
+version 0.0.0

[] > less-true
  assert-that > @
    lt.
      10
      50
    $.equal-to TRUE
    "check int.lt"

[] > less-equal
  assert-that > @
    not.
      lt.
        10
        10
    $.equal-to TRUE
    "check int.less.not equal"

[] > less-false
  assert-that > @
    not.
      lt.
        10
        -5
    $.equal-to TRUE
    "check int.lt.not lt"

[] > greater-true
  assert-that > @
    gt.
      -200
      -1000
    $.equal-to TRUE
    "check int.gt"

[] > greater-false
  assert-that > @
    not.
      gt.
        0
        100
    $.equal-to TRUE
    "check int.gt.not"

[] > greater-equal
  assert-that > @
    not.
      gt.
        0
        0
    $.equal-to TRUE
    "check int.gt.not zero"

[] > leq-true
  assert-that > @
    lte.
      -200
      -100
    $.equal-to TRUE
    "check int.lte"

[] > leq-equal
  assert-that > @
    lte.
      50
      50
    $.equal-to TRUE
    "check int.lte equal"

[] > leq-false
  assert-that > @
    not.
      lte.
        0
        -10
    $.equal-to TRUE
    "check int.lte.not"

[] > gte-true
  assert-that > @
    gte.
      -1000
      -1100
    $.equal-to TRUE
    "check int.gte negative int"

[] > gte-equal
  assert-that > @
    gte.
      113
      113
    $.equal-to TRUE
    "check int.gte positive int"

[] > gte-false
  assert-that > @
    not.
      gte.
        0
        10
    $.equal-to TRUE
    "check int.gte.not"

[] > zero-eq-to-zero
  assert-that > @
    eq.
      0
      0
    $.equal-to TRUE

[] > int-zero-not-eq-to-float-zero
  assert-that > @
    eq.
      0
      0.0
    $.equal-to FALSE

[] > eq-true
  assert-that > @
    eq.
      123
      123
    $.equal-to TRUE
    "check int.eq"

[] > eq-false
  assert-that > @
    not.
      eq.
        123
        42
    $.equal-to TRUE
    "check int.eq.not"

[] > compares-two-different-types
  assert-that > @
    not.
      eq.
        42
        "Hello!"
    $.equal-to TRUE
    "check int.eq.not string"

[] > calculates-fibonacci-number-with-recursion
  [n] > fibo
    if. > @
      n.lt 3
      1
      plus.
        fibo (n.minus 1)
        fibo (n.minus 2)
  assert-that > @
    fibo 4
    $.equal-to 3

[] > calculates-fibonacci-number-with-tail
  assert-that > @
    fibonacci 4
    $.equal-to 3
    "calculates fibonacci number with tail "
  [n] > fibonacci
    if. > @
      n.lt 3
      small n
      rec n 1 1
    [n] > small
      if. > @
        n.eq 2
        1
        n
    [n minus1 minus2] > rec
      if. > @
        n.eq 3
        minus1.plus minus2
        rec (n.minus 1) (minus1.plus minus2) minus1

# Checks that division by zero returns an error object
[] > zero-division
  assert-that > @
    try
      []
        2.div 0 > @
      [e]
        e > @
      nop
    $.equal-to
      "The 1th argument of 'int.div' is invalid: division by zero is infinity"

# Checks that division by one returns the dividend
[] > division-by-one
  -235 > dividend
  assert-that > @
    dividend.div 1
    $.equal-to
      dividend

# Checks that div works properly with dividends greater than zero
[] > div-for-dividend-greater-than-zero
  assert-that > @
    256.div 16
    $.equal-to 16

# Checks div with remainder
[] > div-with-remainder
  assert-that > @
    13.div -5
    $.equal-to -2

[] > div-less-than-one
  assert-that > @
    1.div 5
    $.equal-to 0

[] > div-with-multiple
  assert-that > @
    100.div 5 2 -5
    $.equal-to -2

[] > div-wrong-args
  assert-that > @
    try
      []
        100.div 1 2 3.0 > @
      [e]
        e > @
      nop
    $.equal-to "The 3th argument of 'int.div' is not a(n) Long: 3.0"

[] > to-bytes-and-backwards
  assert-that > @
    as-int.
      as-bytes.
        42
    $.equal-to 42

[] > as-bytes-equals-to-int
  assert-that > @
    42
    $.equal-to
      42.as-bytes

[] > as-bytes-equals-to-int-backwards
  assert-that > @
    42.as-bytes
    $.equal-to 42

[] > as-hash-equals-to-similar-values
  assert-that > @
    42.as-hash
    $.equal-to
      42.as-hash

# We can have collisions, so in this test just check if values not similar
[] > as-hash-have-different-hashes
  seq > @
    stdout
      sprintf
        "%d %d %d\n"
        41.as-hash
        42.as-hash
        43.as-hash
    TRUE

[] > as-hash-not-equal
  assert-that > @
    41.as-hash
    $.not
      $.equal-to
        42.as-hash

[] > sum-up-several-arguments
  assert-that > @
    1982
    $.equal-to
      1000.plus 900 80 2

[] > sum-up-wrong-args
  assert-that > @
    try
      []
        100.plus 1 2 3.0 > @
      [e]
        e > @
      nop
    $.equal-to "The 3th argument of 'int.plus' is not a(n) Long: 3.0"

[] > multiply-several-arguments
  assert-that > @
    1000.times 2 5
    $.equal-to 10000

[] > multiply-wrong-args
  assert-that > @
    try
      []
        100.times 1 2 3.0 > @
      [e]
        e > @
      nop
    $.equal-to "The 3th argument of 'int.times' is not a(n) Long: 3.0"

[] > multiply-by-zero
  assert-that > @
    1000.times 0
    $.equal-to 0

[] > minus-multiple-args
  assert-that > @
    123.minus -12 135 235 0
    $.equal-to -235
