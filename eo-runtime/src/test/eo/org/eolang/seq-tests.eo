# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EcounterPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+junit
+package org.eolang
+version 0.0.0

# @todo #1299:60min Implement test that will
#  check output of stdout. That should proove
#  that there is no double printage, when 
#  methods lt., gt., lte., gte. are called.
[] > seq-single-dataization-float-less-than-test
  memory 0.0 > counter
  assert-that > @
    seq
      counter.write
        counter.plus 1.0
      counter
    $.less-than 2.0

[] > seq-single-dataization-float-greater-than-test
  memory 0.0 > counter
  assert-that > @
    seq
      counter.write
        counter.plus 1.0
      counter
    $.not
      $.greater-than 1.1

[] > seq-single-dataization-int-less-than-test
  memory 0 > counter
  assert-that > @
    seq
      counter.write
        counter.plus 1
      counter
    $.less-than 2

[] > seq-single-dataization-int-greater-than-test
  memory 0 > counter
  assert-that > @
    seq
      counter.write
        counter.plus 1
      counter
    $.not
      $.greater-than 1
