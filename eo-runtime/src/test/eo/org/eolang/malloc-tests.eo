# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# This unit test is supposed to check the functionality of the corresponding object.
[] > writes-into-memory-of
  malloc.of > mem
    8
    [m]
      seq > @
        *
          m.write 0 10
          m
  mem.eq 10 > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > puts-into-memory-for
  malloc.for > mem
    0
    m.put 10 > [m]
  mem.eq 10 > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > returns-size-from-scope
  eq. > @
    malloc.of
      5
      m.size > [m]
    5

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-scope-is-dataized-twice
  eq. > @
    2
    malloc.for
      0
      [f]
        malloc.of > second
          1
          f.put (f.as-number.plus 1) > [s] >>
        seq > @
          *
            second
            second

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-for-writes-first-init-value
  eq. > @
    malloc.for
      42
      m > [m]
    42

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-puts-over-the-previous-data
  malloc.of > mem
    13
    [m]
      seq > @
        *
          m.put "Hello, world!"
          m.put 42
  eq. > @
    42.as-bytes.concat
      "orld!".as-bytes
    mem

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-rewrites-and-increments-itself
  malloc.of > mem
    8
    [m]
      seq > @
        *
          m.write 0 1
          m.put (m.as-number.plus 5)
  mem.eq 6 > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > writes-into-two-malloc-objects
  malloc.of > a
    8
    m.put 10 > [m]
  malloc.of > b
    8
    m.put 20 > [m]
  and. > @
    a.eq 10
    b.eq 20

# This unit test is supposed to check the functionality of the corresponding object.
[] > throws-on-overflow-boolean-malloc
  malloc.for > @
    false
    m.put 86124867.88 > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > throws-on-overflow-string-malloc
  malloc.for > @
    "Hello"
    m.put "Much longer string!" > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-is-strictly-sized-int
  eq. > @
    malloc.for
      12248
      m.put 2556 > [m]
    2556

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-is-strictly-typed-float
  eq. > @
    malloc.for
      245.88
      m.put 82.22 > [m]
    82.22

# This unit test is supposed to check the functionality of the corresponding object.
[] > memory-is-strictly-sized-string
  eq. > @
    malloc.for
      "Hello"
      m.put "Prot" > [m]
    "Proto"

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-is-strictly-typed-bool
  malloc.for > @
    false
    m.put true > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-gives-id-to-allocated-block
  malloc.of > @
    1
    m.put (m.id.gt 0) > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-allocates-right-size-block
  malloc.of > @
    1
    [b]
      malloc.of > @
        10
        b.put (m.size.eq 10) > [m] >>

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-writes-and-reads
  malloc.of > @
    1
    [b]
      malloc.of > @
        12
        [m] >>
          seq > @
            *
              m.write 0 "Hello, "
              m.write 7 "Jeff!"
              b.put
                eq.
                  m.read 0 12
                  "Hello, Jeff!"

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-concacts-strings-with-offset
  malloc.of > @
    1
    [b]
      malloc.of > @
        3
        [m] >>
          seq > @
            *
              m.write 0 "XXX"
              m.write 1 "Y"
              b.put
                (m.read 0 3).eq "XYX"

# This unit test is supposed to check the functionality of the corresponding object.
[] > throws-on-writing-more-than-allocated-to-malloc-with-offset
  malloc.of > @
    1
    m.write 1 true > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-reads-with-offset-and-length
  malloc.of > @
    1
    [b]
      malloc.of > @
        10
        [m] >>
          seq > @
            *
              m.write 2 "Hello"
              b.put
                (m.read 2 5).eq "Hello"

# Creates memory block of zero bytes (this should be a legal operation)
[] > allocates-zero-bytes
  eq. > @
    0
    malloc.of
      0
      m.size > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-increases-block-size
  malloc.of > @
    1
    [b]
      malloc.for > @
        01-02-03-04
        [m] >>
          ^.b.put > @
            and.
              (m.resized 6).size.eq 6
              m.get.eq 01-02-03-04-00-00

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-decreases-block-size
  malloc.of > @
    1
    [b]
      malloc.for > @
        01-02-03-04-05
        [m] >>
          ^.b.put > @
            and.
              (m.resized 3).size.eq 3
              m.get.eq 01-02-03

# This unit test is supposed to check the functionality of the corresponding object.
[] > throws-on-changing-size-to-negative
  malloc.of > @
    1
    m.resized -1 > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > malloc-empty-is-empty
  malloc.empty > @
    m.size.eq 0 > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > copies-data-inside-itself
  malloc.for > @
    01-02-03-04-05
    [m]
      and. > @
        m.copy 1 2 2
        m.get.eq 01-02-02-03-05

# This unit test is supposed to check the functionality of the corresponding object.
[] > copies-data-from-start-to-end
  malloc.for > @
    01-02-03-04-05-06
    [m]
      and. > @
        m.copy 0 3 3
        m.get.eq 01-02-03-01-02-03

# This unit test is supposed to check the functionality of the corresponding object.
[] > throws-on-copying-with-wrong-source
  malloc.for > @
    0
    m.copy 9 1 1 > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > throws-on-copying-with-wrong-target
  malloc.for > @
    0
    m.copy 3 9 1 > [m]

# This unit test is supposed to check the functionality of the corresponding object.
[] > throws-on-copying-with-wrong-length
  malloc.for > @
    0
    m.copy 3 1 9 > [m]
