# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# This unit test is supposed to check the functionality of the corresponding object.
[] > while-dataizes-only-first-cycle
  eq. > @
    0
    malloc.for
      42
      [m]
        while > @
          i.eq 0 > [i]
          m.put i > [i] >>

# This unit test is supposed to check the functionality of the corresponding object.
[] > simple-while-with-false-first
  not. > @
    while > res
      false > [i]
      true > [i]

# This unit test is supposed to check the functionality of the corresponding object.
[] > simple-bool-expression-via-malloc-in-while
  eq. > @
    malloc.for
      true
      [m]
        while > @
          m > [i] >>
          m.put false > [i] >>
    false

# This unit test is supposed to check the functionality of the corresponding object.
[] > last-while-dataization-object
  eq. > @
    malloc.for
      0
      [m]
        while > @
          2.gt m > [i] >>
          m.put (m.as-number.plus 1) > [i] >>
    3

# This unit test is supposed to check the functionality of the corresponding object.
[] > last-while-dataization-object-with-false-condition
  not. > @
    while
      1.gt 2 > [i]
      true > [i]

# This unit test is supposed to check the functionality of the corresponding object.
[] > while-simple-iteration
  eq. > @
    malloc.for
      0
      [m]
        while > @
          i.lt 10 > [i]
          m.put i > [i] >>
    9

# This unit test is supposed to check the functionality of the corresponding object.
[] > iterating-tuple-with-while-using-internal-iterator
  * 1 1 1 1 > arr
  arr.length.plus -1 > max
  malloc.for > data
    0
    [acc] >>
      malloc.for > @
        0
        [iter] >>
          if. > @
            max.eq 0
            acc.put
              acc.as-number.plus
                arr.at 0
            while
              max.gt iter > [i] >>
              [i] >>
                seq > @
                  *
                    acc.put
                      acc.as-number.plus
                        arr.at i
                    iter.put
                      iter.as-number.plus 1
  data.eq arr.length > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > iterating-tuple-with-while-using-external-iterator
  * 1 1 1 1 > arr
  arr.length.plus -1 > max
  malloc.for > data
    0
    [acc] >>
      malloc.for > @
        0
        [iter] >>
          while > @
            max.gt iter > [i] >>
            [i] >>
              seq > @
                *
                  acc.put
                    acc.as-number.plus
                      arr.at iter
                  iter.put
                    iter.as-number.plus 1
  data.eq arr.length > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > iterating-tuple-with-while-without-body-multiple
  * 1 1 1 > arr
  arr.length > max
  malloc.for > data
    0
    [acc] >>
      malloc.for > @
        0
        [iter] >>
          seq > @
            *
              while
                [i] >>
                  if. > @
                    max.gt iter
                    seq
                      *
                        acc.put
                          acc.as-number.plus
                            arr.at
                              iter.as-number
                        iter.put
                          iter.as-number.plus 1
                        true
                    false
                true > [i]
              acc
  data.eq arr.length > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > iterating-tuple-with-while-without-body-single
  * 1 > arr
  arr.length > max
  malloc.for > data
    0
    [acc] >>
      malloc.for > @
        0
        [iter] >>
          seq > @
            *
              while
                [i] >>
                  if. > @
                    max.gt iter
                    seq
                      *
                        acc.put
                          acc.as-number.plus
                            arr.at
                              iter.as-number
                        iter.put
                          iter.as-number.plus 1
                        true
                    false
                true > [i]
              acc
  data.eq arr.length > @
