# MIT License
#
# Copyright (c) 2022 Eugene Darashkevich
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.collections.multimap
+alias org.eolang.math.number
+home https://github.com/objectionary/eo
+package org.eolang.collections
+version 0.0.0

[m] > map

  memory 0 > elements-amount

  # Returns list of all keys in multimap
  [] > keys
    (multimap *).concat-all-arrays m > caa!
    map. > @
      list
        caa
      [curr]
        curr.at 0 > @

  # Returns amount of elements in multimap
  [] > size
    elements-amount > @

  # Returns the new map with added object
  # Replaces if there was one before
  [key value] > with
    multimap * > mmp!
    * key value > new-pair!
    mmp.concat-all-arrays m > caa!
    mmp.without-in-list key caa > wcaa!
    wcaa.with new-pair > arr!
    mmp.pairs-to-hash arr > harr!
    mmp.rebuild harr arr > table!
    map table > mp
    seq > @
      (mp.elements-amount).write (arr.length)
      mp

  # Returns an array with the found value
  # If no element was found, it returns an empty array
  [key] > found
    multimap * > mmp!
    number (key.as-hash) > num!
    if. > @
      eq.
        m.length
        0
      *
      mmp.find-in-list key (m.at (num.mod (m.length)))

  # Returns a new map, without element with the given key
  # Returns the map itself, if there was no item with this key
  [key] > without
    multimap * > mmp!
    mmp.concat-all-arrays m > caa!
    mmp.without-in-list key caa > arr!
    mmp.pairs-to-hash arr > harr!
    mmp.rebuild harr arr > table!
    map table > mp
    seq > @
      (mp.elements-amount).write (arr.length)
      mp
