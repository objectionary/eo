# MIT License
#
# Copyright (c) 2022 Eugene Darashkevich
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.math.number
+home https://github.com/objectionary/eo
+package org.eolang.collections
+version 0.0.0

[m] > multimap

  memory 0 > elements-amount

  # Returns list of all keys in multimap
  [] > keys
    ^.concat-all-arrays m > caa!
    map. > @
      list
        caa
      [curr]
        curr.at 0 > @

  # Returns amount of elements in multimap
  [] > size
    elements-amount > @

  [arr] > concat-all-arrays
    reduced. > @
      list
        arr
      *
      [a x]
        concat. > @
          list a
          x

  [arr] > pairs-to-hash
    reduced. > @
      list
        arr
      *
      [a x]
        (a.with ((x.at 0).as-hash)) > @

  # Returns the new map with added object
  [key value] > with
    * key value > new-pair!
    ^.concat-all-arrays m > caa!
    caa.with new-pair > arr!
    ^.pairs-to-hash arr > harr!
    ^.rebuild harr arr > table!
    multimap table > mmp
    seq > @
      (mmp.elements-amount).write (arr.length)
      mmp

  [key arr] > find-in-list
    reduced. > @
      list
        arr
      *
      [a x]
        if. > @
          eq.
            key
            (x.at 0)
          a.with (x.at 1)
          a

  # Returns an array with the found value
  # If no element was found, it returns an empty array
  [key] > found
    number (key.as-hash) > num!
    if. > @
      eq.
        m.length
        0
      *
      ^.find-in-list key (m.at (num.mod (m.length)))

  [key arr] > without-in-list
    reduced. > @
      list
        arr
      *
      [a x]
        if. > @
          eq.
            key
            (x.at 0)
          a
          a.with x

  [harr arr] > rebuild /array

  # Returns a new map, without elements with the given key
  # Returns the map itself, if there was no item with this key
  [key] > without
    ^.concat-all-arrays m > caa!
    ^.without-in-list key caa > arr!
    ^.pairs-to-hash arr > harr!
    ^.rebuild harr arr > table!
    multimap table > mmp
    seq > @
      (mmp.elements-amount).write (arr.length)
      mmp
