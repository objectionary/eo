# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+home https://github.com/objectionary/eo
+package org.eolang.collections
+rt jvm org.eolang:eo-runtime:0.0.0
+version 0.0.0

[arr] > list
  arr > @

  # Is it empty?
  [] > is-empty
    eq. > @
      arr.length
      0

  # Reduce with index from start "a" using the function "f".
  # Here "f" must be an abstract
  # object with three free attributes. The first
  # one for the accumulator, the second one
  # for the index and the third one for the element
  # of the array.
  [a f] > reducedi
    rec-reduced (* a 0) f arr > @

    [acc-index func carr] > rec-reduced
      (acc-index.at 0) > acc
      (acc-index.at 1) > index
      if. > @
        (index.lt (carr.length))
        rec-reduced
          *
            func
              acc
              index
              (carr.at index)
            (index.plus 1)
          func
          carr
        acc

  # Reduce from start "a" using the function "f"
  [a f] > reduced
    ^.reducedi > @
      a
      [a idx item]
        &.f > @
          a
          item

  # DEPRICATED. Reduce from start "a" using the function "f"
  [a f] > reduce
    ^.reducedi > @
      a
      [a idx item]
        &.f > @
          a
          item

  # Map with index. Here "f" must be an abstract
  # object with two free attributes. The first
  # one for the element of the array, the second one
  # for the index.
  [f] > mappedi
    list > @
      ^.reducedi
        *
        [a idx item]
          with. > @
            a
            &.f item idx

  # Map without index. Here "f" must be an abstract
  # object with one free attribute, for the element
  # of the array.
  [f] > mapped
    ^.mappedi > @
      [x idx]
        &.f x > @

  # For each array element dataize the object
  # Here "f" must be an abstract object with
  # one free attribute, the element of the
  # array.
  [f] > each
    seq > @
      memory 0 > idx
      while.
        lt.
          idx
          arr.length
        [i]
          seq > @
            f (arr.at i)
            idx.write (i.plus 1)
      TRUE

  # Create a new list without the i-th element
  [i] > without
    ^.reducedi > @
      *
      [a idx item]
        if. > @
          idx.eq i
          a
          a.with item

  # Equal to another object?
  [x] > eq
    if. > @
      eq.
        arr.length
        x.length
      ^.reducedi
        TRUE
        [a idx item]
          and. > @
            a
            eq.
              item
              x.at idx
      FALSE

  # Returns the combined current and passed arrays
  [passed] > concat
    reduced. > @!
      list
        passed
      ^
      [a x]
        a.with x > @
