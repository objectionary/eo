+alias org.eolang.fs.file
+alias org.eolang.fs.path
+alias org.eolang.fs.tmpdir
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.text
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.fs
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:27
+unlint redundant-object:29
+unlint redundant-object:162
+unlint redundant-object:164
+unlint redundant-object:196
+unlint redundant-object:210
+unlint redundant-object:236
+unlint redundant-object:252
+unlint redundant-object:588

# The file object in the filesystem.
[path] > file
  $.path > @
  $ > as-file
  # Converts the `file` to a `path`.
  (QQ.fs.path path).determined > as-path

  # Returns `org.eolang.true` if current file is a directory, returns `org.eolang.false` otherwise.
  [] > is-directory ?

  # Returns `org.eolang.true` if file with current `path` exists in filesystem.
  [] > exists ?

  # If current file exists - returns the file.
  # If current file does not exist - create an empty file
  # in filesystem and returns it.
  [] > touched
    as-file. > @
      if.
        exists
        ^
        seq *
          touch
          ^

    # Creates new empty file and returns `org.eolang.true`.
    #
    # Note: This object is intended for internal use only. Please
    # don't use the object programmatically outside of `file` object.
    [] > touch ?

  # If current file exists - deletes it and returns it.
  # If current file does not exist - just returns it.
  [] > deleted
    as-file. > @
      if.
        exists
        seq *
          delete
          ^
        ^

    # Deletes the file and returns `org.eolang.true`.
    #
    # Note: This object is intended for internal use only. Please
    # don't use the object programmatically outside of `file` object.
    [] > delete ?

  # Gets the file size in bytes and returns it as `org.eolang.number`.
  [] > size ?

  # Moves the current file to `target`, making and returning a new `file` from it.
  [target] > moved
    as-file. > @
      file move

    # Tries to move file from `^.path` to `target`
    # and returns path of moved file as `org.eolang.string`.
    # Returns `org.eolang.error` is failed to move the file.
    #
    # Note: This object is intended for internal use only. Please
    # don't use the object programmatically outside of `file` object.
    [] > move ?

  # Opens the file.
  #
  # The first argument `mode` defines the operations that are allowed on the file
  # and how these operations are performed.
  #
  # The access mode can be:
  # |------|-------------|----------------------|-------------------|----------------------|
  # | Mode | Description | File Existence       | Init pointer pos  | Content Handling     |
  # |======|=============|======================|===================|======================|
  # | "r"  | Read only   | Must exist           | Beginning         | No changes           |
  # |------|-------------|----------------------|-------------------|----------------------|
  # | "w"  | Write only  | Created if not exist | Beginning         | Truncated if exists, |
  # |      |             |                      |                   | created if not       |
  # |------|-------------|----------------------|-------------------|----------------------|
  # | "a"  | Append only | Created if not exist | End               | No truncation,       |
  # |      |             |                      |                   | created if not       |
  # |------|-------------|----------------------|-------------------|----------------------|
  # | "r+" | Read/Write  | Must exist           | Beginning         | No changes           |
  # |------|-------------|----------------------|-------------------|----------------------|
  # | "w+" | Write/Read  | Created if not exist | Beginning         | Truncated if exists, |
  # |      |             |                      |                   | created if not       |
  # |------|-------------|----------------------|-------------------|----------------------|
  # | "a+" | Read/Append | Created if not exist | End (for writing) | No truncation,       |
  # |      |             |                      |                   | created if not       |
  # |------|-------------|----------------------|-------------------|----------------------|
  #
  # The second argument `scope` is the scope where file is available as input
  # (the `read` object is available) or output (the `write` object is available).
  #
  # When `file.open` is dataized - it opens file stream, dataizes the `scope`,
  # closes the file stream and returns an original file object.
  [mode scope] > open
    as-file. > @
      if.
        can-read.not.and can-write.not
        error "Wrong access mod. Only next modes are available: 'r', 'w', 'a', 'r+', 'w+', 'a+'"
        if.
          exists.not
          if.
            must-exists
            error
              sprintf
                "File must exist for given access mod: '%s'"
                * access
            seq *
              touched.touch
              process-file
              ^
          if.
            truncate
            seq *
              deleted.delete
              touched.touch
              process-file
              ^
            seq *
              process-file
              ^
    mode > access!
    (access.eq "r").as-bool > read
    (access.eq "w").as-bool > write
    (access.eq "r+").as-bool > read-write
    (access.eq "w+").as-bool > write-read
    (access.eq "a+").as-bool > read-append
    as-bool. > can-read
      or.
        read.or read-write
        write-read.or read-append
    as-bool. > can-write
      or.
        or.
          write.or read-write
          write-read.or read-append
        (access.eq "a").as-bool
    as-bool. > must-exists
      read.or read-write
    as-bool. > truncate
      write.or write-read

    # Process current file in the provided scope.
    #
    # Here file stream is open, then the stream is passed to `scope`,
    # then given `scope` is dataized and stream is closed.
    # Returns `org.eolang.true` if there are no errors occurred while `scope`
    # dataization, returns `org.eolang.error` otherwise.
    #
    # The object is stream-safe, which means that stream is closed anyway,
    # even if errors are occurred while `scope` dataization.
    #
    # Note: This object is intended for internal use only. Please
    # don't use the object programmatically outside of the `file` object.
    [] > process-file ?

    # File stream.
    # The objects provides an API for using file as input or output.
    [] > file-stream
      # Read `size` amount of bytes from file input stream.
      # Returns new instance of `input-block` with `buffer` read from file, or
      # returns `org.eolang.error` if access mode does not allow reading operations.
      [size] > read
        ((input-block --).read size).this > @

        # File input block
        #
        # Note: This object is intended for internal use only. Please
        # don't use the object programmatically outside of `file` object.
        [buffer] > input-block
          buffer > @
          $ > this

          # Read `size` amount of bytes from file input stream.
          # Returns new instance of `input-block` with `buffer` read from file, or
          # returns `org.eolang.error` if provided access mode does not allow reading operations.
          [size] > read
            this. > @
              if.
                can-read.not
                [] >>
                  error > @
                    sprintf
                      "Can't read from file with provided access mode '%s'"
                      * access
                  $ > this
                seq *
                  read-bytes
                  input-block read-bytes
            ^.^.read-bytes size > read-bytes!

        # Bytes, as `org.eolang.bytes`, read from file input stream.
        #
        # Note: This object is intended for internal use only. Please
        # don't use the object programmatically outside of `file` object.
        [size] > read-bytes ?

      # Write given `buffer` to file output stream.
      # Here `buffer` is either a sequence of bytes or an object that can be
      # dataized via `as-bytes` object.
      # Returns new instance of `output-block` ready to write again, or
      # returns an error if provided access mode does not allow writing operations.
      [buffer] > write
        (output-block.write buffer).this > @

        # File output block.
        #
        # Note: This object is intended for internal use only. Please
        # don't use the object programmatically outside of `file` object.
        [] > output-block
          true > @
          $ > this

          # Write given `buffer` to file output stream.
          # Here `buffer` is either a sequence of bytes or an object that can be
          # dataized via `as-bytes` object.
          # Returns new instance of `output-block` ready to write again, or
          # returns an error if provided access mode does not allow writing operations.
          [buffer] > write
            this. > @
              if.
                can-write.not
                [] >>
                  error > @
                    sprintf
                      "Can't write to file with provided access mode '%s'"
                      * access
                  $ > this
                seq *
                  written-bytes buffer
                  output-block

        # Writes given `buffer` of bytes to file output stream and returns `org.eolang.true`.
        #
        # Note: This object is intended for internal use only. Please
        # don't use the object programmatically outside of `file` object.
        [buffer] > written-bytes ?

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-check-if-current-directory-is-directory
    (file ".").is-directory > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-check-if-absent-file-does-not-exist
    (file "absent.txt").exists.not > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-self-after-deleting
    temp.deleted.path.eq temp.path > @
    tmpdir.tmpfile > temp

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-self-after-touching
    temp.deleted.touched.path.eq temp.path > @
    tmpdir.tmpfile > temp

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-checks-file-does-not-exist-after-deleting
    tmpdir.tmpfile.deleted.exists.not > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-a-file
    tmpdir.tmpfile.deleted.touched.exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-measures-empty-file-after-touching
    tmpdir.tmpfile.deleted.touched.size.eq 0 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-fail-on-double-touching
    tmpdir.tmpfile.deleted.touched.touched.exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-fail-on-double-deleting
    tmpdir.tmpfile.deleted.deleted.exists.not > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-an-error-on-touching-temp-file-in-absent-dir
    (tmpdir.as-path.resolved "foo").as-dir.tmpfile > @

  # This unit test is supposed to check the functionality of the corresponding object.
  # @todo #4096:30min Enable tests-resolves-and-touches unit test.
  #  Now its disabled because of: "Can't #take("path"), the attribute is absent among other test 34
  #  attrs. After we fix it, we should enable the test.
  [] > tests-resolves-and-touches
    seq > @
      *
        resolved.deleted.made
        and.
          f.exists
          contains.
            text f.path
            joined.
              text path.separator
              * "foo" "bar"
    (tmpdir.as-path.resolved "foo/bar").as-dir > resolved
    resolved.tmpfile > f

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-moves-a-file
    and. > @
      (temp.moved (sprintf "%s.dest" (* temp.path))).exists
      temp.exists.not
    tmpdir.tmpfile > temp

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-opening-with-wrong-mode
    tmpdir
    .tmpfile
    .open > @
      "x"
      f > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-reading-from-not-existed-file
    tmpdir
    .tmpfile
    .deleted
    .open > @
      "r"
      f > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-reading-or-writing-from-not-existed-file
    tmpdir
    .tmpfile
    .deleted
    .open > @
      "r+"
      f > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-absent-file-on-opening-for-writing
    tmpdir
    .tmpfile
    .deleted
    .open
      "w"
      true > [f]
    .exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-absent-file-on-opening-for-appending
    tmpdir
    .tmpfile
    .deleted
    .open
      "a"
      true > [f]
    .exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-absent-file-on-opening-for-writing-or-reading
    tmpdir
    .tmpfile
    .deleted
    .open
      "w+"
      true > [f]
    .exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-absent-file-on-opening-for-reading-or-appending
    tmpdir
    .tmpfile
    .deleted
    .open
      "a+"
      true > [f]
    .exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-writes-data-to-file
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .size
    .eq 12 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-appending-data-to-file
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "a"
      f.write "!" > [f]
    .size
    .eq 13 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-truncates-file-opened-for-writing
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "w"
      true > [f]
    .size
    .eq 0 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-truncates-file-opened-for-writing-or-reading
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "w+"
      true > [f]
    .size
    .eq 0 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-truncate-file-opened-for-appending
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "a"
      true > [f]
    .size
    .eq 12 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-truncate-file-opened-for-reading-or-appending
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "a+"
      true > [f]
    .size
    .eq 12 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-truncate-file-opened-for-reading
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "r"
      true > [f]
    .size
    .eq 12 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-writing-with-wrong-mode
    tmpdir
    .tmpfile
    .open > @
      "r"
      f.write "Hello" > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-file
    malloc
    .of
      12
      [m]
        seq > @
          *
            tmpdir
            .tmpfile
            .open
              "w"
              f.write "Hello, world" > [f]
            .open
              "r"
              [f] >>
                m.put > @
                  f.read 12
            m
    .eq "Hello, world" > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-reading-from-file-with-wrong-mode
    tmpdir
    .tmpfile
    .open > @
      "w"
      f.read 12 > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-file-from-different-instances
    seq * > @
      temp.open
        "w"
        f.write "Shrek is love" > [f]
      eq.
        "Shrek is love"
        malloc.of 13 [m]>>
          seq * > @
            file
              ^.src
            .open
              "r"
              [f] >>
                ^.m.put > @
                  f.read 13
            m
    tmpdir.tmpfile > temp
    temp.path > src

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-writes-to-file-from-different-instances
    seq > @
      *
        temp
        .open
          "w"
          f.write "Shrek is love" > [f]
        malloc
        .of
          14
          [m] >>
            seq > @
              *
                file
                  ^.src
                .open
                  "a+"
                  [f] >>
                    seq > @
                      *
                        f.write "!"
                        ^.m.put
                          f.read 14
                m
        .eq "Shrek is love!"
    tmpdir.tmpfile > temp
    temp.path > src

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-file-sequentially
    malloc
    .of
      5
      [m]
        seq > @
          *
            tmpdir
            .tmpfile
            .open
              "w+"
              [f] >>
                seq > @
                  *
                    f.write "Hello, world"
                    ^.m.put i2
                (f.read 7).read 5 > i2
            m
    .eq "world" > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-writes-to-file-sequentially
    tmpdir
    .tmpfile
    .open
      "a+"
      [f]
        (f.write "Hello, world").write "!" > @
    .size
    .eq 13 > @
