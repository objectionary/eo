# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.fs
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# Directory in the file system.
# Apparently every directory is a file.
[file] > dir
  $.file > @
  true > is-directory

  # Makes a directory together with all required
  # parent directories and returns the created directory.
  [] > made
    if. > @
      ^.exists
      ^
      seq *
        mkdir
        ^

    # Makes a directory together with all required
    # parent directories.
    #
    # Attention! The object is for internal usage only, please
    # don't use it programmatically outside of `dir` object.
    [] > mkdir /org.eolang.true

  # Goes though all files in the directory, recursively
  # finding them with the `glob` provided.
  # Returns `tuple` of all files in the directory.
  [glob] > walk /org.eolang.tuple

  # Deletes directory and all files in it, recursively.
  # Returns the deleted directory.
  [] > deleted
    (^.walk "**").at.^ > walked
    walked.length > len!
    if. > @
      ^.exists
      seq *
        rec-delete walked 0
        ^
      ^

    # Deletes files and directories in current directory recursively.
    # Returns `true`.
    #
    # Attention! The object is for internal usage only, please
    # don't use the object programmatically outside of `dir` object.
    [tup index] > rec-delete
      if. > @
        ^.len.eq index
        true
        seq *
          tup.tail.deleted.exists
          ^.rec-delete
            tup.head
            index.plus 1

  # Creates an empty temporary file in the current directory.
  [] > tmpfile
    if. > @
      ^.exists
      QQ.fs.file
        string touch.as-bytes
      error
        sprintf
          "Directory %s does not exist, can't create temporary file"
          * ^.path

    # Creates an empty temporary file in the current directory and
    # returns absolute path to it as `string`.
    #
    # Attention! The object is for internal usage only, please
    # don't use the object programmatically outside of the `dir` object.
    [] > touch /org.eolang.string

  # Opens the file for I/O operations.
  # Since current file is a directory - returns an `error`.
  [mode scope] > open
    error > @
      sprintf
        "The file %s is a directory, can't open for I/O operations"
        * ^.path
