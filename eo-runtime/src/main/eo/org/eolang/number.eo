# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# The `number` object is an abstraction of a 64-bit floating-point
# number that internally is a chain of eight bytes.
[as-bytes] > number
  as-bytes > @
  $ > as-number
  times -1 > neg
  as-i64.as-i32 > as-i32
  as-i32.as-i16 > as-i16
  as-bytes.eq nan.as-bytes > is-nan

  # Convert this `number` to `i64` object.
  [] > as-i64 /org.eolang.i64

  # Returns true if `$` = `x` in terms of bytes.
  # Here `x` can be a `number` or any other object which
  # can be converted to `bytes` via `as-bytes` object.
  # According to IEEE 754 float -0.0 and 0.0 are equal.
  [x] > eq
    x > x-as-bytes!
    as-bytes > self-as-bytes
    0.as-bytes > pos-zero-as-bytes
    -0.as-bytes > neg-zero-as-bytes
    if. > @
      or.
        is-nan
        (number x-as-bytes).is-nan
      false
      or.
        and.
          or.
            x-as-bytes.eq pos-zero-as-bytes
            x-as-bytes.eq neg-zero-as-bytes
          or.
            self-as-bytes.eq pos-zero-as-bytes
            self-as-bytes.eq neg-zero-as-bytes
        self-as-bytes.eq x-as-bytes

  # Returns `true` if `$` < `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > lt
    x > value!
    0.gt > @
      minus
        number value

  # Returns `true` if `$` <= `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > lte
    x > value!
    or. > @
      lt value
      eq value

  # Returns `true` if `$` > `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > gt /org.eolang.bool

  # Returns `true` if `$` > `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > gte
    x > value!
    or. > @
      gt value
      eq value

  # Multiplication of `$` and `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > times /org.eolang.number

  # Sum of `$` and `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > plus /org.eolang.number

  # Difference between `$` and `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > minus
    x > value!
    plus > @
      (number value).neg

  # Quotient of the division of `$` by `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > div /org.eolang.number

  # The object rounds down the original `number`  to the nearest
  # whole `number` that is less than or equal to the original one.
  [] > floor /org.eolang.number

  # Returns `true` if current number does not have a fractional component.
  [] > is-integer
    and. > @
      is-finite
      eq floor

  # Returns `true` if current number is finite.
  [] > is-finite
    and. > @
      is-nan.not
      not.
        or.
          eq positive-infinity
          eq negative-infinity
