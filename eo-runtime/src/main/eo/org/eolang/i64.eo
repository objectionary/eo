# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# The 64 bits signed integer.
# Here `as-bytes` must be a `bytes` object.
[as-bytes] > i64
  as-bytes > @
  $ > as-i64
  $.times -1.as-i64 > neg
  $.as-i32.as-i16 > as-i16

  # Convert this `i64` to `i32`.
  # The `error` is returned if the `i64` number is more than
  # max `i32` value `2147483647`.
  [] > as-i32
    (^.as-bytes.slice 0 4).as-bytes > left
    if. > @
      or.
        left.eq 00-00-00-00
        left.eq FF-FF-FF-FF
      i32 (^.as-bytes.slice 4 4)
      error
        sprintf
          "Can't convert i64 number %d to i32 because it's out of i32 bounds"
          * ^.as-number

  # Convert this `i64` to `number` object.
  [] > as-number /org.eolang.number

  # Returns `true` if `$` < `x`.
  # Here `x` must be an `i64` object.
  [x] > lt
    x > value!
    0.as-i64.gt > @
      ^.minus
        i64 value

  # Returns `true` if `$` <= `x`.
  # Here `x` must be an `i64` object.
  [x] > lte
    x > value!
    or. > @
      ^.lt value
      ^.eq value

  # Returns `true` if `$` > `x`.
  # Here `x` must be an `i64` object.
  [x] > gt /org.eolang.bool

  # Returns `true` if `$` >= `x`.
  # Here `x` must be an `i64` object.
  [x] > gte
    x > value!
    or. > @
      ^.gt value
      ^.eq value

  # Multiplication of `$` and `x`.
  # Here `x` must be an `i64` object.
  [x] > times /org.eolang.i64

  # Sum of `$` and `x`.
  # Here `x` must be an `i64` object.
  [x] > plus /org.eolang.i64

  # Subtraction between `$` and `x`.
  # Here `x` must be an `i64` object.
  [x] > minus
    x > value!
    ^.plus > @
      (i64 value).neg

  # Quotient of the division of `$` by `x`.
  # Here `x` must be an `i64` object.
  # An `error` is returned if or `x` is equal to 0.
  [x] > div /org.eolang.i64
