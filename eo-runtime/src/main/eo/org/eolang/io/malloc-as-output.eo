+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.io
+version 0.0.0
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:43

# Makes an output from allocated block in memory.
# Here `allocated` is `malloc.of.allocated` object.
#
# Imagine you want to read bytes from `console` and save them
# to block in memory.
# Here's how you can do it:
# ```
# malloc.of > result
#   10
#   [mem]
#     console.read 10 > input
#     malloc-as-output mem > output
#     output.write input > @
# ```
#
# First, you read 10 bytes from `console`.
# Second, you create an output from allocated block in memory.
# Third, you write read bytes to output
# After the dataization the object `result` contains read bytes.
[allocated] > malloc-as-output
  # Writes bytes contained in `buffer` to the operating system console.
  # Returns new instance of `output-block` ready to write again.
  [buffer] > write
    (output-block 0).write > @
      buffer

    # Malloc output block.
    #
    # Note: This object is intended for internal use only. Please do not use this object
    # programmatically outside of `malloc-as-output` object.
    #
    # Here `offset` is the offset to write to allocated block in memory with.
    [offset] > output-block
      true > @

      # Writes bytes contained in `buffer` to the operating system console.
      # Returns new instance of `output-block` ready to write again.
      [buffer] > write
        seq * > @
          allocated.write offset buffer
          output-block
            offset.plus buffer.size

  # Tests that malloc-as-output can create an output from allocated memory and write bytes sequentially.
  [] +> tests-makes-an-output-from-malloc-and-writes
    eq. > @
      malloc.of
        10
        [mem]
          seq > @
            *
              (((malloc-as-output mem).write 01-02-03).write 04-05-06-07).write 08-09-A0
              mem
      01-02-03-04-05-06-07-08-09-A0

  # Tests that writing more bytes than allocated memory throws an error.
  [] +> throws-on-writing-more-than-allocated
    malloc.of > @
      2
      [m]
        (malloc-as-output m).write 01-02-03 > @

  # @todo #4475:35min Enable `writes-larger-data-than-provided-block` test after resizing will be implemented.
  #  If the provided memory block is not large enough for the data to write, a runtime error
  #  happens, however we can use `malloc.of.allocated.resized` to increase the size of the block.
  [] > writes-larger-data-than-provided-block
    eq. > @
      malloc.of
        2
        [mem]
          seq > @
            *
              (malloc-as-output mem).write 01-02-03
              mem
      01-02-03
