# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.io
+version 0.0.0

# Tee input is an input that reads from provided `input`,
# writes to provided `output` and behaves as provided `input`.
# To copy bytes input to memory you can do:
# ```
# malloc.of > copied
#   5
#   [m]
#     read. > @
#       tee-input
#         bytes-as-input 01-02-03-04-05
#         malloc-as-output m
#       5
# ```
# After dataization `copied` is equal to `01-02-03-04-05` which are read
# from memory.
[input output] > tee-input
  # Read `size` amount of bytes from `input`.
  # Returns new instance of `input-block` with set
  # `input` ready to be read, `output` ready to be written and bytes `buffer`.
  [size] > read
    ((input-block ^.input ^.output --).read size).self > @

    # Tee-input block.
    #
    # Attention! The object is for internal usage only, please don't use the object
    # programmatically outside of `tee-input` object.
    #
    # Here `input` is an input ready to be read,
    # `output` is an output ready to be written,
    # `buffer` is a sequence of bytes that got from previous reading.
    [input output buffer] > input-block
      $ > self
      buffer > @

      # Read `size` amount of bytes from `input`.
      # Returns new instance of `input-block` with set
      # `input` ready to be read, `output` ready to be written and bytes `buffer`.
      [size] > read
        (^.input.read size).read.^ > read-bytes
        (^.output.write read-bytes).write.^ > written-bytes
        self. > @
          seq *
            written-bytes
            ^.^.input-block
              read-bytes
              written-bytes
              read-bytes.as-bytes
