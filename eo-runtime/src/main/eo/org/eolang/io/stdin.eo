# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.io.console
+alias org.eolang.sys.line-separator
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.io
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# The `stdin` object is a convenient wrapper on `console` object
# which is used as input only and allows to read the data from console.
#
# To read just one line you can do:
# ```
# stdin.next-line
# ```
#
# To read all lines you can do:
# ```
# stdin.all-lines
# ```
#
# or just dataize `stdin` object.
[] > stdin
  all-lines > @

  # Consumes all lines from the standard input stream.
  # There's no line to consume - returns an empty string.
  [] > all-lines
    rec-read ^.next-line -- true > @
    line-separator > separator!

    # Recursive reading from console by one line.
    #
    # Attention. The object is for internal usage only, please
    # don't use the object programmatically outside of `stdin` object.
    [line buffer first] > rec-read
      if. > @
        line.length.eq 0
        string buffer
        ^.rec-read
          ^.^.next-line
          if.
            first
            buffer.concat line
            (buffer.concat ^.separator).concat line
          false

  # Consumes only one line from the standard input stream.
  # If there's no line to consume - returns an empty string.
  [] > next-line
    console.read 1 > first!
    if. > @
      first.size.eq 0
      ""
      rec-read first --

    # Recursive reading from console by one byte.
    #
    # Attention. The object is for internal usage only, please
    # don't use the object programmatically outside of `stdin` object.
    [char buffer] > rec-read
      console.read 1 > next!
      if. > @
        or.
          and.
            char.eq "\r"
            next.eq "\n"
          char.eq "\n"
        string buffer
        ^.rec-read
          next
          buffer.concat char
