# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.txt
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# Regular expression in Perl format.
# Here `pattern` is a string pattern.
# It starts and ends with slash (e.g. "/(your-pattern)/"),
# Also it can be specified by the flag option,
# e.g.
# ```
# (`QQ.txt.regex "/(word)/i").compiled.matches "WORD"
# ```
# Supported flags:
# /d - Enables Unix lines mode.
# /i - Enables case-insensitive matching.
# /x - Permits whitespace and comments in pattern.
# /m - Enables multiline mode.
# /s - Enables dotall mode.
# /u - Enables Unicode-aware case folding.
[expression] > regex
  compiled > @

  # Compile regular expression into pattern.
  # Compilation step is mandatory for usage of `regex` object.
  # But since `regex` object decorates `compiled` object,
  # it's not mandatory to write it in EO.
  # ```
  # (regex "/[a-z]+/").compiled.matches "hello"
  # (regex "/[a-z]+").matches "hello"
  # ```
  # The two lines of code above works the same.
  [] > compiled /pattern

  # Regular expression compiled into pattern.
  # Here `serialized` is `bytes` which represents serialized structure in memory
  # that is built after compilation.
  [serialized] > pattern
    # Returns `true` of given `txt` matches against
    # the provided regular expression pattern.
    (^.match txt).next.exists > [txt] > matches

    # Creates a `matcher` that will match the given input against the pattern.
    [txt] > match
      (matched-from-index 1 0).matched > next

      # Get `position`-th block matched from `start` position.
      # If string subsequence is found - returns `matched` object,
      # returns `not-matched` otherwise.
      #
      # Attention! The object is for internal usage only, please
      # don't use the object programmatically outside of `regex` object.
      [position start] > matched-from-index /matched

      # Block matched the pattern.
      # Here:
      # - `position`      - sequence number of matched block,
      # - `start`         - matched region start index.
      #   If equals to -1 - block was not matched
      # - `from`          - index where matched string sequence starts
      # - `to`            - index where matched string sequence ends
      # - `groups`        - tuple of identified matched groups
      #
      # The block provides the next API to work with matched string subsequence:
      # - `groups-count`  - to get amount of matched groups
      # - `exists`        - to check if matched block is not empty
      # - `next`          - to get next matched block
      # - `text`          - to get matched subsequence as `string`
      # - `group {index}` - to get string subsequence captured by `index`-th group.
      [position start from to groups] > matched
        $ > matched
        groups.length > groups-count
        start.gte 0 > exists
        if. > next
          exists
          matched.
            ^.matched-from-index
              position.plus 1
              to
          error "Matched block does not exist, can't get next"
        if. > text
          exists
          group 0
          error "Matched block does not exist, can't get text"

        # Returns the string subsequence captured by the group
        # by `index` during the `match` operation.
        ^.groups.at index > [index] > group

      # Block which does not match the provided pattern.
      # Decorates `matched` block with corresponding `error`s.
      [position] > not-matched
        ^.matched > @
          position
          -1
          error "Matched block does not exist, can't get 'from' position"
          error "Matched block does not exist, can't get 'to' position"
          error "Matched block does not exist, can't get groups"
