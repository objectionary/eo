# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+version 0.0.0

# This object is doing exactly the same as "memory", but allows
# you to store objects, not only data. In other words, it doesn't
# do dataization when objects are being stored.
# Attention: your program will fail with StackOverflow exception if you try to
# write to "cage" an object that was obtained by any manipulations with the
# same "cage".
# For example, the code below fails
# [] > example
#   cage > cge
#     plus.
#       0
#       0
#   seq > @
#     cge.write
#       plus.
#         cge
#         1
#     cge
#
# The reason of failing is described in detail here:
# https://github.com/objectionary/eo/issues/1698#issuecomment-1675224923
# To prevent failing you have to make a copy of "cage" before writing:
# [] > example
#   cage > cge
#     plus.
#       0
#       0
#   seq > @
#     cge.write
#       plus.
#         cge' # <--copy is made here
#         1
#     cge
# @todo #1698:60min Make up with an idea how to prevent StackOverflow exception
#  or warn a user if he writes cage into the same cage. Options: 1) xsl file
#  that somehow checks if cage is about to write to the same cage 2) catch
#  StackOverflow exception at the top level and say to the user that maybe he
#  writes cage to the same cage.
[] > cage /?

