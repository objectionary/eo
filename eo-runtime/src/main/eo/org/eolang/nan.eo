# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+version 0.0.0
# @todo #1253:30min. Allow division by float zero in EOfloat$EOdiv for being
#  able to make float.nan, float.positive-infinity and float.negative-infinity
#  decorated 0.0.div 0.0, 1.0.div 0.0 and -1.0.div 0.0 accordingly

# @todo #1253:30min. Add extra conditions in Data.ToPhi.toPhi() method for
#  checking if given object is Double.NaN, Double.POSITIVE_INFINITY or
#  Double.NEGATIVE_INFINITY and convert them to Phi objects (EOfloat$EOnan,
#  EOfloat$EOpositive_infinity and EOfloat$EOnegative-infinity)

# @todo #1253:30min. After allowing division by zero float in EOfloat$EOdiv
#  make float.nan, float.positive-infinity and float.negative-infinity
#  decorated 0.0.div 0.0, 1.0.div 0.0 and -1.0.div 0.0 accordingly
# Not a number
[] > nan
  # Tests that $ = x
  [x] > eq
    FALSE > @

  # Tests that $ â‰  x
  [x] > neq
    TRUE > @

  # Tests that $ < x
  [x] > lt
    FALSE > @

  # Tests that $ â‰¤ x
  [x] > lte
    FALSE > @

  # Tests that $ > x
  [x] > gt
    FALSE > @

  # Tests that $ â‰¥ x
  [x] > gte
    FALSE > @

  # Multiplication of $ and x
  [x] > times
    ^ > @

  # Sum of $ and x
  [x] > plus
    ^ > @

  # Negation of $
  [] > neg
    ^ > @

  # Sign of $ (-1.0, 0.0, or 1.0)
  [] > signum
    ^ > @

  # Difference between $ and x
  [x] > minus
    ^ > @

  # Quotient of the division of $ by x
  [x] > div
    ^ > @

  # Converts this to bytes
  [] > as-bytes
    7F-C0-00-00 > @

  # Converts this to int
  [] > as-int
    error "You can't convert NaN to int" > @

  # Converts this to string
  [] > as-string
    "NaN" > @
