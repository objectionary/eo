# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.structs.list
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.structs
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# Range â€” create a `list` containing a range of elements
# Here `start` must be a abstract object that must have an object `next` to get
# next element and object `lt` to compare with the `end` object.
# Every next element also must have an objects `next` and `lt`.
# The first object in the chain must have a default value
# e.g.
# range
#   []
#     [num] > build
#       num > @!
#       build (@.plus 1) > next
#     build 1 > @
#   10
# Here the first argument is an abstract object that has a default value - 1 and
# it also has object `next`. The next object after first is decorator of
# `1.plus 1` and also has object `next`. Since these objects are ints - they have
# object `lt` by default.
[start end] > range
  list > @
    if.
      start.lt end
      appended
        * start
        start.next
      *

  # Constructor of range.
  #
  # Attention! The object is for internal usage only, please
  # don't use the object programmatically outside of `range` object.
  [acc current] > appended
    if. > @
      current.lt ^.end
      ^.appended
        acc.with current
        current.next
      acc
