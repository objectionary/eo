# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.structs.list
+alias org.eolang.structs.map
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.structs
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# Set - is an unordered `list` of unique objects.
[lst] > set
  initialized. > @
    initialized
      map
        list
          lst
        .mapped
          map.entry item true > [item]
        .origin

  # Initialized set with rebuilt unique sequence.
  [map] > initialized
    $ > initialized
    $.map.keys > @
    $.map.size > size

    # Append new `item` to set. It must be possible to get
    # hash code of `item` so `item` must be dataizable.
    [item] > with
      set.initialized > @
        ^.map.with item true

    # Remove `item` from `set`. If `item` is not present,
    # the set wont be changed.
    [item] > without
      set.initialized > @
        ^.map.without item

    # Check if given `item` exists in set.
    [item] > has
      ^.map.has item > @
