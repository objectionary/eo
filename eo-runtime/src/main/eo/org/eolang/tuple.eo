# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.0.0

# Tuple.
# An ordered, immutable collection of elements.
[prev value length] > tuple
  $ > as-tuple

  # Empty tuple.
  # A tuple with no elements. When dataized, it represents an immutable, empty collection.
  [] > empty
    $ > empty
    $ > as-tuple
    0 > length
    error "Can't get prev from the empty tuple" > prev
    error "Can't get value from the empty tuple" > value

    # Take one element from the tuple, at the given position.
    error "Can't get an object from the empty tuple" > [i] > at

    # Create a new tuple with this element added to the end of it.
    [x] > with
      as-tuple. > @
        tuple
          ^
          x
          (length.plus 1).as-number

  # Take one element from the tuple, at the given position.
  [i] > at
    i > idx!
    if. > index!
      0.gt idx
      length.plus idx
      idx
    if. > @
      or.
        0.gt index
        length.lte index
      error "Given index is out of tuple bounds"
      at-fast ^

    [tup] > at-fast
      if. > @
        (tup.length.plus -1).eq index
        tup.value
        at-fast tup.prev

  # Create a new tuple with this element added to the end of it.
  [x] > with
    as-tuple. > @
      tuple
        ^
        x
        (length.plus 1).as-number
