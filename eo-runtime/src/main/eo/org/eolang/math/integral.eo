# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.math
+version 0.0.0

# Counts integral from `a` to `b`.
# Here `func` is integration function, `a` is an upper limit,
# `b` is bottom limit, `n` is the number of partitions of the integration interval.
[fun a b n] > integral
  [a b] > subsection
    times. > @
      div.
        b.minus a
        6.0
      plus.
        ^.fun a
        plus.
          times.
            4.0
            ^.fun
              times.
                0.5
                a.plus b
          ^.fun b
  as-number. > @
    malloc.of
      8
      [sum] >>
        malloc.for > @
          ^.a
          [left] >>
            ^.^.b > right
            ((right.minus left).div ^.^.n).as-number > step
            seq * > @
              while
                [i] >>
                  if. > @
                    (^.left.as-number.plus ^.step).lt ^.right
                    seq *
                      ^.^.sum.put
                        ^.^.sum.as-number.plus
                          ^.^.^.subsection
                            ^.left.as-number
                            ^.left.as-number.plus ^.step
                      ^.left.put
                        ^.left.as-number.plus ^.step
                      true
                    false
                true > [i]
              sum
