# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.sys.os
+alias org.eolang.sys.posix
+alias org.eolang.sys.win32
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.math
+version 0.0.0

# Generates a pseudo-random number.
[seed] > random
  $ > fixed
  # Get float value for current `seed`.
  # Divide `seed` to maximum possible value of the `seed` which is 1 << 53.
  div. > @
    seed.as-number
    00-20-00-00-00-00-00-00.as-i64.as-number
  # Next random.
  # Formula is based on linear congruential pseudorandom number generator, as defined by
  # D. H. Lehmer and described by Donald E. Knuth in The Art of Computer Programming, Volume 2,
  # Third edition: Seminumerical Algorithms, section 3.2.1.
  # Magic numbers are taken from Java implementation. 48 lower bits are considered.
  # `next` = (`seed` * 25214903917 + 11) & ((1 << 48) - 1).
  # Here `00-0F-FF-FF-FF-FF-FF-FF` is pre calculated `(1 << 48) - 1`.
  fixed. > next
    random
      as-number.
        as-i64.
          and.
            as-i64.
              plus.
                seed.times 25214903917
                11
            00-0F-FF-FF-FF-FF-FF-FF

  # New random with pseudo-random seed.
  [] > pseudo
    35 > const-1
    53 > const-2
    17 > const-3
    00-00-00-00-00-00-00-01 > one
    random time-seed > @
    as-number. > time-seed
      plus.
        as-i64.
          and.
            time-bytes.left const-1
            ((one.left const-2).as-i64.minus one).as-bytes
        plus.
          as-i64.
            and.
              time-bytes.left const-3
              ((one.left const-1).as-i64.minus one).as-bytes
          as-i64.
            and.
              time-bytes
              ((one.left const-3).as-i64.minus one).as-bytes
    as-bytes. > time-bytes
      as-i64.
        if.
          os.is-windows
          (win32 "GetSystemTime" *).milliseconds
          []
            (posix "gettimeofday" *).output > timeval
            plus. > @
              timeval.tv-sec.times 1000
              as-number.
                timeval.tv-usec.as-i64.div 1000.as-i64
