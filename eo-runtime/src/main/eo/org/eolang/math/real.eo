# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.math.e
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.math
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# Returns a floating point number.
[num] > real
  num > @
  # Returns Euler's number raised to the power of a `num`.
  (QQ.math.real e).pow num > exp

  # Calculate MOD.
  [x] > mod
    number ^.num.as-bytes > dividend
    number x.as-bytes > divisor
    if. > @
      divisor.eq 0
      error "Can't calculate mod by zero"
      if.
        dividend.gt 0
        abs-mod
        abs-mod.neg

    [] > abs-mod
      (QQ.math.real ^.dividend).abs > dividend-abs
      (QQ.math.real ^.divisor).abs > divisor-abs
      minus. > @
        dividend-abs
        divisor-abs.times
          floor.
            dividend-abs.div divisor-abs

  # Absolute value of `num` (i.e., with no sign).
  [] > abs
    number ^.num.as-bytes > value
    if. > @
      value.gte 0
      value
      value.neg

  # Make `^.num` power `x`.
  [x] > pow /org.eolang.number

  # Returns the positive square root of a `num`.
  [] > sqrt /org.eolang.number

  # Returns the natural logarithm `e` of a `num`.
  [] > ln /org.eolang.number

  # Calculates arc cosine of a `num`.
  [] > acos /org.eolang.number

  # Calculates arc sine of a `num`.
  [] > asin /org.eolang.number
