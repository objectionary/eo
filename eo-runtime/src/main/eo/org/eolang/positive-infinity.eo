# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.0.0

# Positive infinity.
[] > positive-infinity
  number 7F-F0-00-00-00-00-00-00 > @
  $ > floor
  negative-infinity > neg
  false > is-nan
  false > is-finite
  false > is-integer
  error "Can't convert positive infinity to i64" > as-i64

  # Tests that $ = x.
  [x] > eq
    eq. > @
      ^.as-bytes
      x.as-bytes

  # Tests that $ < x.
  false > [x] > lt

  # Tests that $ <= x.
  ^.eq x > [x] > lte

  # Tests that $ > x.
  [x] > gt
    x > value!
    not. > @
      or.
        (number value).is-nan
        ^.eq value

  # Tests that $ >= x.
  [x] > gte
    x > value!
    not. > @
      (number value).is-nan

  # Multiplication of $ and x.
  [x] > times
    x > value!
    number value > num
    if. > @
      or.
        num.is-nan
        num.eq 0
      nan
      if.
        num.gt 0
        ^
        negative-infinity

  # Sum of $ and x.
  [x] > plus
    x > value!
    if. > @
      or.
        (number value).is-nan
        value.eq negative-infinity
      nan
      ^

  # Difference between $ and x.
  [x] > minus
    x > value!
    if. > @
      or.
        (number value).is-nan
        value.eq ^
      nan
      ^

  # Quotient of the division of $ by x.
  [x] > div
    x > value!
    number value > num
    if. > @
      or.
        num.is-nan
        num.is-finite.not
      nan
      if.
        or.
          value.eq -0.as-bytes
          0.gt value
        negative-infinity
        ^
