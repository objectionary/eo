# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.0.0
+rt node eo2js-runtime:0.0.0
+version 0.0.0

# The object encapsulates a chain of bytes, adding a few
# convenient operations to it. Objects like `int`, `string`,
# and `float` encapsulate `bytes`.
[data] > bytes
  data > @
  $ > as-bytes
  $.eq 01- > as-bool

  # Turn this chain of eight bytes into a number.
  # If there are less or more than eight bytes, there will
  # be an error returned.
  [] > as-number
    if. > @
      ^.eq nan.as-bytes
      nan
      if.
        ^.eq positive-infinity.as-bytes
        positive-infinity
        if.
          ^.eq negative-infinity.as-bytes
          negative-infinity
          if.
            ^.size.eq 8
            number ^
            error
              sprintf
                "Can't convert non 8 length bytes to a number, bytes are %x"
                * ^

  # Equals to another object.
  [b] > eq /org.eolang.bool

  # Total number of bytes.
  [] > size /org.eolang.number

  # Represents a sub-sequence inside the current one.
  [start len] > slice /org.eolang.bytes

  # Turn this chain of eight bytes into a i64 number.
  # If there are less or more than eight bytes, there will
  # be an error returned.
  [] > as-i64
    if. > @
      ^.size.eq 8
      i64 ^
      error
        sprintf
          "Can't convert non 8 length bytes to i64, bytes are %x"
          * ^

  # Turn this chain of four bytes into a i32 number.
  # If there are less or more than four bytes, there will
  # be an error returned.
  [] > as-i32
    if. > @
      ^.size.eq 4
      i32 ^
      error
        sprintf
          "Can't convert non 4 length bytes to i32, bytes are %x"
          * ^

  # Turn this chain of two bytes into a i16 number.
  # If there are less or more than two bytes, there will
  # be an error returned.
  [] > as-i16
    if. > @
      ^.size.eq 2
      i16 ^
      error
        sprintf
          "Can't convert non 2 length bytes to i16, bytes are %x"
          * ^

  # Calculate bitwise and.
  [b] > and /org.eolang.bytes

  # Calculate bitwise or.
  [b] > or /org.eolang.bytes

  # Calculate bitwise xor.
  [b] > xor /org.eolang.bytes

  # Calculate bitwise not.
  [] > not /org.eolang.bytes

  # Calculate bitwise left shift.
  ^.right x.neg > [x] > left

  # Calculate bitwise right shift.
  [x] > right /org.eolang.bytes

  # Concatenation of two byte sequences:
  # the current and the provided one,
  # as a new sequence.
  [b] > concat /org.eolang.bytes
