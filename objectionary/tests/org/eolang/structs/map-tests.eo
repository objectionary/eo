+alias org.eolang.structs.map
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang.structs
+version 0.53.0
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint sparse-decoration

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-map-rebuilds-itself
  map > mp
    *
      map.entry 1 1
      map.entry 1 1
      map.entry 2 1
      map.entry 2 1
  2.eq mp.size > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-map-rebuilds-itself-only-once
  eq. > @
    1
    malloc.for
      0
      [m]
        map > mp
          *
            map.entry
              m.put (m.as-number.plus 1)
              1
        seq > @
          *
            (mp.found 1).exists
            (mp.found 1).exists
            m

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-returns-list-of-keys
  eq. > @
    keys.
      map
        *
          map.entry 1 2
          map.entry 2 3
          map.entry 3 4
    * 1 2 3

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-returns-list-of-values
  eq. > @
    values.
      map
        *
          map.entry 1 2
          map.entry 2 3
          map.entry 3 4
    * 2 3 4

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-finds-element-by-key-in-map
  map > mp
    *
      map.entry "one" 1
      map.entry "two" 2
      map.entry "three" 3
  mp.found "two" > found
  2.eq found.get > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-does-not-find-element-by-key-in-hash-map
  map
    *
      map.entry "one" 1
      map.entry "two" 2
  .found "three"
  .exists
  .not > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-has-element-with-key-in-hash-map
  map
    *
      map.entry "one" 1
      map.entry "two" 2
  .has "two" > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-does-not-have-element-by-key-in-hash-map
  map
    *
      map.entry "one" 1
      map.entry "two" 2
  .has "three"
  .not > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-does-not-change-map-without-non-existed-element
  map
    *
      map.entry "one" 1
  .without "two"
  .size
  .eq 1 > @

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-removes-element-from-map-by-key
  map
    *
      map.entry "one" 1
      map.entry "two" 2
  .without "one" > mp
  and. > @
    1.eq mp.size
    (mp.has "one").not

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-adds-new-pair-to-hash-map
  map
    *
      map.entry "one" 1
  .with "two" 2 > mp
  and. > @
    2.eq mp.size
    mp.has "two"

# This unit test is supposed to check the functionality of the corresponding object.
[] > tests-replaces-value-if-pair-with-key-exists-in-map
  map
    *
      map.entry "one" 1
      map.entry "two" 2
  .with "two" 3 > mp
  and. > @
    2.eq mp.size
    3.eq (mp.found "two").get
