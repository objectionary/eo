+alias org.eolang.fs.file
+alias org.eolang.fs.path
+alias org.eolang.fs.tmpdir
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.text
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang.fs
+version 0.56.2
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint duplicate-names-in-diff-context

# This unit test is supposed to check the functionality of the corresponding object.
[] > file-tests
  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-check-if-current-directory-is-directory
    (file ".").is-directory > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-check-if-absent-file-does-not-exist
    (file "absent.txt").exists.not > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-self-after-deleting
    temp.deleted.path.eq temp.path > @
    tmpdir.tmpfile > temp

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-self-after-touching
    temp.deleted.touched.path.eq temp.path > @
    tmpdir.tmpfile > temp

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-checks-file-does-not-exist-after-deleting
    tmpdir.tmpfile.deleted.exists.not > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-a-file
    tmpdir.tmpfile.deleted.touched.exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-measures-empty-file-after-touching
    tmpdir.tmpfile.deleted.touched.size.eq 0 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-fail-on-double-touching
    tmpdir.tmpfile.deleted.touched.touched.exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-fail-on-double-deleting
    tmpdir.tmpfile.deleted.deleted.exists.not > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-an-error-on-touching-temp-file-in-absent-dir
    (tmpdir.as-path.resolved "foo").as-dir.tmpfile > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-and-touches
    seq > @
      *
        resolved.deleted.made
        and.
          f.exists
          contains.
            text f.path
            joined.
              text path.separator
              * "foo" "bar"
    (tmpdir.as-path.resolved "foo/bar").as-dir > resolved
    resolved.tmpfile > f

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-moves-a-file
    and. > @
      (temp.moved dest).exists
      temp.exists.not
    tmpdir.tmpfile > temp
    sprintf > dest
      "%s.dest"
      * temp.path

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-opening-with-wrong-mode
    tmpdir
    .tmpfile
    .open > @
      "x"
      f > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-reading-from-not-existed-file
    tmpdir
    .tmpfile
    .deleted
    .open > @
      "r"
      f > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-reading-or-writing-from-not-existed-file
    tmpdir
    .tmpfile
    .deleted
    .open > @
      "r+"
      f > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-absent-file-on-opening-for-writing
    tmpdir
    .tmpfile
    .deleted
    .open
      "w"
      true > [f]
    .exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-absent-file-on-opening-for-appending
    tmpdir
    .tmpfile
    .deleted
    .open
      "a"
      true > [f]
    .exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-absent-file-on-opening-for-writing-or-reading
    tmpdir
    .tmpfile
    .deleted
    .open
      "w+"
      true > [f]
    .exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-touches-absent-file-on-opening-for-reading-or-appending
    tmpdir
    .tmpfile
    .deleted
    .open
      "a+"
      true > [f]
    .exists > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-writes-data-to-file
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .size
    .eq 12 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-appending-data-to-file
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "a"
      f.write "!" > [f]
    .size
    .eq 13 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-truncates-file-opened-for-writing
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "w"
      true > [f]
    .size
    .eq 0 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-truncates-file-opened-for-writing-or-reading
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "w+"
      true > [f]
    .size
    .eq 0 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-truncate-file-opened-for-appending
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "a"
      true > [f]
    .size
    .eq 12 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-truncate-file-opened-for-reading-or-appending
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "a+"
      true > [f]
    .size
    .eq 12 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-truncate-file-opened-for-reading
    tmpdir
    .tmpfile
    .open
      "w"
      f.write "Hello, world" > [f]
    .open
      "r"
      true > [f]
    .size
    .eq 12 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-writing-with-wrong-mode
    tmpdir
    .tmpfile
    .open > @
      "r"
      f.write "Hello" > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-file
    malloc
    .of
      12
      [m]
        seq > @
          *
            tmpdir
            .tmpfile
            .open
              "w"
              f.write "Hello, world" > [f]
            .open
              "r"
              [f] >>
                m.put > @
                  f.read 12
            m
    .eq "Hello, world" > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-reading-from-file-with-wrong-mode
    tmpdir
    .tmpfile
    .open > @
      "w"
      f.read 12 > [f]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-file-from-different-instances
    seq * > @
      temp.open
        "w"
        f.write "Shrek is love" > [f]
      eq.
        "Shrek is love"
        malloc.of 13 [m]>>
          seq * > @
            file
              ^.src
            .open
              "r"
              [f] >>
                ^.m.put > @
                  f.read 13
            m
    tmpdir.tmpfile > temp
    temp.path > src

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-writes-to-file-from-different-instances
    seq > @
      *
        temp
        .open
          "w"
          f.write "Shrek is love" > [f]
        malloc
        .of
          14
          [m] >>
            seq > @
              *
                file
                  ^.src
                .open
                  "a+"
                  [f] >>
                    seq > @
                      *
                        f.write "!"
                        ^.m.put
                          f.read 14
                m
        .eq "Shrek is love!"
    tmpdir.tmpfile > temp
    temp.path > src

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-file-sequentially
    malloc
    .of
      5
      [m]
        seq > @
          *
            tmpdir
            .tmpfile
            .open
              "w+"
              [f] >>
                seq > @
                  *
                    f.write "Hello, world"
                    ^.m.put i2
                f.read 7 > i1
                i1.read 5 > i2
            m
    .eq "world" > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-writes-to-file-sequentially
    tmpdir
    .tmpfile
    .open
      "a+"
      [f]
        o1.write "!" > @
        f.write "Hello, world" > o1
    .size
    .eq 13 > @
