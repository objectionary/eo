+alias org.eolang.fs.dir
+alias org.eolang.fs.tmpdir
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang.fs
+version 0.56.2
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint duplicate-names-in-diff-context

# This unit test is supposed to check the functionality of the corresponding object.
[] > dir-tests
  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-makes-new-directory
    and. > @
      d.exists
      d.is-directory
    (tmpdir.tmpfile.deleted.as-path.resolved "foo-new").as-dir.made > d

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-deletes-empty-directory
    tmpdir
    .tmpfile
    .deleted
    .as-path
    .resolved
      "bar-empty"
    .as-dir
    .made
    .deleted
    .exists
    .not > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-opening-directory
    tmpdir.open > @
      "w"
      true > [d]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-deletes-directory-with-files-recursively
    and. > @
      and.
        and.
          and.
            first.exists
            second.exists
          d.deleted.exists.not
        first.exists.not
      second.exists.not
    (dir tmpdir.tmpfile.deleted).made > d
    d.tmpfile > first
    d.tmpfile > second

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-deletes-directory-with-file-and-dir
    and. > @
      and.
        and.
          and.
            and.
              inner.is-directory
              inner.exists
            f.exists
          d.deleted.exists.not
        inner.exists.not
      f.exists.not
    (dir tmpdir.tmpfile.deleted).made > d
    (dir d.tmpfile.deleted).made > inner
    d.tmpfile > f

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-walks-recursively
    seq > @
      *
        (d.resolved "foo/bar").as-dir.made
        (d.resolved "foo/bar/test.txt").as-file.touched
        (d.resolved "x/y/z").as-dir.made
        (d.resolved "x/y/z/a.txt").as-file.touched
        (d.as-dir.walk "**/*.txt").length.eq 2
    (dir tmpdir.tmpfile.deleted).made.as-path > d
