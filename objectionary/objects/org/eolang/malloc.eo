+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.56.4
+rt node eo2js-runtime:0.0.0
+version 0.56.4
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# The `malloc` object is an abstraction of a storage of data in heap
# memory. The implementation of `malloc` is platform dependent. It may
# use either OS-level or VM-level memory management mechanism.
#
# There are two ways of how `malloc` could be used:
#
# First, when the size of the required memory block is known beforehand:
#
# ```
# malloc.of
#   8
#   [m]
#     m.put 10 > @
# ```
#
# Here, the first argument is a size of allocated block in memory, the second argument
# is the scope where memory block is available for reading and writing. When `malloc.of` is
# dataized it dataizes the scope, clears the block and returns the result of scope dataization.
# So there's no need for end-user to care about clearing memory after allocation.
#
# Second, when the size is not known upfront, but there exists
# an object ready to be dataized and placed into the memory block
# (the size of the block will be equal to the amount of bytes
# produced by the dataization of the object):
#
# ```
# malloc.for
#   "Hello world!"
#   [m]
#     m.put "Hello, Jeff!" > @
# ```
#
# Here, the first argument is an object which will be dataized, then a block in memory of given data
# size is allocated and the data is written to the block. The second argument is the same scope as
# in the p.1.
#
# Consider the next code:
# ```
# malloc.of
#   8                         # allocate 8 bytes length block in memory
#   [m]
#     seq > @
#       *
#         m.write 2 "Hello"   # write object "Hello" with offset 2
#         m.read 3 4          # read 4 bytes from offset 3 -> "ello"
#         m.put 42            # write object 42 with offset 0
#         m.get               # just get all the data from the memory block -> 42
#         m.size              # get size of the block
#         m.id                # get identifier of the block
#         m.@                 # the same as m.get
# ```
# Here the void attribute in the scope object is memory-block object which provides API to write
# and read data to the memory.
[] > malloc
  # Allocates empty block in memory.
  [scope] > empty
    malloc.of > @
      0
      scope

  # Allocates block in memory for given `object`. After allocation the provided object is dataized
  # and the data are written into memory.
  [object scope] > for
    malloc.of > @
      bts.size
      [m] >>
        seq * > @
          m.write 0 bts
          scope m
    (dataized object).as-bytes > bts

  # Allocates block in memory of given `size`. After allocation the `size` zero bytes bytes are
  # written into memory.
  [size scope] > of
    # Dataizes given `scope` and returns the result of the dataization as `org.eolang.bytes`.
    [] > @ ?

    # Allocated block in memory that provides an API for writing and reading.
    [id] > allocated
      get > @
      # Just get all the data from the allocated block in memory.
      read 0 size > get

      # Returns size of allocated block in memory as `org.eolang.number`.
      [] > size ?

      # Resizes allocated block in memory and returns `true`.
      # Here `new-size` must be positive `number`.
      # The `error` returned if failed to resize block in memory.
      # Returns `org.eolang.malloc.of.allocated` object.
      [new-size] > resized ?

      # Reads the data from block in memory with with offset `source` and `length` and writes
      # to the block with offset `target`.
      # Returns `true` on success, or `error` on failure.
      [source target length] > copy
        write > @
          target
          read source length

      # Read `length` bytes with `offset` from the allocated block in memory and return them
      # as `org.eolang.bytes`.
      [offset length] > read ?

      # Write `data` with `offset` to the allocated block in memory
      # and return `org.eolang.true`.
      [offset data] > write ?

      # Put `object` into the allocated block in memory. The `object` is supposed to be dataizable.
      [object] > put
        seq * > @
          write 0 object
          get

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-writes-into-memory-of
    mem.eq 10 > @
    malloc.of > mem
      8
      [m]
        seq > @
          *
            m.write 0 10
            m

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-puts-into-memory-for
    mem.eq 10 > @
    malloc.for > mem
      0
      m.put 10 > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-size-from-scope
    eq. > @
      malloc.of
        5
        m.size > [m]
      5

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-scope-is-dataized-twice
    eq. > @
      2
      malloc.for
        0
        [f]
          seq > @
            *
              second
              second
          malloc.of > second
            1
            f.put (f.as-number.plus 1) > [s] >>

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-for-writes-first-init-value
    eq. > @
      malloc.for
        42
        m > [m]
      42

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-puts-over-the-previous-data
    eq. > @
      42.as-bytes.concat
        "orld!".as-bytes
      mem
    malloc.of > mem
      13
      [m]
        seq > @
          *
            m.put "Hello, world!"
            m.put 42

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-rewrites-and-increments-itself
    mem.eq 6 > @
    malloc.of > mem
      8
      [m]
        seq > @
          *
            m.write 0 1
            m.put (m.as-number.plus 5)

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-writes-into-two-malloc-objects
    and. > @
      a.eq 10
      b.eq 20
    malloc.of > a
      8
      m.put 10 > [m]
    malloc.of > b
      8
      m.put 20 > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-overflow-boolean-malloc
    malloc.for > @
      false
      m.put 86124867.88 > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-overflow-string-malloc
    malloc.for > @
      "Hello"
      m.put "Much longer string!" > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-is-strictly-sized-int
    eq. > @
      malloc.for
        12248
        m.put 2556 > [m]
      2556

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-is-strictly-typed-float
    eq. > @
      malloc.for
        245.88
        m.put 82.22 > [m]
      82.22

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-memory-is-strictly-sized-string
    eq. > @
      malloc.for
        "Hello"
        m.put "Prot" > [m]
      "Proto"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-is-strictly-typed-bool
    malloc.for > @
      false
      m.put true > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-gives-id-to-allocated-block
    malloc.of > @
      1
      m.put (m.id.gt 0) > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-allocates-right-size-block
    malloc.of > @
      1
      [b]
        malloc.of > @
          10
          b.put (m.size.eq 10) > [m] >>

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-writes-and-reads
    malloc.of > @
      1
      [b]
        malloc.of > @
          12
          [m] >>
            seq > @
              *
                m.write 0 "Hello, "
                m.write 7 "Jeff!"
                b.put
                  eq.
                    m.read 0 12
                    "Hello, Jeff!"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-concacts-strings-with-offset
    malloc.of > @
      1
      [b]
        malloc.of > @
          3
          [m] >>
            seq > @
              *
                m.write 0 "XXX"
                m.write 1 "Y"
                b.put
                  (m.read 0 3).eq "XYX"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-writing-more-than-allocated-to-malloc-with-offset
    malloc.of > @
      1
      m.write 1 true > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-reads-with-offset-and-length
    malloc.of > @
      1
      [b]
        malloc.of > @
          10
          [m] >>
            seq > @
              *
                m.write 2 "Hello"
                b.put
                  (m.read 2 5).eq "Hello"

  # Creates memory block of zero bytes (this should be a legal operation).
  [] +> tests-allocates-zero-bytes
    eq. > @
      0
      malloc.of
        0
        m.size > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-increases-block-size
    malloc.of > @
      1
      [b]
        malloc.for > @
          01-02-03-04
          [m] >>
            ^.b.put > @
              and.
                (m.resized 6).size.eq 6
                m.get.eq 01-02-03-04-00-00

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-decreases-block-size
    malloc.of > @
      1
      [b]
        malloc.for > @
          01-02-03-04-05
          [m] >>
            ^.b.put > @
              and.
                (m.resized 3).size.eq 3
                m.get.eq 01-02-03

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-changing-size-to-negative
    malloc.of > @
      1
      m.resized -1 > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-malloc-empty-is-empty
    malloc.empty > @
      m.size.eq 0 > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-copies-data-inside-itself
    malloc.for > @
      01-02-03-04-05
      [m]
        and. > @
          m.copy 1 2 2
          m.get.eq 01-02-02-03-05

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-copies-data-from-start-to-end
    malloc.for > @
      01-02-03-04-05-06
      [m]
        and. > @
          m.copy 0 3 3
          m.get.eq 01-02-03-01-02-03

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-copying-with-wrong-source
    malloc.for > @
      0
      m.copy 9 1 1 > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-copying-with-wrong-target
    malloc.for > @
      0
      m.copy 3 9 1 > [m]

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-copying-with-wrong-length
    malloc.for > @
      0
      m.copy 3 1 9 > [m]
