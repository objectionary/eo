+alias org.eolang.io.console
+alias org.eolang.sys.line-separator
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.io
+version 0.58.2
+unlint unit-test-missing
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# The `stdin` object is a convenient wrapper on `console` object
# which is used as input only and allows to read the data from console.
#
# To read just one line you can do:
# ```
# stdin.next-line
# ```
#
# To read all lines you can do:
# ```
# stdin.all-lines
# ```
#
# or just dataize `stdin` object.
[] > stdin
  all-lines > @

  # Consumes all lines from the standard input stream.
  # If there's no line to consume, it returns an empty string.
  [] > all-lines
    rec-read next-line -- true > @
    line-separator > separator!

    # Recursive reading from console by one line.
    #
    # Attention. The object is for internal usage only, please
    # don't use the object programmatically outside of `stdin` object.
    [line buffer first] > rec-read
      if. > @
        line.length.eq 0
        string buffer
        rec-read
          next-line
          if.
            first
            buffer.concat line
            (buffer.concat separator).concat line
          false

  # Consumes only one line from the standard input stream.
  # If there's no line to consume, it returns an empty string.
  [] > next-line
    if. > @
      first.as-bytes.size.eq 0
      ""
      rec-read first --
    (console.read 1).@ > first

    # Recursive reading from console by one byte.
    #
    # Attention. The object is for internal usage only, please
    # don't use the object programmatically outside of `stdin` object.
    [input buffer] > rec-read
      if. > @
        or.
          char.eq --
          or.
            and.
              char.eq "\r"
              next.as-bytes.eq "\n"
            char.eq "\n"
        string buffer
        rec-read
          next
          buffer.concat char
      input.as-bytes > char
      (input.read 1).@ > next
