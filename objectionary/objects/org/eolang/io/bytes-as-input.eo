+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.io
+version 0.58.3
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:47

# Makes an `input` from bytes.
# Here `bts` is sequence of bytes or an object that can be dataized
# via `as-bytes`.
# Here's how you can read portions of bytes from the input:
# ```
# bytes-as-input > i
#   01-02-03-04-05-06-07-08-F5-F6
# seq > @
#   *
#     i                 # error
#     i.read 4 > i1     # 01-02-03-04
#     i1.read 4 > i2    # 05-06-07-08
#     i2.read 4 > i3    # F5-F6
#     i3.read 3 > i4    # --
# ```
# Here every `read` object returns input block.
# Every input block is a requested portion of bytes, so it's dataizable.
# Also every input block has object `read` which allows to get
# next input block with next potion of bytes.
# If requested amount of bytes is more than amount
# of available bytes - only available bytes are included.
# If there's no available bytes - empty bytes (`--`) are included.
[bts] > bytes-as-input
  # Read `size` amount of bytes from `bts`.
  # Returns new instance of `input-block` with set
  # sliced `data` and `buffer`.
  [size] > read
    ((input-block bts --).read size).@ > @

    # Bytes-as-input block.
    #
    # Attention! The object is for internal usage only, please don't use the object
    # programmatically outside of `bytes-as-input` object.
    #
    # Here `data` is a sequence of bytes that can be read from,
    # `buffer` is a sequence of bytes that got from previous reading.
    [data buffer] > input-block
      buffer > @

      # Read `size` amount of bytes from `data`.
      # Returns new instance of `input-block` with set
      # sliced `data` and `buffer`.
      [size] > read
        if. > @
          available.eq 0
          input-block -- --
          input-block
            as-bytes.
              data.slice
                next
                (number available).minus
                  number next
            as-bytes.
              data.slice 0 next
        size > to-read!
        data.size > available!
        if. > next!
          gt.
            number available
            to-read
          to-read
          available

  # Tests that bytes-as-input can create an input from bytes and read portions sequentially.
  [] +> tests-makes-an-input-from-bytes-and-reads
    and. > @
      and.
        and.
          i1.eq 01-02-03-04
          i2.eq 05-06-07-08
        i3.eq F5-F6
      (i3.read 2).eq --
    (bytes-as-input 01-02-03-04-05-06-07-08-F5-F6).read 4 > i1
    i1.read 4 > i2
    i2.read 4 > i3
