+alias org.eolang.io.bytes-as-input
+alias org.eolang.io.malloc-as-output
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.io
+version 0.58.2
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:43

# Tee input is an input that reads from provided `input`,
# writes to provided `output` and behaves as provided `input`.
# To copy bytes input to memory you can do:
# ```
# malloc.of > copied
#   5
#   [m]
#     read. > @
#       tee-input
#         bytes-as-input 01-02-03-04-05
#         malloc-as-output m
#       5
# ```
# After dataization `copied` is equal to `01-02-03-04-05` which are read
# from memory.
[input output] > tee-input
  # Read `size` amount of bytes from `input`.
  # Returns new instance of `input-block` with set
  # `input` ready to be read, `output` ready to be written and bytes `buffer`.
  [size] > read
    (input-block input output --).read > @
      size

    # Tee-input block.
    #
    # Attention! The object is for internal usage only, please don't use the object
    # programmatically outside of `tee-input` object.
    #
    # Here `input` is an input ready to be read,
    # `output` is an output ready to be written,
    # `buffer` is a sequence of bytes that got from previous reading.
    [input output buffer] > input-block
      buffer > @

      # Read `size` amount of bytes from `input`.
      # Returns new instance of `input-block` with set
      # `input` ready to be read, `output` ready to be written and bytes `buffer`.
      [size] > read
        seq * > @
          written-bytes
          input-block
            read-bytes
            written-bytes
            read-bytes.as-bytes
        (input.read size).read.^ > read-bytes
        (output.write read-bytes).write.^ > written-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-bytes-and-writes-to-memory
    eq. > @
      malloc.of
        5
        [mem]
          read. > @
            tee-input
              bytes-as-input 01-02-03-04-05
              malloc-as-output mem
            5
      01-02-03-04-05

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-bytes-and-writes-to-memory-by-portions
    eq. > @
      malloc.of
        5
        [m]
          seq > @
            *
              tee-input
                bytes-as-input 01-02-03-04-05
                malloc-as-output m
              .read 2
              .read 2
              .read 1
              m
      01-02-03-04-05

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-from-bytes-and-writes-to-two-memory-blocks
    eq. > @
      malloc.of
        6
        [m1]
          malloc.of > @
            5
            [m2] >>
              seq > @
                *
                  read.
                    tee-input
                      tee-input
                        bytes-as-input 01-02-03-04-05
                        malloc-as-output m2
                      malloc-as-output m1
                    5
                  m1.write 5 2A-
                  m1
      01-02-03-04-05-2A
