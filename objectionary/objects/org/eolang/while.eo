+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.55.1
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# The `while` object is very similar to a loop with a pre-condition.
# Here's how you can use it:
# ```
# while > last
#   i.lt 5 > [i]
#   [i]
#     QQ.txt.sprintf > @
#       "Iteration %d\n"
#       * i
# ```
#
# Here the behaviour of `while` would identical to:
# ```
# seq > last
#   *
#     dataized "Iteration 1\n"
#     dataized "Iteration 2\n"
#     dataized "Iteration 3\n"
#     dataized "Iteration 4\n"
# ```
#
# Here only first three strings are dataized meanwhile the last one
# is returned and attached to `last` object.
# The example with `while` object would behave the same way.
[condition body] > while
  if. > @
    (condition 0).as-bool
    loop 0
    false

  # Recursive loop.
  #
  # Attention! The object is for internal usage only. Please don't use
  # the object programmatically outside of `while` object.
  [index] > loop
    body index > current
    if. > @
      (condition (index.plus 1)).as-bool
      seq *
        current
        loop (index.plus 1)
      current
