+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.58.3
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:44
+unlint redundant-object:46

# The object allows choosing the right options according to case conditions.
# Parameter `cases` is an array of two-dimensional arrays, which
# consist of condition bool value and expected value, if this
# condition is true. For example:
#
# ```
# switch
#   *
#     *
#       true
#       "this value will be returned"
#     *
#       false
#       "this value will be skipped"
# ```
#
# This object returns the value of the first true statement.
[cases] > switch
  if. > @
    cases.length.eq 0
    error "Switch cases are empty"
    if.
      true.eq found.match
      found.head
      true
  (rec-case cases).@ > found

  [tup] > rec-case
    if. > @
      and.
        tup.length.gt 1
        previous.match
      previous
      [] >>
        tup.head.tail.head > match!
        tup.head.head > head
    (rec-case tup.tail).@ > previous

  # Tests that switch returns the value from the first true condition case.
  [] +> tests-switch-simple-case
    eq. > @
      switch
        *
          *
            false
            "1"
          *
            true
            "2"
      "2"

  # Tests that switch works correctly with string comparison conditions.
  [] +> tests-switch-strings-case
    eq. > @
      switch
        *
          *
            password.eq "swordfish"
            "password is correct!"
          *
            password.eq ""
            "empty password is not allowed"
          *
            false
            "password is wrong"
      "password is correct!"
    "swordfish" > password

  # Tests that switch returns the value from the first true case when multiple cases are true.
  [] +> tests-switch-with-several-true-cases
    eq. > @
      switch
        *
          *
            true
            "TRUE1"
          *
            false
            "FALSE"
          *
            true
            "TRUE2"
      "TRUE1"

  # Tests that switch returns true when all cases are false.
  [] +> tests-switch-with-all-false-cases
    switch > @
      *
        *
          false
          "false1"
        *
          false
          "false2"

  # Tests that switch throws an error when given empty cases array.
  [] +> throws-on-empty-switch
    switch * > @

  # Tests that switch works correctly with complex nested conditions and custom objects.
  [] +> tests-switch-complex-case
    eq. > @
      switch
        *
          *
            [] >>
              c1 > @
            22.0
          *
            [] >>
              c2 > @
            0.0
          *
            [] >>
              c3 > @
            []
              "true case" > @
      "true case"
    [] > c1
      false > @
    [] > c2
      "1".eq "2" > @
    [] > c3
      true > @
