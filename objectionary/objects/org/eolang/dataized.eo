+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.56.2
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# The object dataizes `target`, makes new instance of `bytes` from given data and behaves as result
# `bytes`.
# The object is used as implementation of caching syntax (`!`).
# The next two lines of code behaves identically:
#
# ```
# some-object > cached!
# (dataized some-object).as-bytes > cached
# ```
#
# Dataization is a process of retrieving data (bytes) from an object, by taking its \Delta
# attribute.
# An example of usage:
#
# ```
# # Some 64+ characters comment should be here.
# [] > foo
#   [] > @
#     inner.five > @
#   [] > inner
#     5 > five
#
# (dataized foo).as-bytes > result # result is 00-00-00-00-00-00-00-05
# result.as-number > f             # f is 5
# ```
#
# Here, when `.as-bytes` is taken, the `dataized` dataizes (takes `bytes`) from the object `foo`
# and returns them. The `.as-bytes` is used to prevent double dataization.
[target] > dataized
  try > @
    target
    error ex > [ex]
    01-
