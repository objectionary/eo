+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.58.3
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# The object dataizes `target`, makes a new instance of `bytes` from given
# data and behaves as the result
# `bytes`.
# The object is used as implementation of caching syntax (`!`).
# The next two lines of code behave identically:
#
# ```
# some-object > cached!
# (dataized some-object).as-bytes > cached
# ```
#
# Dataization is a process of retrieving data (bytes) from an object
# by taking its \Delta attribute.
# An example of usage:
#
# ```
# # Example object with nested structure for dataization demonstration.
# [] > foo
#   [] > @
#     inner.five > @
#   [] > inner
#     5 > five
#
# (dataized foo).as-bytes > result # result is 00-00-00-00-00-00-00-05
# result.as-number > f             # f is 5
# ```
#
# Here, when `.as-bytes` is taken, the `dataized` dataizes (takes `bytes`)
# from the object `foo` and returns them.
# The `.as-bytes` is used to prevent double dataization.
[target] > dataized
  try > @
    target
    error ex > [ex]
    01-

  # Tests that dataized values are not recalculated on subsequent access.
  [] +> tests-dataized-does-not-do-recalculation
    eq. > @
      malloc.for
        0
        [m]
          seq > @
            *
              cached.as-number
              cached.as-bytes
              cached.as-bool
              m
          [] > func
            ^.m.put (^.m.as-number.plus 1) > @
          (dataized func).as-bytes > cached
      1

  # Tests that dataized bytes behave correctly when accessed with exclamation.
  [] +> tests-dataizes-as-bytes-behaves-as-exclamationed
    seq > @
      *
        cached1
        cached2
        cached1
        cached2
        and.
          cached1.eq cached2
          1.eq cached1
    [] > func
      malloc.for > @
        0
        [m]
          seq > @
            *
              true
              m.put (m.as-number.plus 1)
    (dataized func).as-bytes > cached1
    func > cached2!
