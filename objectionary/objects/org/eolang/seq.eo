+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.58.6
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# Sequential execution object that dataizes all provided steps in order
# and returns the value of the final step. All steps are dataized for
# their side effects, while only the last step's value is returned.
#
# Usage example:
# ```
# seq *             # Execute operations sequentially
#   operation1      # Executed for side effects
#   operation2      # Executed for side effects
#   final-value     # Executed and returned
# ```
[steps] > seq
  if. > @
    steps.length.eq 0
    true
    if.
      steps.length.eq 1
      steps.head
      loop steps
  steps.length.plus -1 > last-index!

  # Recursive steps dataization.
  #
  # Note: This object is intended for internal use only. Please
  # do not use this object programmatically outside of the `seq` object.
  [tup] > loop
    if. > @
      and.
        tup.length.gt 1
        loop tup.tail
      tup.head
      or.
        (dataized tup.head).as-bool.eq --
        tup.length.eq last-index

  # Tests that seq correctly processes steps and returns the last value when used with float comparison (less than).
  [] +> tests-seq-single-dataization-float-less
    malloc.of > @
      1
      [b]
        malloc.for > @
          0.0
          [m] >>
            b.put > @
              lt.
                seq
                  *
                    m.put (m.as-number.plus 1.0)
                    m.as-number
                1.1

  # Tests that seq correctly processes steps and returns the last value when used with float comparison (greater than).
  [] +> tests-seq-single-dataization-float-greater
    malloc.of > @
      1
      [b]
        malloc.for > @
          0.0
          [m] >>
            b.put > @
              gt.
                seq
                  *
                    m.put (m.as-number.plus 1.0)
                    m.as-number
                0.9

  # Tests that seq correctly processes steps and returns the last value when used with integer comparison (less than).
  [] +> tests-seq-single-dataization-int-less
    malloc.of > @
      1
      [b]
        malloc.for > @
          0
          [m] >>
            b.put > @
              lt.
                seq
                  *
                    m.put (m.as-number.plus 1)
                    m.as-number
                2

  # Tests that seq correctly processes steps and returns the last value when used with integer comparison (less than or equal).
  [] +> tests-seq-single-dataization-int-less-or-equal
    malloc.of > @
      1
      [b]
        malloc.for > @
          0
          [m] >>
            b.put > @
              lte.
                seq
                  *
                    m.put (m.as-number.plus 1)
                    m.as-number
                1

  # This test should have acceptable time to pass.
  [] +> tests-very-long-seq
    eq. > @
      true
      seq
        *
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true
          true

  # Tests that seq correctly handles multiple memory operations and returns the last value when used with equality comparison.
  [] +> tests-seq-single-dataization-int-equal-to-test
    malloc.of > @
      1
      [b]
        malloc.for > @
          0
          [m] >>
            b.put > @
              eq.
                seq
                  *
                    m.put 0
                    m.put (m.as-number.plus 1)
                    m.as-number
                1

  # Tests that seq handles memory caching correctly when accessing array elements and performing operations.
  [] +> tests-seq-single-dataization-int-equal-to-cache-problem-test
    malloc.of > @
      1
      [b]
        malloc.for > @
          0
          [m] >>
            b.put > @
              eq.
                seq
                  *
                    at.
                      * 0 1
                      m
                    m.put (m.as-number.plus 1)
                    m
                1

  # Tests that seq dataizes all steps except the last one and returns the last step's value.
  [] +> tests-seq-calculates-and-returns
    eq. > @
      1
      seq
        *
          0
          1

  # Tests that seq works correctly with object values (strings) as the final step.
  [] +> tests-seq-calculates-and-returns-object
    eq. > @
      "Hello!"
      seq
        *
          0
          "Hello!"
