+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.58.2
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:12

# The object is a TRUE boolean state.
[] > true
  01- > @
  false > not

  # Control structure that allows for conditional execution of code.
  # Since $ is TRUE - behaves as `left` object.
  left > [left right] > if

  # And.
  # A logical operation that returns true only if all given conditions are true.
  01-.eq x > [x] > and

  # Or.
  # A logical operation that returns true if at least one of the given conditions is true.
  ^ > [x] > or

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-two-bools
    eq. > @
      true
      true

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-true-as-bool
    true.as-bool > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-two-different-bool-types
    not. > @
      eq.
        true
        42

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-bool-to-bytes
    and. > @
      true.eq 01-
      false.eq 00-

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-bool-to-bytes-reverse
    and. > @
      01-.as-bytes.eq true
      00-.as-bytes.eq false

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-forks-on-true-condition
    eq. > @
      if.
        5.eq 5
        123
        42
      123
