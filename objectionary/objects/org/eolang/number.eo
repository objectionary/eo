+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.56.2
+rt node eo2js-runtime:0.0.0
+version 0.56.2
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# The `number` object is an abstraction of a 64-bit floating-point
# number that internally is a chain of eight bytes.
[as-bytes] > number
  as-bytes > @
  $ > as-number
  times -1 > neg
  as-i64.as-i32 > as-i32
  as-i32.as-i16 > as-i16
  as-bytes.eq nan.as-bytes > is-nan
  and. > is-integer
    is-finite
    eq floor
  and. > is-finite
    is-nan.not
    not.
      or.
        eq positive-infinity
        eq negative-infinity

  # Convert this `org.eolang.number` to `org.eolang.i64` object and return it.
  [] > as-i64 ?

  # Returns true if `$` = `x` in terms of bytes.
  # Here `x` can be a `number` or any other object which
  # can be converted to `bytes` via `as-bytes` object.
  # According to IEEE 754 float -0.0 and 0.0 are equal.
  [x] > eq
    if. > @
      or.
        is-nan
        (number x-as-bytes).is-nan
      false
      or.
        and.
          or.
            x-as-bytes.eq pos-zero-as-bytes
            x-as-bytes.eq neg-zero-as-bytes
          or.
            self-as-bytes.eq pos-zero-as-bytes
            self-as-bytes.eq neg-zero-as-bytes
        self-as-bytes.eq x-as-bytes
    x > x-as-bytes!
    as-bytes > self-as-bytes!
    0.as-bytes > pos-zero-as-bytes
    -0.as-bytes > neg-zero-as-bytes

  # Returns `true` if `$` < `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > lt
    0.gt > @
      minus
        number value
    x > value!

  # Returns `true` if `$` <= `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > lte
    or. > @
      lt value
      eq value
    x > value!

  # Returns `org.eolang.true` if `$` > `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > gt ?

  # Returns `true` if `$` > `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > gte
    or. > @
      gt value
      eq value
    x > value!

  # Multiplication of `$` and `x` as `org.eolang.number`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > times ?

  # Sum of `$` and `x` as `org.eolang.number`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > plus ?

  # Difference between `$` and `x`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > minus
    plus > @
      (number value).neg
    x > value!

  # Quotient of the division of `$` by `x` as `org.eolang.number`.
  # Here `x` can be a `number` or any other object which
  # can be converted to 8 `bytes` via `as-bytes` object.
  [x] > div ?

  # The object rounds down the original `number` to the nearest
  # whole `number` that is less than or equal to the original one
  # and returns the result as `org.eolang.number`.
  [] > floor ?
