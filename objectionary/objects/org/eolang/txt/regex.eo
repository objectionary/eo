+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.txt
+rt jvm org.eolang:eo-runtime:0.53.0
+rt node eo2js-runtime:0.0.0
+version 0.53.0
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint rt-without-atoms
+unlint empty-object
+unlint decorated-formation

# Regular expression in Perl format.
# Here `expression` is a string pattern.
# It starts and ends with slash (e.g. "/(your-expression)/"),
# Also it can be specified by the flag option,
# e.g.
# ```
# (`QQ.txt.regex "/(word)/i").compiled.matches "WORD"
# ```
# Supported flags:
# /d - Enables Unix lines mode.
# /i - Enables case-insensitive matching.
# /x - Permits whitespace and comments in pattern.
# /m - Enables multiline mode.
# /s - Enables dotall mode.
# /u - Enables Unicode-aware case folding.
[expression] > regex
  # Compile regular expression into pattern.
  # ```
  # (regex "/[a-z]+/").compiled.matches "hello"
  # (regex "/[a-z]+").matches "hello"
  # ```
  # The two lines of code above works the same, but the usage of `.compiled`
  # allows you utilize object cache in order to avoid double pattern compilation.
  # ```
  # regex "/[a-z]+/" > ptn1
  # ptn1.matches "hey"                  # compiles regex
  # ptn1.matches "hello"                # recompiles regex again
  #
  # (regex "/[a-z]+/").compiled > ptn2
  # ptn2.matches "hey"                  # compiles regex
  # ptn2.matches "hello"                # doesn't recompile regex
  # ```
  # Returns `org.eolang.txt.regex.pattern` object.
  [] > @ ?

  # Regular expression compiled into pattern.
  # Here `serialized` is `bytes` which represents serialized structure in memory
  # that is built after compilation.
  [serialized] > pattern
    $ > compiled

    # Returns `true` of given `txt` matches against
    # the provided regular expression pattern.
    (match txt).next.exists > [txt] > matches

    # Creates a `matcher` that will match the given input against the pattern.
    [txt] > match
      (matched-from-index 1 0).matched > next

      # Get `position`-th block matched from `start` position.
      # If string subsequence is found - returns `org.eolang.txt.regex.pattern.match.matched`
      # object, returns `org.eolang.txt.regex.pattern.match.not-matched` otherwise.
      #
      # Attention! The object is for internal usage only, please
      # don't use the object programmatically outside of `regex` object.
      [position start] > matched-from-index ?

      # Block matched the pattern.
      # Here:
      # - `position`      - sequence number of matched block,
      # - `start`         - matched region start index.
      #   If equals to -1 - block was not matched
      # - `from`          - index where matched string sequence starts
      # - `to`            - index where matched string sequence ends
      # - `groups`        - tuple of identified matched groups
      #
      # The block provides the next API to work with matched string subsequence:
      # - `groups-count`  - to get amount of matched groups
      # - `exists`        - to check if matched block is not empty
      # - `next`          - to get next matched block
      # - `text`          - to get matched subsequence as `string`
      # - `group {index}` - to get string subsequence captured by `index`-th group.
      [position start from to groups] > matched
        $ > matched
        groups.length > groups-count
        start.gte 0 > exists
        if. > next
          exists
          matched.
            matched-from-index
              position.plus 1
              to
          error "Matched block does not exist, can't get next"
        if. > text
          exists
          group 0
          error "Matched block does not exist, can't get text"

        # Returns the string subsequence captured by the group
        # by `index` during the `match` operation.
        groups.at index > [index] > group

      # Block which does not match the provided pattern.
      # Decorates `matched` block with corresponding `error`s.
      [position] > not-matched
        matched > @
          position
          -1
          error "Matched block does not exist, can't get 'from' position"
          error "Matched block does not exist, can't get 'to' position"
          error "Matched block does not exist, can't get groups"
