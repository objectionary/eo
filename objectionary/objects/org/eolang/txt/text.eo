+alias org.eolang.structs.bytes-as-array
+alias org.eolang.structs.list
+alias org.eolang.txt.regex
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.sscanf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.txt
+version 0.58.3
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:24
+unlint redundant-object:27
+unlint redundant-object:29
+unlint redundant-object:31
+unlint redundant-object:292

# Text.
# A sequence of characters representing words, sentences, or data.
[origin] > text
  origin > @
  # Check that all signs in string are numbers or letters.
  # Works only for english letters.
  (regex "/^[A-Za-z0-9]+$/").matches origin > is-alphanumeric
  # Check that all signs in string are letters.
  # Works only for english letters.
  (regex "/^[a-zA-Z]+$/").matches origin > is-alpha
  # Check that all signs in string are ASCII characters.
  (regex "/^[\\x00-\\x7F]*$/").matches origin > is-ascii
  # Returns `text` trimmed from both sides.
  if. > trimmed
    0.eq origin.as-bytes.size
    text origin
    trimmed-left.trimmed-right

  # Takes a piece of a `text` as another `text`.
  # Here `start` must be an integer index to start slicing from,
  # `len` must be an integer which shows how much symbols should be sliced.
  [start len] > slice
    text > @
      origin.slice start len

  # Returns `text` trimmed from left side.
  [] > trimmed-left
    if. > @
      0.eq len
      ^
      text
        string
          bts.slice
            idx
            (number len).minus idx
    origin > bts!
    bts.size > len!
    first-non-space-index 0 > idx!
    20- > space

    [index] > first-non-space-index
      if. > @
        len.eq index
        index
        if.
          char.eq space
          first-non-space-index (index.plus 1).as-number
          index
      bts.slice index 1 > char!

  # Returns `text` trimmed from right side.
  [] > trimmed-right
    if. > @
      0.eq len
      ^
      text
        string
          bts.slice
            0
            first-non-space-index
              (number len).plus -1
    origin > bts!
    bts.size > len!
    20- > space

    [index] > first-non-space-index
      if. > @
        -1.eq index
        0
        if.
          char.eq space
          first-non-space-index (index.plus -1).as-number
          index.plus 1
      bts.slice index 1 > char!

  # Joins `items`, which is a `tuple` of strings, using current `string`
  # as a delimiter.
  [items] > joined
    text > @
      string joined-bts
    origin > delimiter!
    if. > joined-bts!
      items.length.eq 0
      --
      with-delimiter items.head items.tail

    [acc tup] > with-delimiter
      if. > @
        tup.length.eq 0
        acc
        with-delimiter
          concat.
            concat.
              dataized tup.head
              delimiter
            acc
          tup.tail

  # Returns `text` repeated `times` times.
  # If `times` < 0, an error is returned.
  # If `times` == 0, empty text is returned.
  [times] > repeated
    if. > @
      0.gt amount
      error
        sprintf
          "Can't repeat text %d times"
          * amount
      text
        string repeated-bytes
    origin > bts!
    times > amount!
    if. > repeated-bytes!
      0.eq amount
      --
      rec-repeated bts 1

    [accum index] > rec-repeated
      if. > @
        amount.eq index
        accum
        rec-repeated
          accum.concat bts
          (index.plus 1).as-number

  # Checks if current `text` contains given `substring`.
  [substring] > contains
    and. > @
      (number origin-size).gte substring-size
      or.
        and.
          origin-size.eq substring-size
          origin-bts.eq substring-bts
        rec-contains 0
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!
    (number origin-size).minus substring-size > end!

    [idx] > rec-contains
      if. > @
        end.eq idx
        includes
        or.
          includes
          rec-contains (idx.plus 1).as-number
      eq. > includes
        origin-bts.slice idx substring-size
        substring-bts

  # Checks that current `text` ends with given `substring`.
  [substring] > ends-with
    and. > @
      (number substring-size).lte origin-size
      eq.
        origin-bts.slice
          (number origin-size).minus substring-size
          substring-size
        substring-bts
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!

  # Checks that current `text` starts with given `substring`.
  [substring] > starts-with
    and. > @
      (number substring-size).lte origin-size
      (origin-bts.slice 0 substring-size).eq substring-bts
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!

  # Returns index of `substring` in current `text`.
  # If no `substring` was found, it returns -1.
  [substring] > index-of
    if. > @
      or.
        or.
          (number substring-size).gt origin-size
          and.
            substring-size.eq origin-size
            (substring-bts.eq origin-bts).not
        found.eq -1
      -1
      length.
        string
          origin-bts.slice 0 found
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!
    (number origin-size).minus substring-size > end!
    rec-index-of 0 > found!

    [idx] > rec-index-of
      if. > @
        end.eq idx
        if.
          includes
          idx
          -1
        if.
          includes
          idx
          rec-index-of (idx.plus 1).as-number
      eq. > includes
        origin-bts.slice idx substring-size
        substring-bts

  # Returns last index of `substring` in current `text`.
  # If no element was found, it returns -1.
  [substring] > last-index-of
    if. > @
      or.
        or.
          (number substring-size).gt origin-size
          and.
            substring-size.eq origin-size
            (substring-bts.eq origin-bts).not
        found.eq -1
      -1
      length.
        string
          origin-bts.slice 0 found
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!
    rec-index-of > found!
      (number origin-size).minus substring-size

    [idx] > rec-index-of
      if. > @
        0.eq idx
        if.
          includes
          idx
          -1
        if.
          includes
          idx
          rec-index-of (idx.plus -1).as-number
      eq. > includes
        origin-bts.slice idx substring-size
        substring-bts

  # Returns the `text` in upper case.
  [] > up-cased
    text > @
      string
        reduced.
          list
            bytes-as-array
              origin.as-bytes
          --
          [accum byte] >>
            accum.concat > @
              if.
                and.
                  ascii-bte.lte ascii-z
                  ascii-bte.gte ascii-a
                slice.
                  as-bytes.
                    as-i64.
                      ascii-bte.minus distance
                  7
                  1
                byte
            ascii byte > ascii-bte
    ascii "z" > ascii-z!
    ascii "a" > ascii-a!
    minus. > distance
      number ascii-a
      ascii "A"

    [char] > ascii
      as-number. > @
        as-i64.
          concat.
            00-00-00-00-00-00-00
            char.as-bytes

  # Returns the `text` in lower case.
  [] > low-cased
    text > @
      string
        reduced.
          list
            bytes-as-array
              origin.as-bytes
          --
          [accum byte] >>
            accum.concat > @
              if.
                and.
                  ascii-bte.lte ascii-z
                  ascii-bte.gte ascii-a
                slice.
                  as-bytes.
                    as-i64.
                      ascii-bte.plus up-cased.distance
                  7
                  1
                byte
            up-cased.ascii byte > ascii-bte
    up-cased.ascii "Z" > ascii-z
    up-cased.ascii "A" > ascii-a

  # Retrieve symbol by given index as `text`.
  # If 0 > index >= ^.length - the error will be returned.
  [i] > at
    if. > @
      or.
        0.gt index
        (number index).gte len
      error
        sprintf
          "Given index %d is out of text bounds"
          * index
      slice index 1
    ^.length > len!
    i > idx!
    if. > index!
      0.gt idx
      (number len).plus idx
      idx

  # Returns `text` where all regex target changed to replacement.
  # Here `target` must be a `org.eolang.txt.regex` object.
  # The `replacement` here is a `string` that would be pasted instead of
  # matched text in original one.
  [target replacement] > replaced
    if. > @
      matched.exists.not
      QQ.txt.text reinit
      QQ.txt.text
        rec-replaced matched "" matched.start
    origin > self-as-bytes!
    string self-as-bytes > reinit
    (target.match reinit).next > matched

    [block accum start] > rec-replaced
      if. > @
        block.exists
        rec-replaced
          block.next
          concat.
            concat.
              accum
              reinit.slice
                start
                block.from.minus start
            replacement
          block.to
        string
          accum.concat
            reinit.slice
              start
              reinit.length.minus start

  # Returns the original `text` as `number`.
  [] > as-number
    if. > @
      scanned.length.eq 0
      error
        sprintf
          "Can't convert text %s to number"
          * origin
      scanned.head
    (sscanf "%f" origin).@ > scanned

  # Returns a `tuple` of `strings`, separated by a given `delimiter`.
  [delimiter] > split
    if. > @
      len.eq 0
      *
      rec-split * 0 0
    delimiter > delim!
    origin > self-as-bytes!
    self-as-bytes.size > len!

    [accum start current] > rec-split
      if. > @
        len.eq current
        accum.with > with-substr
          string
            self-as-bytes.slice
              start
              current.minus start
        if.
          delim.eq
            self-as-bytes.slice current 1
          rec-split
            with-substr
            (current.plus 1).as-number
            (current.plus 1).as-number
          rec-split
            accum
            start
            (current.plus 1).as-number

  # Returns a `tuple` of `strings` split by `delimiter` with a maximum of `limit` parts.
  # The last element contains the remainder of the string after splitting.
  # If `limit` < 1, an error is returned.
  [delimiter limit] > nsplit
    if. > @
      1.gt limit
      error
        sprintf
          "Invalid limit %d for nsplit, must be at least 1"
          * limit
      if.
        origin.size.eq 0
        *
        if.
          1.eq limit
          * origin
          rec-nsplit * 0 0 0

    [accum start current splits-made] > rec-nsplit
      if. > @
        origin.size.eq current
        accum.with > with-substr
          string
            origin.slice
              start
              current.minus start
        if.
          and.
            delimiter.eq
              origin.slice current 1
            (number splits-made).lt
              (number limit).minus 1
          rec-nsplit
            with-substr
            (current.plus 1).as-number
            (current.plus 1).as-number
            (splits-made.plus 1).as-number
          rec-nsplit
            accum
            start
            (current.plus 1).as-number
            splits-made

  # Returns concatenation of all `other` strings.
  # Here `others` must be a `tuple` of `strings`.
  [others] > chained
    if. > @
      0.eq others.length
      ^
      text
        string
          reduced.
            list others
            origin.as-bytes
            accum.concat str.as-bytes > [accum str]

  # Tests specific functionality slice method extracts a substring from specified position with given length.
  [] +> tests-text-slices-the-origin-string
    eq. > @
      (text "Hello, world!").slice 7 5
      "world"

  # Tests specific functionality trimmed-left returns empty string when applied to empty text.
  [] +> tests-trimmed-left-empty-text
    eq. > @
      (text "").trimmed-left
      ""

  # Tests specific functionality trimmed-left removes single leading space from text.
  [] +> tests-text-trimmed-left-one-space
    eq. > @
      (text " s").trimmed-left
      "s"

  # Tests specific functionality trimmed-left removes multiple leading spaces from text.
  [] +> tests-text-trimmed-left-many-spaces
    eq. > @
      (text "     some").trimmed-left
      "some"

  # Tests specific functionality trimmed-left returns empty string when text contains only spaces.
  [] +> tests-text-trimmed-left-only-spaces
    eq. > @
      (text "     ").trimmed-left
      ""

  # Tests specific functionality trimmed-right returns empty string when applied to empty text.
  [] +> tests-trimmed-right-empty-text
    eq. > @
      (text "").trimmed-right
      ""

  # Tests specific functionality trimmed-right removes single trailing space from text.
  [] +> tests-text-trimmed-right-one-space
    eq. > @
      (text "s ").trimmed-right
      "s"

  # Tests specific functionality trimmed-right removes multiple trailing spaces from text.
  [] +> tests-text-trimmed-right-many-spaces
    eq. > @
      (text "some     ").trimmed-right
      "some"

  # Tests specific functionality trimmed-right returns empty string when text contains only spaces.
  [] +> tests-text-trimmed-right-only-spaces
    eq. > @
      (text "     ").trimmed-right
      ""

  # Tests specific functionality trimmed removes single leading space from text.
  [] +> tests-text-trimmed-one-space-left
    eq. > @
      (text " some").trimmed
      "some"

  # Tests specific functionality trimmed removes single trailing space from text.
  [] +> tests-text-trimmed-one-space-right
    eq. > @
      (text "some ").trimmed
      "some"

  # Tests specific functionality trimmed removes spaces from both sides of text.
  [] +> tests-text-trimmed-one-space-both
    eq. > @
      (text " some ").trimmed
      "some"

  # Tests specific functionality trimmed removes multiple spaces from both sides of text.
  [] +> tests-text-trimmed-many-spaces
    eq. > @
      (text "    some     ").trimmed
      "some"

  # Tests specific functionality trimmed returns empty string when applied to empty text.
  [] +> tests-text-trimmed-empty
    eq. > @
      (text "").trimmed
      ""

  # Tests specific functionality trimmed returns empty string when text contains only spaces.
  [] +> tests-text-trimmed-only-spaces
    eq. > @
      (text "        ").trimmed
      ""

  # Tests specific functionality at method returns first character at index 0.
  [] +> tests-returns-first-char
    eq. > @
      "s"
      (text "some").at 0

  # Tests specific functionality at method returns character at specified index.
  [] +> tests-returns-third-char
    eq. > @
      "m"
      (text "some").at 2

  # Tests specific functionality at method supports negative indexing from end of text.
  [] +> tests-returns-char-at-negative-index
    eq. > @
      "m"
      (text "some").at -2

  # Tests specific functionality at method throws error when index exceeds text length.
  [] +> throws-on-text-at-index-more-than-length
    (text "some").at 10 > @

  # Tests specific functionality chained method concatenates text with multiple other strings.
  [] +> tests-chains-with-other-strings
    eq. > @
      "Hello, world!"
      chained.
        text "Hello"
        *
          ", "
          "world"
          "!"

  # Tests specific functionality chained method returns original text when no strings provided.
  [] +> tests-returns-same-text-on-chaining-with-no-strings
    eq. > @
      "Some"
      chained.
        text "Some"
        *

  # Tests specific functionality joined method returns empty string when joining empty tuple.
  [] +> tests-joined-no-strings
    eq. > @
      ""
      (text "-").joined *

  # Tests specific functionality joined method returns single string when joining one element.
  [] +> tests-joined-one-string
    eq. > @
      "some"
      (text "-").joined
        * "some"

  # Tests specific functionality joined method joins multiple strings with delimiter.
  [] +> tests-joined-many-strings
    eq. > @
      "hello-world-dear-friend"
      (text "-").joined
        * "hello" "world" "dear" "friend"

  # Tests specific functionality repeated method throws error when times is negative.
  [] +> throws-on-text-repeating-less-than-zero-times
    (text "").repeated -1 > @

  # Tests specific functionality repeated method returns empty string when times is zero.
  [] +> tests-text-repeated-zero-times-is-empty
    eq. > @
      ""
      (text "some").repeated 0

  # Tests specific functionality repeated method repeats text specified number of times.
  [] +> tests-text-repeated-five-times
    eq. > @
      "heyheyheyheyhey"
      (text "hey").repeated 5

  # Tests specific functionality index-of returns -1 for non-existent substring longer than text.
  [] +> tests-index-of-non-existed-substring-with-more-length
    eq. > @
      -1
      (text "Hello").index-of "Somebody"

  # Tests specific functionality index-of returns -1 for non-existent substring of same length.
  [] +> tests-index-of-non-existed-substring-with-same-length
    eq. > @
      -1
      (text "Hello").index-of "world"

  # Tests specific functionality index-of returns -1 for non-existent substring in UTF text.
  [] +> tests-index-of-non-existed-substring-with-utf
    eq. > @
      -1
      index-of.
        text "привет, друг!"
        "x"

  # Tests specific functionality index-of finds correct position of UTF character in text.
  [] +> tests-index-of-existed-substring-with-utf
    eq. > @
      3
      index-of.
        text "привет, друг!"
        "в"

  # Tests specific functionality index-of returns correct position of newline character.
  [] +> tests-returns-valid-index-of-substring
    eq. > @
      6
      index-of.
        text "Hello \n world"
        "\n"

  # Tests specific functionality index-of finds substring located at end of text.
  [] +> tests-returns-valid-index-of-substring-in-the-end
    eq. > @
      6
      (text "Hello world").index-of "world"

  # Tests specific functionality starts-with returns true when text begins with given substring.
  [] +> tests-starts-with-substring
    (text "Hello, world").starts-with "Hello" > @

  # Tests specific functionality starts-with returns false when text does not begin with substring.
  [] +> tests-does-not-start-with-substring
    not. > @
      (text "Hello, world").starts-with "world"

  # Tests specific functionality ends-with returns true when text ends with given substring.
  [] +> tests-ends-with-substring
    (text "Hello world!").ends-with "world!" > @

  # Tests specific functionality ends-with returns false when text does not end with substring.
  [] +> tests-does-not-end-with-substring
    not. > @
      (text "Hello world!").ends-with "Hello"

  # Tests specific functionality contains returns true when text includes given substring.
  [] +> tests-text-contains-substring
    (text "Hello, world!").contains "o, wo" > @

  # Tests specific functionality contains returns false when text does not include substring.
  [] +> tests-text-does-not-contain-substring
    not. > @
      (text "Hello, world!").contains "Hey"

  # Tests specific functionality last-index-of finds last occurrence of repeated substring.
  [] +> tests-finds-last-index-of-substring
    eq. > @
      5
      (text "Hey, Hey, Hey").last-index-of "Hey,"

  # Tests specific functionality last-index-of returns 0 when substring equals entire text.
  [] +> tests-finds-last-index-of-the-same-string
    eq. > @
      0
      (text "Hello").last-index-of "Hello"

  # Tests specific functionality last-index-of returns -1 for non-existent substring.
  [] +> tests-last-index-of-non-existed-substring
    eq. > @
      -1
      (text "Hello, world").last-index-of "somebody"

  # Tests specific functionality last-index-of returns -1 for non-existent substring in UTF text.
  [] +> tests-last-index-of-non-existed-substring-with-utf
    eq. > @
      -1
      last-index-of.
        text "привет, друг!"
        "x"

  # Tests that last-index-of finds correct position of UTF character in text.
  [] +> tests-last-index-of-existed-substring-with-utf
    eq. > @
      3
      last-index-of.
        text "привет, друг!"
        "в"

  # Tests that split method divides text into parts using dash delimiter.
  [] +> tests-splits-text-by-dash
    eq. > @
      list
        (text "a-b-c").split "-"
      * "a" "b" "c"

  # Tests that split method handles empty strings between delimiters.
  [] +> tests-splits-text-with-empty-strings
    eq. > @
      list
        (text "-a-b-").split "-"
      * "" "a" "b" ""

  # Tests that up-cased converts lowercase text to uppercase.
  [] +> tests-converts-text-to-upper-case
    eq. > @
      "HELLO"
      (text "hello").up-cased

  # Tests that split returns proper string objects with correct length.
  [] +> tests-splits-and-returns-strings
    eq. > @
      length.
        at.
          split.
            text "hello world!"
            " "
          1
      6

  # Tests that nsplit splits with limit 2 correctly.
  [] +> tests-nsplit-with-limit-two
    eq. > @
      list
        nsplit.
          text "Cookie: a=1; b=2"
          " "
          2
      * "Cookie:" "a=1; b=2"

  # Tests that nsplit splits with limit 2 on dashes.
  [] +> tests-nsplit-with-dashes-limit-two
    eq. > @
      list
        nsplit.
          text "a-b-c-d"
          "-"
          2
      * "a" "b-c-d"

  # Tests that nsplit with limit 1 returns entire string.
  [] +> tests-nsplit-with-limit-one
    eq. > @
      list
        nsplit.
          text "a-b-c"
          "-"
          1
      * "a-b-c"

  # Tests that nsplit with limit greater than splits behaves like split.
  [] +> tests-nsplit-with-high-limit
    eq. > @
      list
        nsplit.
          text "a-b-c"
          "-"
          10
      * "a" "b" "c"

  # Tests that nsplit throws error with limit 0.
  [] +> throws-on-nsplit-with-limit-zero
    nsplit. > @
      text "text"
      "-"
      0

  # Tests that nsplit throws error with negative limit.
  [] +> throws-on-nsplit-with-negative-limit
    nsplit. > @
      text "text"
      "-"
      -1

  # Tests that nsplit handles empty strings between delimiters.
  [] +> tests-nsplit-with-empty-strings
    eq. > @
      list
        nsplit.
          text "-a-b-c"
          "-"
          3
      * "" "a" "b-c"

  # Tests that up-cased converts mixed case text to uppercase.
  [] +> tests-converts-text-with-upper-letters-to-upper-case
    eq. > @
      "HELLO"
      (text "HeLlO").up-cased

  # Tests that low-cased converts uppercase text to lowercase.
  [] +> tests-converts-text-to-lower-case
    eq. > @
      "hello"
      (text "HELLO").low-cased

  # Tests that low-cased converts mixed case text to lowercase.
  [] +> tests-converts-text-with-low-letters-to-lower-case
    eq. > @
      "hello"
      (text "HeLlO").low-cased

  # Tests that as-number converts numeric string to number.
  [] +> tests-converts-text-to-number
    eq. > @
      5
      (text "5").as-number

  # Tests that as-number throws error when text is not numeric.
  [] +> throws-on-converting-text-to-number
    (text "Hello").as-number > @

  # Tests that as-number converts floating point string to number.
  [] +> tests-converts-float-text-to-number
    eq. > @
      3.14
      (text "3.14").as-number

  # Tests that is-ascii returns true for text containing only ASCII characters.
  [] +> tests-checks-if-text-is-ascii
    is-ascii. > @
      text
        "H311oW"

  # Tests that is-ascii returns false for text containing emoji characters.
  [] +> tests-checks-if-emoji-is-not-ascii
    not. > @
      is-ascii.
        text
          "🌵"

  # Tests that is-ascii returns true for text containing only numeric digits.
  [] +> tests-checks-if-string-of-numbers-is-ascii
    is-ascii. > @
      text
        "123"

  # Tests that is-alphanumeric returns true for text containing only letters.
  [] +> tests-checks-if-simple-text-is-alphanumeric
    is-alphanumeric. > @
      text
        "eEo"

  # Tests that is-alphanumeric returns true for text with letters and numbers.
  [] +> tests-checks-if-text-with-number-is-alphanumeric
    is-alphanumeric. > @
      text
        "ab3d"

  # Tests that is-alphanumeric returns false for text containing special characters.
  [] +> tests-checks-if-text-with-dashes-is-not-alphanumeric
    not. > @
      is-alphanumeric.
        text
          "-w-"

  # Tests specific functionality is-alpha returns true for text containing only letters.
  [] +> tests-checks-if-simple-text-is-alpha
    is-alpha. > @
      text
        "eEo"

  # Tests that is-alpha returns false for text containing numbers.
  [] +> tests-checks-if-text-with-number-is-not-alpha
    not. > @
      is-alpha.
        text
          "ab3d"

  # Tests that is-alpha returns false for text containing special characters.
  [] +> tests-checks-if-text-with-dashes-is-not-alpha
    not. > @
      is-alpha.
        text
          "-w-"

  # Tests that replaced returns original text when regex pattern not found.
  [] +> tests-does-not-replaces-if-regex-not-found
    text
      "Hello, world"
    .replaced
      regex
        "/[0-9]+/"
      "12345"
    .eq > @
      "Hello, world"

  # Tests that replaced substitutes digit characters with replacement string.
  [] +> tests-replaces-digits-with-string
    text
      "Hell0, w0rld"
    .replaced
      regex
        "/[0-9]+/"
      "o"
    .eq > @
      "Hello, world"

  # Tests that replaced converts forward slashes to backslashes in path.
  [] +> tests-replaces-slashes-to-windows-separator
    text
      "C:\\Windows/foo\\bar/hello.txt"
    .replaced
      regex
        "/\\//"
      "\\"
    .eq > @
      "C:\\Windows\\foo\\bar\\hello.txt"

  # Tests that replaced converts Windows path separators to forward slashes.
  [] +> tests-replaces-windows-path-with-slash
    text
      "C:\\Windows\\Users\\AppLocal\\shrek"
    .replaced
      regex
        "/[\\\\:]+/"
      "/"
    .eq > @
      "C/Windows/Users/AppLocal/shrek"

  # Tests that replaced removes invalid filename characters from path.
  [] +> tests-sanitizes-windows-path-with-regex
    text
      "foo\\bar<:>?*\"|baz\\asdf"
    .replaced
      regex
        "/[<>:\\\"\\/\\|\\?\\*\\x00-\\x1F]/"
      ""
    .eq > @
      "foo\\barbaz\\asdf"
