+alias org.eolang.structs.bytes-as-array
+alias org.eolang.structs.list
+alias org.eolang.txt.regex
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.sscanf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.txt
+version 0.56.0
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# Text.
# A sequence of characters representing words, sentences, or data.
[origin] > text
  origin > @
  # Check that all signs in string are numbers or letters.
  # Works only for english letters.
  (regex "/^[A-Za-z0-9]+$/").matches origin > is-alphanumeric
  # Check that all signs in string are letters.
  # Works only for english letters.
  (regex "/^[a-zA-Z]+$/").matches origin > is-alpha
  # Check that all signs in string are ASCII characters.
  (regex "/^[\\x00-\\x7F]*$/").matches origin > is-ascii
  # Returns `text` trimmed from both sides.
  if. > trimmed
    0.eq origin.as-bytes.size
    $
    trimmed-left.trimmed-right

  # Takes a piece of a `text` as another `text`.
  # Here `start` must be an integer index to start slicing from,
  # `len` must be an integer which shows how much symbols should be sliced.
  [start len] > slice
    text > @
      origin.slice start len

  # Returns `text` trimmed from left side.
  [] > trimmed-left
    if. > @
      0.eq len
      ^
      text
        string
          bts.slice
            idx
            (number len).minus idx
    origin > bts!
    bts.size > len!
    first-non-space-index 0 > idx!
    20- > space

    [index] > first-non-space-index
      if. > @
        len.eq index
        index
        if.
          char.eq space
          first-non-space-index (index.plus 1).as-number
          index
      bts.slice index 1 > char!

  # Returns `text` trimmed from right side.
  [] > trimmed-right
    if. > @
      0.eq len
      ^
      text
        string
          bts.slice
            0
            first-non-space-index
              (number len).plus -1
    origin > bts!
    bts.size > len!
    20- > space

    [index] > first-non-space-index
      if. > @
        -1.eq index
        0
        if.
          char.eq space
          first-non-space-index (index.plus -1).as-number
          index.plus 1
      bts.slice index 1 > char!

  # Joins `items`, which is a `tuple` of strings, using current `string`
  # as a delimiter.
  [items] > joined
    text > @
      string joined-bts
    origin > delimiter!
    if. > joined-bts!
      items.length.eq 0
      --
      with-delimiter items.value items.prev

    [acc tup] > with-delimiter
      if. > @
        tup.length.eq 0
        acc
        with-delimiter
          concat.
            concat.
              dataized tup.value
              delimiter
            acc
          tup.prev

  # Returns `text` repeated `times` times.
  # If `times` < 0 - an error is returned.
  # If `times` == 0 - an original text is returned.
  [times] > repeated
    if. > @
      0.gt amount
      error
        sprintf
          "Can't repeat text %d times"
          * amount
      text
        string repeated-bytes
    origin > bts!
    times > amount!
    if. > repeated-bytes!
      0.eq amount
      --
      rec-repeated bts 1

    [accum index] > rec-repeated
      if. > @
        amount.eq index
        accum
        rec-repeated
          accum.concat bts
          (index.plus 1).as-number

  # Checks if current `text` contains given `substring`.
  [substring] > contains
    and. > @
      (number origin-size).gte substring-size
      or.
        and.
          origin-size.eq substring-size
          origin-bts.eq substring-bts
        rec-contains 0
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!
    (number origin-size).minus substring-size > end!

    [idx] > rec-contains
      if. > @
        end.eq idx
        includes
        or.
          includes
          rec-contains (idx.plus 1).as-number
      eq. > includes
        origin-bts.slice idx substring-size
        substring-bts

  # Checks that current `text` ends with given `substring`.
  [substring] > ends-with
    and. > @
      (number substring-size).lte origin-size
      eq.
        origin-bts.slice
          (number origin-size).minus substring-size
          substring-size
        substring-bts
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!

  # Checks that current `text` starts with given `substring`.
  [substring] > starts-with
    and. > @
      (number substring-size).lte origin-size
      (origin-bts.slice 0 substring-size).eq substring-bts
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!

  # Returns index of `substring` in current `text`.
  # If no `substring` was found, it returns -1.
  [substring] > index-of
    if. > @
      or.
        or.
          (number substring-size).gt origin-size
          and.
            substring-size.eq origin-size
            (substring-bts.eq origin-bts).not
        found.eq -1
      -1
      length.
        string
          origin-bts.slice 0 found
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!
    (number origin-size).minus substring-size > end!
    rec-index-of 0 > found!

    [idx] > rec-index-of
      if. > @
        end.eq idx
        if.
          includes
          idx
          -1
        if.
          includes
          idx
          rec-index-of (idx.plus 1).as-number
      eq. > includes
        origin-bts.slice idx substring-size
        substring-bts

  # Returns last index of `substring` in current `text`.
  # If no element was found, it returns -1.
  [substring] > last-index-of
    if. > @
      or.
        or.
          (number substring-size).gt origin-size
          and.
            substring-size.eq origin-size
            (substring-bts.eq origin-bts).not
        found.eq -1
      -1
      length.
        string
          origin-bts.slice 0 found
    origin > origin-bts!
    substring > substring-bts!
    origin-bts.size > origin-size!
    substring-bts.size > substring-size!
    rec-index-of > found!
      (number origin-size).minus substring-size

    [idx] > rec-index-of
      if. > @
        0.eq idx
        if.
          includes
          idx
          -1
        if.
          includes
          idx
          rec-index-of (idx.plus -1).as-number
      eq. > includes
        origin-bts.slice idx substring-size
        substring-bts

  # Returns the `text` in upper case.
  [] > up-cased
    text > @
      string
        reduced.
          list
            bytes-as-array
              origin.as-bytes
          --
          [accum byte] >>
            accum.concat > @
              if.
                and.
                  ascii-bte.lte ascii-z
                  ascii-bte.gte ascii-a
                slice.
                  as-bytes.
                    as-i64.
                      ascii-bte.minus distance
                  7
                  1
                byte
            ascii byte > ascii-bte
    ascii "z" > ascii-z!
    ascii "a" > ascii-a!
    minus. > distance
      number ascii-a
      ascii "A"

    [char] > ascii
      as-number. > @
        as-i64.
          concat.
            00-00-00-00-00-00-00
            char.as-bytes

  # Returns the `text` in lower case.
  [] > low-cased
    text > @
      string
        reduced.
          list
            bytes-as-array
              origin.as-bytes
          --
          [accum byte] >>
            accum.concat > @
              if.
                and.
                  ascii-bte.lte ascii-z
                  ascii-bte.gte ascii-a
                slice.
                  as-bytes.
                    as-i64.
                      ascii-bte.plus up-cased.distance
                  7
                  1
                byte
            up-cased.ascii byte > ascii-bte
    up-cased.ascii "Z" > ascii-z
    up-cased.ascii "A" > ascii-a

  # Retrieve symbol by given index as `text`.
  # If 0 > index >= ^.length - the error will be returned.
  [i] > at
    if. > @
      or.
        0.gt index
        (number index).gte len
      error
        sprintf
          "Given index %d is out of text bounds"
          * index
      slice index 1
    ^.length > len!
    i > idx!
    if. > index!
      0.gt idx
      (number len).plus idx
      idx

  # Returns `text` where all regex target changed to replacement.
  # Here `target` must be a `org.eolang.txt.regex` object.
  # The `replacement` here is a `string` that would be pasted instead of
  # matched text in original one.
  [target replacement] > replaced
    if. > @
      matched.exists.not
      QQ.txt.text reinit
      QQ.txt.text
        rec-replaced matched "" matched.start
    origin > self-as-bytes!
    string self-as-bytes > reinit
    (target.match reinit).next > matched

    [block accum start] > rec-replaced
      if. > @
        block.exists
        rec-replaced
          block.next
          concat.
            concat.
              accum
              reinit.slice
                start
                block.from.minus start
            replacement
          block.to
        string
          accum.concat
            reinit.slice
              start
              reinit.length.minus start

  # Returns the original `text` as `number`.
  [] > as-number
    if. > @
      scanned.length.eq 0
      error
        sprintf
          "Can't convert text %s to number"
          * origin
      scanned.value
    (sscanf "%f" origin).as-tuple > scanned

  # Returns a `tuple` of `strings`, separated by a given `delimiter`.
  [delimiter] > split
    if. > @
      len.eq 0
      *
      rec-split * 0 0
    delimiter > delim!
    origin > self-as-bytes!
    self-as-bytes.size > len!

    [accum start current] > rec-split
      if. > @
        len.eq current
        accum.with > with-substr
          string
            self-as-bytes.slice
              start
              current.minus start
        if.
          delim.eq
            self-as-bytes.slice current 1
          rec-split
            with-substr
            (current.plus 1).as-number
            (current.plus 1).as-number
          rec-split
            accum
            start
            (current.plus 1).as-number

  # Returns concatenation of all `other` strings.
  # Here `others` must be a `tuple` of `strings`.
  [others] > chained
    if. > @
      0.eq others.length
      ^
      text
        string
          reduced.
            list others
            origin.as-bytes
            accum.concat str.as-bytes > [accum str]
