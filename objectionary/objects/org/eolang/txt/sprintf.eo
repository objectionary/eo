+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.txt
+rt jvm org.eolang:eo-runtime:0.58.6
+rt node eo2js-runtime:0.0.0
+version 0.58.6
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint wrong-sprintf-arguments:58
+unlint wrong-sprintf-arguments:66
+unlint sprintf-without-formatters:72

# The `sprintf` object allows you to format and output text depending
# on the arguments passed to it and return it as `org.eolang.string`.
#
# When arguments are processed - they're dataized and converted to objects
# depending on next flags:
# - %s - converts object to `string`
# - %d - converts object to `int`
# - %f - converts object to `float`
# - %x - converts object to `bytes`
# - %b - converts object to boolean, `true` or `false`.
[format args] > sprintf ?
  # Tests that sprintf formats string with single %s placeholder.
  [] +> tests-prints-simple-string
    eq. > @
      "Hello, Jeffrey!"
      sprintf
        "Hello, %s!"
        * "Jeffrey"

  # Tests that sprintf formats string with multiple placeholders including UTF characters.
  [] +> tests-prints-complex-string
    eq. > @
      "Привет 3.140000 Jeff X!"
      sprintf
        "Привет %f %s %s!"
        * 3.14 "Jeff" "X"

  # Tests that sprintf formats bytes using %x placeholder as hexadecimal.
  [] +> tests-prints-bytes-string
    eq. > @
      "40-45-00-00-00-00-00-00"
      sprintf
        "%x"
        * 42.as-bytes

  # Tests that sprintf formats all supported data types in single string.
  [] +> tests-formats-all-objects
    eq. > @
      "string Jeff, bytes 4A-65-66-66, float 42.300000, int 14, bool false"
      sprintf
        "string %s, bytes %x, float %f, int %d, bool %b"
        * "Jeff" "Jeff".as-bytes 42.3 14 false

  # Tests that sprintf throws error when placeholders exceed provided arguments.
  [] +> throws-on-sprintf-with-arguments-that-does-not-match
    sprintf > @
      "%s%s"
      * "Jeff"

  # Tests that sprintf ignores extra arguments beyond placeholders.
  [] +> tests-sprintf-does-not-fail-if-arguments-more-than-formats
    eq. > @
      "Hey"
      sprintf
        "%s"
        * "Hey" "Jeff"

  # Tests that sprintf throws error for unsupported format specifiers.
  [] +> throws-on-sprintf-unsupported-format
    sprintf "%o" * > @

  # Tests that sprintf handles escaped percent signs in format string.
  [] +> tests-sprintf-prints-percents
    eq. > @
      "%Jeff"
      sprintf
        "%%%s"
        * "Jeff"

  # Tests that sprintf does not directly format i64 values as numbers.
  [] +> tests-sprintf-does-not-print-i64
    not. > @
      eq.
        sprintf
          "%d"
          * 42.as-i64
        "42"

  # Tests that sprintf formats i64 values when converted to number.
  [] +> tests-sprintf-prints-i64-as-number
    eq. > @
      "42"
      sprintf
        "%d"
        * 42.as-i64.as-number

  # Tests that sprintf supports numbered parameter references.
  [] +> formats-numbered-substitution
    eq. > @
      "Hello, Jeff! Bye, Jeff!"
      sprintf
        "Hello, %s! Bye, %1$s!"
        * "Jeff"

  # Tests that sprintf handles mixed numbered and sequential parameters.
  [] +> formats-numbered-substitution-with-multiple-args
    eq. > @
      "This is the first; This is the first as well; The second; and the 3"
      sprintf
        "This is the %s; This is the %1$s as well; The %s; and the %d"
        * "first" "second" 3

  # Tests that sprintf formats with reordered numbered parameter references.
  [] +> formats-with-ordered-numbered-substitutions
    eq. > @
      "first second second is after first"
      sprintf
        "%s %s %2$s is after %1$s"
        * "first" "second"
