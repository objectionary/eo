+alias org.eolang.structs.list
+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.txt
+rt jvm org.eolang:eo-runtime:0.58.8
+rt node eo2js-runtime:0.0.0
+version 0.58.8
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# Reads formatted input from a string.
# This object has two free attributes:
# 1. `format` - is a formatter string (e.g. "Hello, %s!")
# 2. `read` - is a string where data exists (e.g. "Hello, John!")
# returns a `org.eolang.tuple` of formatted values (e.g. * "John").
# Supported formatters are:
# - %d - parse as integer and convert to `number`
# - %f - parse as float and convert to `number`
# - %s - parse as string and convert to `string`.
[format read] > sscanf ?
  # Tests that sscanf parses string using %s format specifier.
  [] +> tests-sscanf-with-string
    eq. > @
      "hello"
      head.
        sscanf "%s" "hello"

  # Tests that sscanf parses integer using %d format specifier.
  [] +> tests-sscanf-with-int
    eq. > @
      33
      head.
        sscanf "%d" "33"

  # Tests that sscanf parses floating point number using %f format specifier.
  [] +> tests-sscanf-with-float
    eq. > @
      0.24
      head.
        sscanf "%f" "0.24"

  # Tests that sscanf throws error for unsupported format specifier.
  [] +> throws-on-sscanf-with-wrong-format
    sscanf "%l" "error" > @

  # Tests that sscanf parses multiple values with different format specifiers.
  [] +> tests-sscanf-with-string-int-float
    eq. > @
      list
        sscanf
          "%s %d %f"
          "hello 33 0.24"
      * "hello" 33 0.24

  # Tests that sscanf parses string with literal text after format specifier.
  [] +> tests-sscanf-with-string-with-ending
    eq. > @
      "hello"
      head.
        sscanf "%s!" "hello!"

  # Tests that sscanf parses string surrounded by literal text.
  [] +> tests-sscanf-with-complex-string
    eq. > @
      "test"
      head.
        sscanf "some%sstring" "someteststring"

  # Tests that sscanf parses integer surrounded by literal text.
  [] +> tests-sscanf-with-complex-int
    eq. > @
      734987259
      head.
        sscanf "!%d!" "!734987259!"

  # Tests that sscanf parses floating point number surrounded by literal text.
  [] +> tests-sscanf-with-complex-float
    eq. > @
      1991.01
      head.
        sscanf "this will be=%f" "this will be=1991.01"

  # Tests that sscanf can parse text generated by sprintf.
  [] +> tests-sscanf-with-sprintf
    eq. > @
      list
        sscanf
          "%s is about %d?"
          sprintf
            "%s is about %d?"
            * "This" 8
      * "This" 8

  # Tests that sscanf parses complex string with multiple data types and literal text.
  [] +> tests-sscanf-complex-case
    eq. > @
      list
        sscanf
          "Im%d %s old and this is! Let's calculate %f + %f= %f"
          "Im18 years old and this is! Let's calculate 99999999.99 + 0.01= 100000000.0"
      *
        18
        "years"
        99999999.99
        0.01
        100000000.0
