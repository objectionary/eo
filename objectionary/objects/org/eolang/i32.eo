+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.57.2
+rt node eo2js-runtime:0.0.0
+version 0.57.2
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:18
+unlint redundant-object:19
+unlint redundant-object:20

# The 32 bits signed integer.
# Here `as-bytes` must be a `bytes` object.
[as-bytes] > i32
  as-bytes > @
  $ > as-i32
  times -1.as-i64.as-i32 > neg
  as-i64.as-number > as-number

  # Convert this `org.eolang.i32` to `org.eolang.i64` and return it.
  # The object is an atom because it's not possible to check what
  # bytes should be added from left so the number is valid.
  # The different bytes should be added if number is positive and negative.
  [] > as-i64 ?

  # Convert this `org.eolang.i32` to `org.eolang.i16`.
  # The `org.eolang.error` is returned if the `org.eolang.i32` number is more than
  # max `org.eolang.i16` value `32767`.
  [] > as-i16
    if. > @
      or.
        left.eq 00-00
        left.eq FF-FF
      i16 (as-bytes.slice 2 2)
      error
        sprintf
          "Can't convert i32 number %d to i16 because it's out of i16 bounds"
          * as-i64.as-number
    (as-bytes.slice 0 2).as-bytes > left

  # Returns `org.eolang.true` if `$` < `x`.
  # Here `x` must be an `org.eolang.i32` object.
  as-i64.lt x.as-i32.as-i64 > [x] > lt

  # Returns `org.eolang.true` if `$` <= `x`.
  # Here `x` must be an `org.eolang.i32` object.
  as-i64.lte x.as-i32.as-i64 > [x] > lte

  # Returns `org.eolang.true` if `$` > `x`.
  # Here `x` must be an `org.eolang.i32` object.
  as-i64.gt x.as-i32.as-i64 > [x] > gt

  # Returns `org.eolang.true` if `$` >= `x`.
  # Here `x` must be an `org.eolang.i32` object.
  as-i64.gte x.as-i32.as-i64 > [x] > gte

  # Multiplication of `$` and `x`.
  # Here `x` must be an `org.eolang.i32` object.
  [x] > times
    if. > @
      or.
        left.eq 00-00-00-00
        left.eq FF-FF-FF-FF
      i32 right
      plus.
        i32 left
        i32 right
    (as-i64.times x.as-i32.as-i64).as-bytes > bts
    bts.slice 0 4 > left
    bts.slice 4 4 > right

  # Sum of `$` and `x`.
  # Here `x` must be an `org.eolang.i32` object.
  [x] > plus
    if. > @
      or.
        left.eq 00-00-00-00
        left.eq FF-FF-FF-FF
      i32 right
      plus.
        i32 left
        i32 right
    (as-i64.plus x.as-i32.as-i64).as-bytes > bts
    bts.slice 0 4 > left
    bts.slice 4 4 > right

  # Subtraction between `$` and `x`.
  # Here `x` must be an `org.eolang.i32` object.
  plus x.as-i32.neg > [x] > minus

  # Quotient of the division of `$` by `x`.
  # Here `x` must be an `org.eolang.i32` object.
  # An `error` is returned if `x` is equal to 0.
  [x] > div
    if. > @
      x-as-i32.eq zero
      error
        sprintf
          "Can't divide %d by i32 zero"
          * as-i64.as-number
      if.
        or.
          left.eq zero
          left.eq FF-FF-FF-FF
        i32 right
        plus.
          i32 left
          i32 right
    x.as-i32 > x-as-i32
    (as-i64.div x-as-i32.as-i64).as-bytes > bts
    bts.slice 0 4 > left
    bts.slice 4 4 > right
    00-00-00-00 > zero

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-has-valid-bytes
    eq. > @
      42.as-i64.as-i32.as-bytes
      00-00-00-2A

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-negative-i32-has-valid-bytes
    eq. > @
      -200.as-i64.as-i32.as-bytes
      FF-FF-FF-38

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-to-i16-and-back
    eq. > @
      123.as-i64.as-i32
      123.as-i64.as-i32.as-i16.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-negative-i32-to-i16-and-back
    eq. > @
      -123.as-i64.as-i32
      -123.as-i64.as-i32.as-i16.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-less-true
    lt. > @
      10.as-i64.as-i32
      50.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-less-equal
    not. > @
      lt.
        10.as-i64.as-i32
        10.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-less-false
    not. > @
      lt.
        10.as-i64.as-i32
        -5.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-greater-true
    gt. > @
      -200.as-i64.as-i32
      -1000.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-greater-false
    not. > @
      gt.
        0.as-i64.as-i32
        100.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-greater-equal
    not. > @
      gt.
        0.as-i64.as-i32
        0.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-lte-true
    lte. > @
      -200.as-i64.as-i32
      -100.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-lte-equal
    lte. > @
      50.as-i64.as-i32
      50.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-lte-false
    not. > @
      lte.
        0.as-i64.as-i32
        -10.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-gte-true
    gte. > @
      -1000.as-i64.as-i32
      -1100.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-gte-equal
    gte. > @
      113.as-i64.as-i32
      113.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-gte-false
    not. > @
      gte.
        0.as-i64.as-i32
        10.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-zero-eq-to-i32-zero
    eq. > @
      0.as-i64.as-i32
      0.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-eq-true
    eq. > @
      123.as-i64.as-i32
      123.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-eq-false
    not. > @
      eq.
        123.as-i64.as-i32
        42.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-one-plus-i32-one
    eq. > @
      1.as-i64.as-i32.plus 1.as-i64.as-i32
      2.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-plus-with-overflow
    eq. > @
      2147483647.as-i64.as-i32.plus 1.as-i64.as-i32
      -2147483648.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-one-minus-i32-one
    eq. > @
      1.as-i64.as-i32.minus 1.as-i64.as-i32
      0.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-minus-with-overflow
    eq. > @
      -2147483648.as-i64.as-i32.minus 1.as-i64.as-i32
      2147483647.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  2.as-i64.as-i32.div 0.as-i64.as-i32 > [] +> throws-on-division-i32-by-i32-zero

  # This unit test is supposed to check the functionality of the corresponding object.
  247483647.as-i64.as-i32.as-i16 > [] +> throws-on-converting-to-i16-if-out-of-bounds

  # Checks that division by one returns the dividend.
  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-div-by-i32-one
    eq. > @
      dividend.div 1.as-i64.as-i32
      dividend
    -235.as-i64.as-i32 > dividend

  # Checks div with remainder
  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-div-with-remainder
    eq. > @
      13.as-i64.as-i32.div -5.as-i64.as-i32
      -2.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-div-less-than-i32-one
    lt. > @
      1.as-i64.as-i32.div 5.as-i64.as-i32
      1.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-multiply-by-zero
    eq. > @
      1000.as-i64.as-i32.times 0.as-i64.as-i32
      0.as-i64.as-i32

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-i32-times-with-overflow
    eq. > @
      2147483647.as-i64.as-i32.times 2.as-i64.as-i32
      -2.as-i64.as-i32
