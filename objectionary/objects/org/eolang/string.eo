+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.56.5
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# The `string` object is an abstraction of a text string, which
# internally is a chain of bytes.
[as-bytes] > string
  as-bytes > @

  # Calculates the length of the string.
  [] > length
    if. > @
      size.eq 0
      0
      rec-length 0 0
    as-bytes.size > size
    80- > pattern-one
    E0- > pattern-two
    F0- > pattern-three
    F8- > pattern-four
    00- > result-one
    C0- > result-two
    pattern-two > result-three
    pattern-three > result-four

    # The object checks if `index` + `char-size` is out of string bounds.
    # If not - the new recursion iteration is started with `index` increased by `char-size` and
    # `accum` increased by 1.
    [index char-size len] > increase-length
      if. > @
        (index.plus char-size).gt size
        error
          sprintf
            "Expected %d byte character at %d index, but there are not enough bytes for it: %x"
            * char-size index as-bytes
        rec-length
          index.plus char-size
          len.plus 1

    # The object recursively calculates the length of current string considering how many bytes
    # the character on each iteration must consist of.
    [index accum] > rec-length
      if. > @
        index.eq size
        accum
        if.
          (byte.and pattern-one).eq result-one
          increase-length index 1 accum
          if.
            (byte.and pattern-two).eq result-two
            increase-length index 2 accum
            if.
              (byte.and pattern-three).eq result-three
              increase-length index 3 accum
              if.
                (byte.and pattern-four).eq result-four
                increase-length index 4 accum
                error
                  sprintf
                    "Unknown byte format (%x), can't recognize character"
                    * byte
      as-bytes.slice index 1 > byte

  # Takes a piece of a string as another string.
  [start len] > slice
    if. > @
      num-start.lt 0
      error
        sprintf
          "Start index must be >= 0, but was %d"
          * num-start
      if.
        num-len.lt 0
        error
          sprintf
            "Length to slice must be >= 0, but was %d"
            * num-len
        if.
          num-len.eq 0
          ""
          string
            as-bytes.slice bts-start bts-length
    start > start-bytes!
    len > len-bytes!
    number start-bytes > num-start
    number len-bytes > num-len
    as-bytes.size > size
    num-start.plus num-len > end
    80- > pattern-one
    E0- > pattern-two
    F0- > pattern-three
    F8- > pattern-four
    00- > result-one
    C0- > result-two
    pattern-two > result-three
    pattern-three > result-four
    rec-index > bts-start!
      0
      0
      num-start
      sprintf
        "Start index (%d) is out of string bounds"
        * num-start
    minus. > bts-length
      rec-index
        number bts-start
        0
        num-len
        sprintf
          "Start index + length to slice (%d) is out of string bounds"
          * (num-start.plus num-len)
      bts-start

    # The object checks if `index` + provided `char-size` is not out of the string bounds.
    # If not -  the new recursion circle is started with `index` is increased by `char-size` and
    # `accum` is increased by 1.
    [index char-size accum result cause] > increase
      if. > @
        (index.plus char-size).gt size
        error
          sprintf
            "Expected %d byte character at %d index, but there are not enough bytes for it: %x"
            * char-size index as-bytes
        rec-index
          index.plus char-size
          accum.plus 1
          result
          cause

    # The object recursively calculates `index` of bytes representation of the string
    # where `accum` equals to provided `result`.
    # The `cause` here is the description of the error which is thrown when `index` reaches the end
    # of the bytes but `accum` does not reach the `result`.
    # Also it checks how many bytes (B) must contain character on the current step and tries to
    # increase index by B.
    [index accum result cause] > rec-index
      if. > @
        accum.eq result
        index
        if.
          index.eq size
          error cause
          if.
            (byte.and pattern-one).eq result-one
            increase index 1 accum result cause
            if.
              (byte.and pattern-two).eq result-two
              increase index 2 accum result cause
              if.
                (byte.and pattern-three).eq result-three
                increase index 3 accum result cause
                if.
                  (byte.and pattern-four).eq result-four
                  increase index 4 accum result cause
                  error
                    sprintf
                      "Unknown byte format (%x), can't recognize character"
                      * byte
      as-bytes.slice index 1 > byte

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-calculates-length-of-spaces-only
    eq. > @
      " ".length
      1

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-turns-string-into-bytes
    eq. > @
      "â‚¬ Ğ´Ñ€ÑƒĞ³".as-bytes
      E2-82-AC-20-D0-B4-D1-80-D1-83-D0-B3

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-bytes-equal-to-string
    eq. > @
      D0-B4-D1-80-D1-83-D0-B3
      "Ğ´Ñ€ÑƒĞ³"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-string-equals-to-bytes
    eq. > @
      "Ğ´Ñ€ÑƒĞ³"
      D0-B4-D1-80-D1-83-D0-B3

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-the-length-with-n2-byte-characters
    and. > @
      str.length.eq 12
      str.as-bytes.size.eq 16
    "Hello, Ğ´Ñ€ÑƒĞ³!" > str

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-the-length-with-n3-byte-characters
    and. > @
      str.length.eq 16
      str.as-bytes.size.eq 18
    "The à¤… devanagari" > str

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-reads-the-length-with-n4-byte-characters
    and. > @
      str.length.eq 11
      str.as-bytes.size.eq 14
    "The ğŸ˜€ smile" > str

  # This unit test is supposed to check the functionality of the corresponding object.
  # The smile emoji is F0-9F-98-80 in bytes. Here we check if string.length fails if it faces
  # incomplete 4 byte character.
  [] +> throws-on-taking-length-of-incomplete-n4-byte-character
    should-be-smile.length > @
    string F0-9F-98 > should-be-smile

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-two-different-string-types
    not. > @
      eq.
        "Hello"
        42

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-string-with-nan
    not. > @
      eq.
        nan
        "Ğ´Ñ€ÑƒĞ³"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-string-with-positive-infinity
    eq. > @
      positive-infinity.eq "Ğ´Ñ€ÑƒĞ³"
      false

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-string-with-negative-infinity
    not. > @
      eq.
        negative-infinity
        "Ğ´Ñ€ÑƒĞ³"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-text-block-one-line
    eq. > @
      """
      Abc
      """
      "Abc"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-text-block-tree-lines
    eq. > @
      """
      e
      e
      e
      """.as-bytes
      65-0A-65-0A-65

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-text-block-with-margin
    eq. > @
      """
       z
        y
       x
      """.as-bytes
      7A-0A-20-20-79-0A-20-78

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-two-different-strings
    not. > @
      eq.
        "Hello"
        "Good bye"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-supports-escape-sequences
    eq. > @
      "Hello, \u0434\u0440\u0443\u0433!\n"
      "Hello, Ğ´Ñ€ÑƒĞ³!\n"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-supports-escape-sequences-in-text
    eq. > @
      """
      Hello, \u0434\u0440\u0443\u0433!\n
      """
      "Hello, Ğ´Ñ€ÑƒĞ³!\n"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-preserves-indentation-in-text
    eq. > @
      """
      a
       b
        c
      """
      "a\n b\n  c"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-compares-two-strings
    eq. > @
      eq.
        "x"
        "x"
      true

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-one-symbol-string-compares
    eq. > @
      "Ğ¤"
      "Ğ¤"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-supports-escape-sequences-line-break
    eq. > @
      "\n"
      "\012"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-supports-escape-sequences-unicode
    eq. > @
      "\u0424"
      "Ğ¤"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-from-start
    eq. > @
      "hello".slice 0 1
      "h"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-in-the-middle
    eq. > @
      "hello".slice 2 3
      "llo"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-from-the-end
    eq. > @
      "hello".slice 4 1
      "o"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-empty-string
    eq. > @
      "".slice 0 0
      ""

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-no-slice-string
    eq. > @
      "no slice".slice 0 0
      ""

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-escape-sequences-line-break
    eq. > @
      "\n".slice
        0
        "\n".length
      "\012"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-escape-sequences-unicode
    eq. > @
      "\u0424".slice
        0
        "\u0424".length
      "Ğ¤"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-with-n2-byte-characters
    eq. > @
      "Ğ¿Ñ€Ğ¸Ğ²ĞµÑ‚".slice 1 2
      "Ñ€Ğ¸"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-with-n3-byte-characters
    eq. > @
      "The à¤… is à¤…".slice 1 6
      "he à¤… i"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-with-n4-byte-characters
    eq. > @
      "One ğŸ˜€ and ğŸ˜€ another".slice 3 8
      " ğŸ˜€ and ğŸ˜€"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-slice-foreign-literals
    eq. > @
      "hello, å¤§å®¶!".slice
        7
        1
      "å¤§"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-slicing-start-below-zero
    slice. > @
      "some string"
      -1
      1

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-slicing-end-below-start
    slice. > @
      "some string"
      2
      -1

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-slicing-end-greater-actual
    slice. > @
      "some string"
      7
      5
