+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.math
+version 0.58.3
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# Calculates the integral from `a` to `b`.
# Here `func` is the integration function, `a` is the lower limit,
# `b` is the upper limit, `n` is the number of partitions of the integration interval.
[fun a b n] > integral
  as-number. > @
    malloc.of
      8
      [sum] >>
        malloc.for > @
          a
          [left] >>
            seq * > @
              while
                [i] >>
                  if. > @
                    (left.as-number.plus step).lt right
                    seq *
                      sum.put
                        sum.as-number.plus
                          subsection
                            left.as-number
                            left.as-number.plus step
                      left.put
                        left.as-number.plus step
                      true
                    false
                true > [i]
              sum
            b > right
            ((right.minus left).div n).as-number > step
  [a b] > subsection
    times. > @
      div.
        b.minus a
        6.0
      plus.
        fun a
        plus.
          times.
            4.0
            fun
              times.
                0.5
                a.plus b
          fun b

  # Tests that integral calculation works correctly for linear function.
  [] +> tests-calculates-lineal-integral
    close-to > @
      as-number.
        integral
          x > [x]
          1
          10
          15
      49.5
      0.0000001

    # Checks whether given `value` is close to `operand` with given precision `err`.
    [value operand err] > close-to
      lte. > @
        minus.
          abs
            value.minus operand
          err
        0
      [value] > abs
        if. > @
          value.gte 0
          value
          value.neg

  # Tests that integral calculation works correctly for quadratic function.
  [] +> tests-calculates-quadratic-integral
    close-to > @
      as-number.
        integral
          x.times x > [x]
          1
          10
          100
      333
      0.0000001

    # Checks whether given `value` is close to `operand` with given precision `err`.
    [value operand err] > close-to
      lte. > @
        minus.
          abs
            value.minus operand
          err
        0
      [value] > abs
        if. > @
          value.gte 0
          value
          value.neg

  # Tests that integral calculation works correctly for cubic function.
  [] +> tests-calculates-cube-integral
    close-to > @
      as-number.
        integral
          (x.times x).times x > [x]
          1
          10
          100
      2499.75
      0.0000001

    # Checks whether given `value` is close to `operand` with given precision `err`.
    [value operand err] > close-to
      lte. > @
        minus.
          abs
            value.minus operand
          err
        0
      [value] > abs
        if. > @
          value.gte 0
          value
          value.neg
