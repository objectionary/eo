+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+alias org.eolang.math.e
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.math
+rt jvm org.eolang:eo-runtime:0.52.0
+rt node eo2js-runtime:0.0.0
+version 0.52.0

# Returns a floating point number.
[num] > real
  num > @
  # Returns Euler's number raised to the power of a `num`.
  (QQ.math.real e).pow num > exp

  # Calculate MOD.
  # An operation that finds the remainder after dividing one number by another.
  [x] > mod
    number num.as-bytes > dividend
    number x.as-bytes > divisor
    if. > @
      divisor.eq 0
      error "Can't calculate mod by zero"
      if.
        dividend.gt 0
        abs-mod
        abs-mod.neg

    [] > abs-mod
      (QQ.math.real dividend).abs > dividend-abs
      (QQ.math.real divisor).abs > divisor-abs
      minus. > @
        dividend-abs
        divisor-abs.times
          floor.
            dividend-abs.div divisor-abs

  # Absolute value of `num` (i.e., with no sign).
  [] > abs
    number num.as-bytes > value
    if. > @
      value.gte 0
      value
      value.neg

  # Make `^.num` power `x`.
  # An operation that raises ^.num (a number) to the power of x.
  [x] > pow /org.eolang.number

  # Returns the positive square root of a `num`.
  [] > sqrt /org.eolang.number

  # Returns the natural logarithm `e` of a `num`.
  [] > ln /org.eolang.number

  # Calculates arc cosine of a `num`.
  [] > acos /org.eolang.number

  # Calculates arc sine of a `num`.
  # An operation that finds the angle whose sine is num.
  [] > asin /org.eolang.number
