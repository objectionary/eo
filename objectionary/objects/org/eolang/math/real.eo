+alias org.eolang.math.e
+alias org.eolang.math.pi
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.math
+rt jvm org.eolang:eo-runtime:0.58.8
+rt node eo2js-runtime:0.0.0
+version 0.58.8
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:17

# Returns a floating point number.
[num] > real
  num > @
  # Returns Euler's number raised to the power of a `num`.
  (real e).pow num > exp

  # Calculate MOD.
  # An operation that finds the remainder after dividing one number by another.
  [x] > mod
    if. > @
      divisor.eq 0
      error "Can't calculate mod by zero"
      if.
        dividend.gt 0
        abs-mod
        abs-mod.neg
    number num.as-bytes > dividend
    number x.as-bytes > divisor

    [] > abs-mod
      minus. > @
        dividend-abs
        divisor-abs.times
          floor.
            dividend-abs.div divisor-abs
      (QQ.math.real dividend).abs > dividend-abs
      (QQ.math.real divisor).abs > divisor-abs

  # Absolute value of `num` (i.e., with no sign).
  [] > abs
    if. > @
      value.gte 0
      value
      value.neg
    number num.as-bytes > value

  # An operation that raises `^.num` (a number) to the power of `x` and returns the result as
  # `org.eolang.number`.
  [x] > pow ?

  # Returns the positive square root of a `num` as `org.eolang.number`.
  [] > sqrt ?

  # Returns the natural logarithm `e` of a `num` as `org.eolang.number`.
  [] > ln ?

  # Calculates arc cosine of a `num` as `org.eolang.number`.
  [] > acos ?

  # Calculates arc sine of a `num` as `org.eolang.number`.
  # An operation that finds the angle whose sine is num.
  [] > asin ?

  # Tests that absolute value of positive integer is the integer itself.
  [] +> tests-abs-int-positive
    eq. +> @
      (real 3).abs
      3

  # Tests that absolute value of negative integer removes the sign.
  [] +> tests-abs-int-negative
    eq. +> @
      (real -3).abs
      3

  # Tests that absolute value of zero is zero.
  [] +> tests-abs-zero
    eq. +> @
      (real 0).abs
      0

  # Tests that absolute value of positive float is the float itself.
  [] +> tests-abs-float-positive
    eq. +> @
      (real 13.5).abs
      13.5

  # Tests that absolute value of negative float removes the sign.
  [] +> tests-abs-float-negative
    eq. +> @
      (real -17.9).abs
      17.9

  # Tests that modulo operation works correctly for 1 mod 2.
  [] +> tests-mod-n1-n2
    eq. +> @
      (real 1).mod 2
      1

  # Tests that modulo operation works correctly for 0 mod 5.
  [] +> tests-mod-n0-n5
    eq. +> @
      (real 0).mod 5
      0

  # Tests that modulo operation works correctly for 0 mod -15.
  [] +> tests-mod-n0-n15-neg
    eq. +> @
      (real 0).mod -15
      0

  # Tests that modulo operation works correctly for -1 mod 7.
  [] +> tests-mod-n1-neg-n7
    eq. +> @
      (real -1).mod 7
      -1

  # Tests that modulo operation works correctly for 16 mod -200.
  [] +> tests-mod-n16-n200-neg
    eq. +> @
      (real 16).mod -200
      16

  # Tests mathematical equality A = ((A div B) * B) + (A mod B).
  # Checks mathematical equality
  # A = ((A div B) * B) + (A mod B).
  [] +> tests-div-mod-compatibility
    eq. +> @
      plus.
        (real dividend).mod divisor
        times.
          divisor
          (dividend.div divisor).floor
      dividend
    -13 > dividend
    5 > divisor

  # Tests modulo operation when dividend is less than divisor.
  # Checks modulo: dividend < divisor.
  [] +> tests-mod-dividend-less-than-divisor
    eq. +> @
      (real -1).mod 5
      -1

  # Tests modulo operation when divisor is 1.
  # Checks modulo by 1.
  [] +> tests-mod-dividend-by-one
    eq. +> @
      (real 133).mod 1
      0

  # Tests that power operation works correctly for 2^4.
  [] +> tests-pow-test
    eq. +> @
      (real 2).pow 4
      16

  # Tests that any number raised to the power of zero equals 1.
  [] +> tests-pow-is-zero
    eq. +> @
      (real 2).pow 0
      1

  # Tests that large number raised to large negative power approaches zero.
  [] +> tests-pow-is-negative
    eq. +> @
      (real 984782).pow -12341
      0

  # Tests that 3 raised to the power of 2 equals 9.
  [] +> tests-pow-of-two
    eq. +> @
      (real 3).pow 2
      9

  # Tests that zero raised to any positive power equals zero.
  [] +> tests-pow-of-zero
    eq. +> @
      (real 0).pow 145
      0

  # Tests that zero raised to negative power throws error.
  [] +> throws-on-negative-pow-of-zero
    (real 0).pow -567 +> @

  # Tests that NaN raised to NaN power results in NaN.
  # Check pow works with NaNs.
  [] +> tests-nan-to-the-pow-of-nan-is-nan
    is-nan. +> @
      (real nan).pow nan

  # Tests that NaN raised to any power results in NaN.
  [] +> tests-nan-to-the-pow-of-any-is-nan
    is-nan. +> @
      (real nan).pow 42

  # Tests that any number raised to NaN power results in NaN.
  [] +> tests-any-to-the-pow-of-nan-is-nan
    is-nan. +> @
      (real 52).pow nan

  # Tests that any integer raised to the power of zero equals 1.
  # Check if pow is zero.
  [] +> tests-any-int-to-the-pow-of-zero-is-one
    eq. +> @
      (real 42).pow 0
      1

  # Tests that any float raised to the power of zero equals 1.
  [] +> tests-any-float-to-the-pow-of-zero-is-one
    eq. +> @
      (real 42.5).pow 0
      1

  # Tests that zero raised to negative power equals positive infinity.
  # Check if pow is less than zero.
  [] +> tests-zero-to-the-negative-pow-is-positive-infinity
    eq. +> @
      (real 0).pow -52
      positive-infinity

  # Tests that zero raised to negative infinity equals positive infinity.
  [] +> tests-zero-to-the-negative-infinity-pow-is-positive-infinity
    eq. +> @
      (real 0).pow negative-infinity
      positive-infinity

  # Tests that positive integer raised to negative infinity equals zero.
  [] +> tests-positive-int-to-the-pow-of-negative-infinity-is-zero
    eq. +> @
      (real 42).pow negative-infinity
      0

  # Tests that positive float raised to negative infinity equals zero.
  [] +> tests-positive-float-to-the-pow-of-negative-infinity-is-zero
    eq. +> @
      (real 42.5).pow negative-infinity
      0

  # Tests that negative integer raised to negative infinity equals zero.
  [] +> tests-negative-int-to-the-pow-of-negative-infinity-is-zero
    eq. +> @
      (real -42).pow negative-infinity
      0

  # Tests that negative float raised to negative infinity equals zero.
  [] +> tests-negative-float-to-the-pow-of-negative-infinity-is-zero
    eq. +> @
      (real -42.5).pow negative-infinity
      0

  # Tests that positive infinity raised to negative infinity equals zero.
  [] +> tests-positive-infinity-to-the-pow-of-negative-infinity-is-zero
    eq. +> @
      (real positive-infinity).pow negative-infinity
      0

  # Tests that negative infinity raised to negative infinity equals zero.
  [] +> tests-negative-infinity-to-the-pow-of-negative-infinity-is-zero
    eq. +> @
      (real negative-infinity).pow negative-infinity
      0

  # Tests that positive infinity raised to finite negative power equals zero.
  [] +> tests-positive-infinity-to-the-finite-negative-int-pow-is-zero
    eq. +> @
      (real positive-infinity).pow -42
      0

  # Tests that positive infinity raised to finite negative float power equals zero.
  [] +> tests-positive-infinity-to-the-finite-negative-float-pow-is-zero
    eq. +> @
      (real positive-infinity).pow -42.2
      0.0

  # Tests that 2 raised to the power of -1 equals 0.5.
  [] +> tests-two-to-the-pow-of-minus-one
    eq. +> @
      (real 2).pow -1
      0.5

  # Tests that 2 raised to the power of -2 equals 0.25.
  [] +> tests-two-to-the-pow-of-int-minus-two
    eq. +> @
      (real 2).pow -2
      0.25

  # Tests mathematical operation functionality.
  [] +> tests-two-to-the-pow-of-minus-three
    eq. +> @
      (real 2).pow -3
      0.125

  # Tests mathematical operation functionality.
  [] +> tests-four-to-the-pow-of-minus-three
    eq. +> @
      (real 4).pow -3.0
      0.015625

  # Tests mathematical operation functionality.
  # Check if pow more than zero.
  [] +> tests-zero-to-the-pow-of-positive-int-is-zero
    eq. +> @
      (real 0).pow 4
      0

  # Tests mathematical operation functionality.
  [] +> tests-zero-to-the-pow-of-positive-float-is-zero
    eq. +> @
      (real 0).pow 4.2
      0

  # Tests mathematical operation functionality.
  [] +> tests-zero-to-the-pow-of-positive-infinity-is-zero
    eq. +> @
      (real 0).pow positive-infinity
      0

  # Tests mathematical operation functionality.
  [] +> tests-negative-int-to-the-pow-of-positive-infinity-is-positive-infinity
    eq. +> @
      (real -10).pow positive-infinity
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-negative-float-to-the-pow-of-positive-infinity-is-infinity
    eq. +> @
      (real -4.2).pow positive-infinity
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-positive-int-to-the-pow-of-positive-infinity-is-positive-infinity
    eq. +> @
      (real 42).pow positive-infinity
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-positive-float-to-the-pow-of-positive-infinity-is-positive-infinity
    eq. +> @
      (real 42.5).pow positive-infinity
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-positive-infinity-to-the-pow-of-positive-int-is-positive-infinity
    eq. +> @
      (real positive-infinity).pow 42
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-positive-infinity-to-the-pow-of-positive-float-is-positive-infinity
    eq. +> @
      (real positive-infinity).pow 10.8
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-positive-infinity-to-the-pow-of-positive-infinity-is-positive-infinity
    eq. +> @
      (real positive-infinity).pow positive-infinity
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-negative-infinity-to-the-pow-of-positive-float-is-positive-infinity
    eq. +> @
      (real negative-infinity).pow 9.9
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-negative-infinity-to-the-pow-of-even-positive-int-is-positive-infinity
    eq. +> @
      (real negative-infinity).pow 10
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-negative-infinity-to-the-pow-of-odd-positive-int-is-positive-infinity
    eq. +> @
      (real negative-infinity).pow 9
      negative-infinity

  # Tests mathematical operation functionality.
  [] +> tests-positive-int-to-the-pow-of-positive-int-is-int
    eq. +> @
      (real 2).pow 3
      8

  # Tests mathematical operation functionality.
  [] +> tests-positive-float-to-the-pow-of-positive-int-is-float
    eq. +> @
      (real 3.5).pow 4
      150.0625

  # Tests mathematical operation functionality.
  [] +> tests-positive-int-to-the-pow-of-positive-float-is-float
    eq. +> @
      (real 4).pow 5
      1024

  # Tests that square root of zero equals zero.
  [] +> tests-sqrt-check-zero-input
    lt. +> @
      abs.
        real
          minus.
            0
            sqrt.
              real 0
      0.00000000001

  # Tests that square root of negative number returns NaN.
  [] +> tests-sqrt-check-negative-input
    is-nan. +> @
      sqrt.
        real -0.1

  # Tests that square root calculation works correctly for float input.
  [] +> tests-sqrt-check-float-input
    lt. +> @
      abs.
        real
          minus.
            2
            sqrt.
              real
                4
      0.00000000001

  # Tests that square root calculation works correctly for integer input.
  [] +> tests-sqrt-check-int-input
    lt. +> @
      abs.
        real
          minus.
            9
            sqrt.
              real
                81
      0.00000000001

  # Tests that square root of NaN returns NaN.
  [] +> tests-sqrt-check-nan-input
    is-nan. +> @
      sqrt.
        real nan

  # Tests that square root of positive infinity equals positive infinity.
  [] +> tests-sqrt-check-infinity-n1
    eq. +> @
      sqrt.
        real positive-infinity
      positive-infinity

  # Tests that square root of negative infinity returns NaN.
  [] +> tests-sqrt-check-infinity-n2
    is-nan. +> @
      sqrt.
        real negative-infinity

  # Tests that natural logarithm of negative float returns NaN.
  [] +> tests-ln-of-negative-float-is-nan
    is-nan. +> @
      ln.
        real -2.2

  # Tests that natural logarithm of zero equals negative infinity.
  [] +> tests-ln-of-zero-is-negative-infinity
    eq. +> @
      ln.
        real 0
      negative-infinity

  # Tests that natural logarithm of 1 equals zero.
  [] +> tests-ln-of-one-is-zero
    eq. +> @
      ln.
        real 1
      0

  # Tests that natural logarithm of e equals 1.
  [] +> tests-ln-of-e-one-is-one
    eq. +> @
      ln.
        real e
      1

  # Tests mathematical operation functionality.
  [] +> tests-ln-of-negative-int-is-nan
    is-nan. +> @
      ln.
        real -42

  # Tests mathematical operation functionality.
  [] +> tests-ln-of-int-zero-is-negative-infinity
    eq. +> @
      ln.
        real 0
      negative-infinity

  # Tests mathematical operation functionality.
  [] +> tests-ln-of-int-one-is-zero
    eq. +> @
      ln.
        real 1
      0

  # Tests mathematical operation functionality.
  [] +> tests-ln-of-twenty
    eq. +> @
      ln.
        real 20
      2.995732273553991

  # Tests that arccosine of -1 equals pi.
  [] +> tests-arccos-negative-one-test
    eq. +> @
      acos.
        real -1.0
      pi

  # Tests that arccosine of 0 equals pi/2.
  [] +> tests-arccos-zero-test
    eq. +> @
      acos.
        real 0
      div.
        pi
        2

  # Tests that arccosine of 1 equals zero.
  [] +> tests-arccos-one-test
    eq. +> @
      acos.
        real 1.0
      0

  # Tests mathematical operation functionality.
  [] +> tests-arccos-positive-calculated-test
    lt. +> @
      abs.
        real
          minus.
            acos.
              real 0.6
            0.927295
      0.000001

  # Tests mathematical operation functionality.
  [] +> tests-arccos-negative-calculated-test
    lt. +> @
      abs.
        real
          minus.
            acos.
              real -0.6
            2.214297
      0.000001

  # Tests mathematical operation functionality.
  [] +> tests-arccos-nan-positive-value-test
    is-nan. +> @
      acos.
        real 2.0

  # Tests mathematical operation functionality.
  [] +> tests-arccos-nan-negative-value-test
    is-nan. +> @
      (real -2.0).acos

  # Tests that exponential function e^1 approximately equals e.
  [] +> tests-exp-check-n0
    lt. +> @
      abs.
        real
          minus.
            e
            (real 1).exp
      0.00000001

  # Tests mathematical operation functionality.
  [] +> tests-exp-check-n1
    lt. +> @
      abs.
        real
          minus.
            e
            (real 1).exp
      0.00000001

  # Tests mathematical operation functionality.
  [] +> tests-exp-check-n2
    lt. +> @
      abs.
        real
          minus.
            1.div e
            (real -1).exp
      0.00000001

  # Tests mathematical operation functionality.
  [] +> tests-exp-check-n3
    lt. +> @
      abs.
        real
          minus.
            (real e).pow 5
            (real 5).exp
      0.0000001

  # Tests mathematical operation functionality.
  [] +> tests-exp-check-n4
    lt. +> @
      abs.
        real
          minus.
            (real e).pow -10
            (real -10).exp
      0.000000000001

  # Tests mathematical operation functionality.
  [] +> tests-exp-check-nan
    is-nan. +> @
      (real nan).exp

  # Tests mathematical operation functionality.
  [] +> tests-exp-check-infinity-n1
    eq. +> @
      (real positive-infinity).exp
      positive-infinity

  # Tests mathematical operation functionality.
  [] +> tests-exp-check-infinity-n2
    eq. +> @
      (real negative-infinity).exp
      0
