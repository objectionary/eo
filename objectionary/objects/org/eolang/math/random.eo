+alias org.eolang.sys.os
+alias org.eolang.sys.posix
+alias org.eolang.sys.win32
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.math
+version 0.57.0
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# Generates a pseudo-random number.
[seed] > random
  # Get float value for current `seed`.
  # Divide `seed` to maximum possible value of the `seed` which is 1 << 53.
  div. > @
    seed.as-number
    00-20-00-00-00-00-00-00.as-i64.as-number
  $ > fixed
  # Next random.
  # Formula is based on linear congruential pseudorandom number generator, as defined by
  # D. H. Lehmer and described by Donald E. Knuth in The Art of Computer Programming, Volume 2,
  # Third edition: Seminumerical Algorithms, section 3.2.1.
  # Magic numbers are taken from Java implementation. 48 lower bits are considered.
  # `next` = (`seed` * 25214903917 + 11) & ((1 << 48) - 1).
  # Here `00-0F-FF-FF-FF-FF-FF-FF` is pre calculated `(1 << 48) - 1`.
  fixed. > next
    random
      as-number.
        as-i64.
          and.
            as-i64.
              plus.
                seed.times 25214903917
                11
            00-0F-FF-FF-FF-FF-FF-FF

  # New random with pseudo-random seed.
  [] > pseudo
    random time-seed > @
    (posix "gettimeofday" *).output > timeval
    as-number. > time-seed
      plus.
        as-i64.
          and.
            time-bytes.left const-1
            ((one.left const-2).as-i64.minus one).as-bytes
        plus.
          as-i64.
            and.
              time-bytes.left const-3
              ((one.left const-1).as-i64.minus one).as-bytes
          as-i64.
            and.
              time-bytes
              ((one.left const-3).as-i64.minus one).as-bytes
    as-bytes. > time-bytes
      as-i64.
        if.
          os.is-windows
          (win32 "GetSystemTime" *).milliseconds
          plus.
            timeval.tv-sec.times 1000
            as-number.
              timeval.tv-usec.as-i64.div 1000.as-i64
    35 > const-1
    53 > const-2
    17 > const-3
    00-00-00-00-00-00-00-01 > one

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-random-with-seed
    not. > @
      eq.
        r.next
        r.next.next
    random 51 > r

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-seeded-randoms-are-equal
    eq. > @
      (random 1654).next.next.next
      (random 1654).next.next.next

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-random-is-in-range
    and. > @
      and.
        and.
          rand.lt 1
          (rand.lt 0).not
        and.
          rand.next.lt 1
          (rand.next.lt 0).not
      and.
        rand.next.next.lt 1
        (rand.next.next.lt 0).not
    (random 123).fixed > rand

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-two-random-numbers-not-equal
    not. > @
      random.pseudo.eq random.pseudo
