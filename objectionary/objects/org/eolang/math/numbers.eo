+alias org.eolang.structs.list
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.math
+version 0.58.8
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# Sequence of numbers.
# Here `sequence` must be a `tuple` or any `tuple` decorator of `number` objects.
[sequence] > numbers
  sequence > @

  # Find max element in the numbers sequence.
  [] > max
    if. > @
      lst.is-empty
      error "Can't get the max number from an empty sequence"
      reduced.
        lst
        negative-infinity
        [max item]
          if. > @
            item.as-number.gt max
            item
            max
    list sequence > lst

  # Find min element in the numbers sequence.
  [] > min
    if. > @
      lst.is-empty
      error "Can't get the min number from an empty sequence"
      reduced.
        lst
        positive-infinity
        [min item]
          if. > @
            min.gt item.as-number
            item
            min
    list sequence > lst

  # Tests that taking max from empty sequence throws error.
  (numbers *).max > [] +> throws-on-taking-max-from-empty-sequence-of-numbers

  # Tests that taking min from empty sequence throws error.
  (numbers *).min > [] +> throws-on-taking-min-from-empty-sequence-of-numbers

  # Tests that max of single-item array returns that item.
  [] +> tests-max-of-one-item-array
    eq. > @
      (numbers (* 42)).max
      42

  # Tests that min of single-item array returns that item.
  [] +> tests-min-of-one-item-array
    eq. > @
      (numbers (* 42)).min
      42

  # Tests that max correctly identifies the largest value when it is the first element.
  [] +> tests-max-of-array-is-first
    eq. > @
      (numbers (* 25 12 -2)).max
      25

  # Tests that max correctly identifies the largest value when it is in the middle.
  [] +> tests-max-of-array-is-in-the-center
    eq. > @
      (numbers (* 12 25 -2)).max
      25

  # Tests that max correctly identifies the largest value when it is the last element.
  [] +> tests-max-of-array-is-last
    eq. > @
      (numbers (* 12 -2 25)).max
      25

  # Tests that min correctly identifies the smallest value when it is the first element.
  [] +> tests-min-of-array-is-first
    eq. > @
      (numbers (* -2 25 12)).min
      -2

  # Tests that min correctly identifies the smallest value when it is in the middle.
  [] +> tests-min-of-array-is-in-the-center
    eq. > @
      (numbers (* 12 -2 25)).min
      -2

  # Tests that min correctly identifies the smallest value when it is the last element.
  [] +> tests-min-of-array-is-last
    eq. > @
      (numbers (* 12 25 -2)).min
      -2
