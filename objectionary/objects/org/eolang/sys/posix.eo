+alias org.eolang.sys.os
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.sys
+rt jvm org.eolang:eo-runtime:0.58.3
+rt node eo2js-runtime:0.0.0
+version 0.58.3
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:28
+unlint redundant-object:29
+unlint redundant-object:30
+unlint redundant-object:31
+unlint redundant-object:32
+unlint redundant-object:33
+unlint redundant-object:36
+unlint redundant-object:44
+unlint redundant-object:45

# Makes a Unix syscall by `name` with POSIX interface.
# Here `args` is a `org.eolang.tuple` of arguments required for
# the particular syscall.
# See the linux syscall [table](https://filippo.io/linux-syscall-table) for more info.
[name args] > posix
  # Makes an actual syscall to operating system
  # Returns `org.eolang.sys.posix.return` object.
  [] > @ ?
  0 > stdin-fileno
  1 > stdout-fileno
  2 > af-inet
  1 > sock-stream
  6 > ipproto-tcp
  -1 > inaddr-none
  [code output] > return
    output > @
    return code output > called

  # Timeval structure for "gettimeofday" syscall.
  # Here `tv-sec` is seconds since Jan 1, 1970, and `tv-usec` - microseconds.
  [tv-sec tv-usec] > timeval

  # The posix `sockaddr_in` structure.
  [sin-family sin-port sin-addr] > sockaddr-in
    00-00-00-00-00-00-00-00 > sin-zero
    plus. > size
      plus.
        plus.
          sin-family.size
          sin-port.size
        sin-addr.size
      sin-zero.size

  # Tests that the getpid POSIX syscall correctly returns a process ID greater than 0.
  [] +> tests-invokes-getpid-correctly
    or. > @
      os.is-windows
      gt.
        code.
          posix
            "getpid"
            tuple.empty
        0

  # Tests that a POSIX TCP socket can be opened successfully using the socket syscall.
  [] +> tests-opens-posix-tcp-socket
    or. > @
      os.is-windows
      try
        sd.gt 0
        ex > [ex]
        code.
          posix
            "close"
            * sd
    code. > sd
      posix
        "socket"
        * posix.af-inet posix.sock-stream posix.ipproto-tcp

  # Tests that a POSIX TCP socket can be closed successfully using the close syscall.
  [] +> tests-closes-posix-tcp-socket
    or. > @
      os.is-windows
      seq
        *
          sd
          not.
            eq.
              code.
                posix
                  "close"
                  * sd
              -1
    code. > sd
      posix
        "socket"
        * posix.af-inet posix.sock-stream posix.ipproto-tcp

  # Tests that the inet_addr POSIX function returns the correct network address for localhost (127.0.0.1).
  [] +> tests-returns-valid-posix-inet-addr-for-localhost
    or. > @
      os.is-windows
      (code. (posix "inet_addr" (* "127.0.0.1"))).eq 16777343
