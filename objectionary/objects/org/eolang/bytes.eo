+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.55.2
+rt node eo2js-runtime:0.0.0
+version 0.55.2
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint rt-without-atoms
+unlint empty-object
+unlint wrong-sprintf-arguments

# The object encapsulates a chain of bytes, adding a few
# convenient operations to it. Objects like `int`, `string`,
# and `float` encapsulate `bytes`.
[data] > bytes
  data > @
  $ > as-bytes
  eq 01- > as-bool
  # Turn this chain of eight bytes into a number.
  # If there are less or more than eight bytes, there will
  # be an error returned.
  if. > as-number
    eq nan.as-bytes
    nan
    if.
      eq positive-infinity.as-bytes
      positive-infinity
      if.
        eq negative-infinity.as-bytes
        negative-infinity
        if.
          size.eq 8
          number $
          error
            sprintf
              "Can't convert non 8 length bytes to a number, bytes are %x"
              * $
  # Turn this chain of eight bytes into a i64 number.
  # If there are less or more than eight bytes, there will
  # be an error returned.
  if. > as-i64
    size.eq 8
    i64 $
    error
      sprintf
        "Can't convert non 8 length bytes to i64, bytes are %x"
        * $
  # Turn this chain of four bytes into a i32 number.
  # If there are less or more than four bytes, there will
  # be an error returned.
  if. > as-i32
    size.eq 4
    i32 $
    error
      sprintf
        "Can't convert non 4 length bytes to i32, bytes are %x"
        * $
  # Turn this chain of two bytes into a i16 number.
  # If there are less or more than two bytes, there will
  # be an error returned.
  if. > as-i16
    size.eq 2
    i16 $
    error
      sprintf
        "Can't convert non 2 length bytes to i16, bytes are %x"
        * $

  # Returns `org.eolang.true` if current sequence of bytes equals to another object.
  # Before the actual comparison the object `b` is dataized.
  [b] > eq ?

  # Returns total amount of current bytes as `org.eolang.number`.
  [] > size ?

  # Represents a sub-sequence of `org.eolang.bytes` inside the current one.
  [start len] > slice ?

  # Calculate the bitwise AND operation and returns result as `org.eolang.bytes`.
  [b] > and ?

  # Calculate the bitwise OR operation and returns result as `org.eolang.bytes`.
  [b] > or ?

  # Calculate the bitwise XOR operation and returns result as `org.eolang.bytes`.
  [b] > xor ?

  # Calculate the bitwise NOT operation and returns result as `org.eolang.bytes`.
  [] > not ?

  # Calculate the bitwise left shift.
  right x.neg > [x] > left

  # Calculate the bitwise right shift and returns result as `org.eolang.bytes`.
  [x] > right ?

  # Concatenation of two byte sequences and returns result as `org.eolang.bytes`.
  [b] > concat ?
