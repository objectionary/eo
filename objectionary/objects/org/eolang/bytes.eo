+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.57.0
+rt node eo2js-runtime:0.0.0
+version 0.57.0
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# The object encapsulates a chain of bytes, adding a few
# convenient operations to it. Objects like `int`, `string`,
# and `float` encapsulate `bytes`.
[data] > bytes
  data > @
  $ > as-bytes
  eq 01- > as-bool
  # Turn this chain of eight bytes into a number.
  # If there are less or more than eight bytes, there will
  # be an error returned.
  if. > as-number
    eq nan.as-bytes
    nan
    if.
      eq positive-infinity.as-bytes
      positive-infinity
      if.
        eq negative-infinity.as-bytes
        negative-infinity
        if.
          size.eq 8
          number $
          error
            sprintf
              "Can't convert non 8 length bytes to a number, bytes are %x"
              * $
  # Turn this chain of eight bytes into a i64 number.
  # If there are less or more than eight bytes, there will
  # be an error returned.
  if. > as-i64
    size.eq 8
    i64 $
    error
      sprintf
        "Can't convert non 8 length bytes to i64, bytes are %x"
        * $
  # Turn this chain of four bytes into a i32 number.
  # If there are less or more than four bytes, there will
  # be an error returned.
  if. > as-i32
    size.eq 4
    i32 $
    error
      sprintf
        "Can't convert non 4 length bytes to i32, bytes are %x"
        * $
  # Turn this chain of two bytes into a i16 number.
  # If there are less or more than two bytes, there will
  # be an error returned.
  if. > as-i16
    size.eq 2
    i16 $
    error
      sprintf
        "Can't convert non 2 length bytes to i16, bytes are %x"
        * $

  # Returns `org.eolang.true` if current sequence of bytes equals to another object.
  # Before the actual comparison the object `b` is dataized.
  [b] > eq ?

  # Returns total amount of current bytes as `org.eolang.number`.
  [] > size ?

  # Represents a sub-sequence of `org.eolang.bytes` inside the current one.
  [start len] > slice ?

  # Calculate the bitwise AND operation and returns result as `org.eolang.bytes`.
  [b] > and ?

  # Calculate the bitwise OR operation and returns result as `org.eolang.bytes`.
  [b] > or ?

  # Calculate the bitwise XOR operation and returns result as `org.eolang.bytes`.
  [b] > xor ?

  # Calculate the bitwise NOT operation and returns result as `org.eolang.bytes`.
  [] > not ?

  # Calculate the bitwise left shift.
  right x.neg > [x] > left

  # Calculate the bitwise right shift and returns result as `org.eolang.bytes`.
  [x] > right ?

  # Concatenation of two byte sequences and returns result as `org.eolang.bytes`.
  [b] > concat ?

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-takes-part-of-bytes
    eq. > @
      slice.
        20-1F-EE-B5-90
        1
        3
      1F-EE-B5

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-size-of-part-is-correct
    eq. > @
      size.
        slice.
          20-1F-EE-B5-90-EE-BB
          2
          3
      3

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-counts-size-of-bytes
    eq. > @
      size.
        F1-20-5F-EC-B5-90-32
      7

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-turns-bytes-into-a-string
    eq. > @
      string
        E4-BD-A0-E5-A5-BD-2C-20-D0-B4-D1-80-D1-83-D0-B3-21
      "你好, друг!"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-left-zero
    not. > @
      eq.
        0.as-bytes.left 1
        -1.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-left-with-zero
    not. > @
      eq.
        2.as-bytes.left 0
        -3.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-left-with-odd-neg
    not. > @
      eq.
        -17.as-bytes.left 1
        33.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-left-with-minus-one
    eq. > @
      eq.
        -1.as-bytes.left 3
        7.as-bytes
      false

  # This unit test is supposed to check the functionality of the corresponding object.
  # (-18.left 2).eq 71.not.
  [] +> tests-left-with-even-neg
    eq. > @
      FF-FF-FF-FF-FF-FF-FF-EE.left 2
      00-00-00-00-00-00-00-47.not

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-left-with-even-plus
    not. > @
      eq.
        4.as-bytes.left 3
        -33.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-left-with-odd-plus
    not. > @
      eq.
        5.as-bytes.left 3
        -41.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-right-with-zero
    not. > @
      eq.
        0.as-bytes.right 2
        -1.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-right-with-odd-neg
    not. > @
      eq.
        -37.as-bytes.right 3
        4.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-right-with-minus-one
    not. > @
      eq.
        -1.as-bytes.right 4
        0.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-right-with-even-neg
    not. > @
      eq.
        -38.as-bytes.right 1
        18.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-right-with-even-plus
    eq. > @
      eq.
        36.as-bytes.right 2
        -10.as-bytes
      false

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-right-with-odd-plus
    not. > @
      eq.
        37.as-bytes.right 3
        -5.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-and-with-zero
    not. > @
      eq.
        and.
          0.as-bytes
          32.as-bytes
        -1.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-and-with-two-neg
    not. > @
      eq.
        -6.as-bytes.and -4.as-bytes
        7.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-and-with-two-plus
    not. > @
      eq.
        and.
          5.as-bytes
          10.as-bytes
        -1.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-and-with-one-neg-one-plus
    not. > @
      eq.
        -7.as-bytes.and 7.as-bytes
        -2.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-or-with-zero
    not. > @
      eq.
        -11.as-bytes.or 0.as-bytes
        10.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-or-with-two-neg
    not. > @
      eq.
        -27.as-bytes.or -13.as-bytes
        8.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-or-with-two-plus
    not. > @
      eq.
        5.as-bytes.or 14.as-bytes
        -16.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-or-with-one-neg-one-plus
    not. > @
      eq.
        -7.as-bytes.or 23.as-bytes
        0.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-xor-with-zero
    not. > @
      eq.
        0.as-bytes.xor 29.as-bytes
        -30.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-xor-with-two-neg
    not. > @
      eq.
        -1.as-bytes.xor -123.as-bytes
        -123.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-xor-with-two-plus
    not. > @
      eq.
        53.as-bytes.xor 24.as-bytes
        -46.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-xor-with-one-neg-one-plus
    not. > @
      eq.
        -36.as-bytes.xor 43.as-bytes
        8.as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-not-with-zero
    not. > @
      eq.
        0.as-bytes
        0.as-bytes.not

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-not-with-neg
    not. > @
      eq.
        -1.as-bytes
        -1.as-bytes.not

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-not-with-plus
    not. > @
      eq.
        53.as-bytes
        53.as-bytes.not

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-conjunction-of-bytes
    eq. > @
      a.and b
      02-23-C0-05-5E-70-10
    02-EF-D4-05-5E-78-3A > a
    12-33-C1-B5-5E-71-55 > b

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-written-in-several-lines
    eq. > @
      size.
        CA-FE-
        BE-BE
      4

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-bitwise-works
    eq. > @
      as-number.
        and.
          1.as-bytes
          1.as-bytes
      1

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-convertible-to-bool
    not. > @
      eq.
        01-.as-bool
        00-.as-bool

  # This unit test is supposed to check the functionality of the corresponding object.
  # (-127.or 127).eq -1.
  [] +> tests-bitwise-works-negative
    eq. > @
      as-number.
        or.
          FF-FF-FF-FF-FF-FF-FF-81.as-bytes
          00-00-00-00-00-00-00-7F.as-bytes
      FF-FF-FF-FF-FF-FF-FF-FF

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-concatenation-of-bytes
    eq. > @
      a.concat b
      02-EF-D4-05-5E-78-3A-12-33-C1-B5-5E-71-55
    02-EF-D4-05-5E-78-3A > a
    12-33-C1-B5-5E-71-55 > b

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-concat-bools-as-bytes
    eq. > @
      concat.
        b1
        b2
      01-00
    true.as-bytes > b1
    false.as-bytes > b2

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-concat-with-empty
    eq. > @
      concat.
        05-5E-78
        --
      05-5E-78

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-concat-empty-with
    eq. > @
      concat.
        --
        05-5E-78
      05-5E-78

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-concat-empty
    eq. > @
      concat.
        --
        --
      --

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-concat-strings
    eq. > @
      string s-bytes
      "hello world"
    concat. > s-bytes
      "hello ".as-bytes
      "world".as-bytes

  # This unit test is supposed to check the functionality of the corresponding object.
  # (2397719729.xor 4294967295).eq 1897247566.
  [] +> tests-xor-works
    eq. > @
      00-00-00-00-8E-EA-4C-B1.xor 00-00-00-00-FF-FF-FF-FF
      00-00-00-00-71-15-B3-4E

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-one-xor-one-as-number
    eq. > @
      (1.as-bytes.xor 1.as-bytes).as-number
      0

  # This unit test is supposed to check the functionality of the corresponding object.
  # (2397719729.or -4294967296).eq -1897247567.
  [] +> tests-or-neg-bytes-with-leading-zeroes
    eq. > @
      00-00-00-00-8E-EA-4C-B1.or FF-FF-FF-FF-00-00-00-00
      FF-FF-FF-FF-8E-EA-4C-B1

  # This unit test is supposed to check the functionality of the corresponding object.
  # (2397719729.and -4294967296).eq 0.
  [] +> tests-and-neg-bytes-as-number-with-leading-zeroes
    eq. > @
      (00-00-00-00-8E-EA-4C-B1.and FF-FF-FF-FF-00-00-00-00).as-number
      0

  # This unit test is supposed to check the functionality of the corresponding object.
  # (2397719729.xor -4294967296).eq -1897247567.
  [] +> tests-xor-neg-bytes-with-leading-zeroes
    eq. > @
      00-00-00-00-8E-EA-4C-B1.xor FF-FF-FF-FF-00-00-00-00
      FF-FF-FF-FF-8E-EA-4C-B1

  # This unit test is supposed to check the functionality of the corresponding object.
  # (4294967295.or -4294967296).eq -1.
  [] +> tests-or-neg-bytes-without-leading-zeroes
    eq. > @
      00-00-00-00-FF-FF-FF-FF.or FF-FF-FF-FF-00-00-00-00
      FF-FF-FF-FF-FF-FF-FF-FF

  # This unit test is supposed to check the functionality of the corresponding object.
  # (4294967295.and -4294967296).eq 0.
  [] +> tests-and-neg-bytes-as-number-without-leading-zeroes
    eq. > @
      (00-00-00-00-FF-FF-FF-FF.and FF-FF-FF-FF-00-00-00-00).as-number
      0

  # This unit test is supposed to check the functionality of the corresponding object.
  # (4294967295.xor -4294967296).eq -1.
  [] +> tests-xor-neg-bytes-as-number-without-leading-zeroes
    eq. > @
      (00-00-00-00-FF-FF-FF-FF.xor FF-FF-FF-FF-00-00-00-00).as-number
      FF-FF-FF-FF-FF-FF-FF-FF

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-or-neg-bytes-as-number-with-zero
    eq. > @
      (-4294967296.as-bytes.or 0.as-bytes).as-number
      -4294967296

  # This unit test is supposed to check the functionality of the corresponding object.
  # (-4294967296L.or 1).eq -4294967295L.
  [] +> tests-or-neg-bytes-with-one
    eq. > @
      FF-FF-FF-FF-00-00-00-00.or 00-00-00-00-00-00-00-01
      FF-FF-FF-FF-00-00-00-01

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-bytes-of-wrong-size-as-number
    01-01-01-01.as-number > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-bytes-of-wrong-size-as-i64
    01-01-01-01.as-i64 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-bytes-converts-to-i64
    eq. > @
      00-00-00-00-00-00-00-2A.as-i64
      42.as-i64

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-bytes-converts-to-i64-and-back
    eq. > @
      00-00-00-00-00-00-00-33.as-i64.as-bytes
      00-00-00-00-00-00-00-33

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-bytes-as-i64-as-bytes-not-eq-to-number-as-bytes
    not. > @
      eq.
        00-00-00-00-00-00-00-2A.as-i64.as-bytes
        42.as-bytes
