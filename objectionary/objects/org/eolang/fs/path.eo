+alias org.eolang.fs.dir
+alias org.eolang.fs.file
+alias org.eolang.sys.os
+alias org.eolang.structs.list
+alias org.eolang.txt.regex
+alias org.eolang.txt.text
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.fs
+version 0.57.1
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:56
+unlint redundant-object:58
+unlint redundant-object:59
+unlint redundant-object:268
+unlint redundant-object:270
+unlint redundant-object:271

# A `path` represents a path that is hierarchical and composed of a sequence of
# directory and file name elements separated by a special separator or delimiter.
[uri] > path
  determined. > @
    if.
      os.is-windows
      win32
        string uri.as-bytes
      posix
        string uri.as-bytes
  # The system-dependent default name-separator character.
  # On UNIX systems the value of this field is "/";
  # on Microsoft Windows systems it is "\\".
  if. > separator
    os.is-windows
    win32.separator
    posix.separator

  # Utility object that joins given `tuple` of paths with current OS separator
  # and normalizes result path.
  [paths] > joined
    normalized. > @
      if.
        os.is-windows
        win32 joined-path
        posix joined-path
    string > joined-path
      as-bytes.
        joined.
          text separator
          paths

  # POSIX specified path.
  # A standardized way to represent file or directory locations in a Unix-like system.
  [uri] > posix
    uri > @
    $ > determined
    "/" > separator
    (file uri).as-file > as-file
    (dir (QQ.fs.file uri)).as-dir > as-dir
    # Returns `true` if current path is absolute - starts with '/' char.
    and. > is-absolute
      uri.length.gt 0
      (uri.as-bytes.slice 0 1).eq separator

    # Return new `path` with normalized uri.
    # Normalization includes:
    # - converting multiple slashes into a single slash.
    # - resolving "." (current directory) and ".."  (parent directory) segments.
    [] > normalized
      determined. > @
        posix
          if.
            normalized.eq "//"
            "/"
            string normalized
      uri > uri-as-bytes!
      ^.is-absolute.as-bool > is-absolute
      and. > has-trailing-slash
        uri-as-bytes.size.gt 0
        eq.
          uri-as-bytes.slice
            uri-as-bytes.size.plus -1
            1
          separator
      joined. > path
        text separator
        reduced.
          list
            split.
              text uri
              separator
          *
          [accum segment] >>
            if. > @
              segment.eq ".."
              if.
                and.
                  accum.length.gt 0
                  (accum.value.eq "..").not
                accum.prev
                if.
                  is-absolute.not
                  accum.with segment
                  accum
              if.
                or.
                  segment.eq "."
                  segment.eq ""
                accum
                accum.with segment
      as-bytes. > normalized
        if.
          uri.length.eq 0
          "."
          concat.
            if.
              is-absolute
              separator.concat path
              path
            if.
              has-trailing-slash
              separator
              --

    # Resolves `other` path against `^.uri` and returns as new `path` from it.
    # The original `uri` and resolving `other` may be:
    # - absolute - start with unix separator '/'
    # - relative - start with '.', '..' or any letter
    #
    # The resolving works as follows:
    # |----------|----------|-------------|
    # | uri      | other    | result      |
    # |==========|==========|=============|
    # | absolute | absolute | other       |
    # | absolute | relative | uri + other |
    # | relative | absolute | other       |
    # | relative | relative | uri + other |
    # |----------|----------|-------------|
    # URI Resolution Rules.
    [other] > resolved
      normalized. > @
        posix
          string
            if.
              (other-as-bytes.slice 0 1).eq separator
              other-as-bytes
              concat.
                concat.
                  uri
                  separator
                other-as-bytes
      other.as-bytes > other-as-bytes

    # Takes the base name from the provided `path`, for example:
    # |------------------------------|---------------|
    # | path                         | result        |
    # |==============================|===============|
    # | "/tmp/bar/foo.txt"           | "foo.txt"     |
    # | "/tmp/bar/foo/"              | ""            |
    # | "/var/www/html"              | "html"        |
    # | "Hello, Jeff"                | "Hello, Jeff" |
    # | ""                           | ""            |
    # |------------------------------|---------------|
    #
    # Unix OS allows to have "\" (backslash) if file name.
    # In such case it'll be included to the base name since separator
    # is "/" (regular slash) in Unix OS:
    # With the `path` "/tmp/var/hello\world" `base-name` returns `hello\world`.
    [] > basename
      string > @
        if.
          or.
            pth.size.eq 0
            slice-start-idx.eq 0
          pth
          as-bytes.
            txt.slice
              slice-start-idx
              txt.length.minus
                number slice-start-idx
      uri > pth!
      text > txt
        string pth
      plus. > slice-start-idx!
        txt.last-index-of separator
        1

    # Takes the extension part from the provided `path`, for example:
    # |------------------------------|--------|
    # | path                         | result |
    # |==============================|========|
    # | "/tmp/bar/foo.txt"           | ".txt" |
    # | "/tmp/bar/foo/"              | ""     |
    # | /var/www/html                | ""     |
    # | "Hello, Jeff"                | ""     |
    # | ""                           | ""     |
    # |------------------------------|--------|
    #
    # The object takes the `basename` from the provided path
    # and returns substring after "." if it's found.
    # If it's not - empty string is returned.
    [] > extname
      if. > @
        or.
          base.size.eq 0
          slice-start-idx.eq -1
        ""
        string
          as-bytes.
            txt.slice
              slice-start-idx
              txt.length.minus
                number slice-start-idx
      basename > base!
      text > txt
        string base
      txt.last-index-of "." > slice-start-idx!

    # Takes the directory name from the provided `path`, for example:
    # |------------------------------|--------------------|
    # | path                         | result             |
    # |==============================|====================|
    # | "/tmp/bar/foo.txt"           | "/tmp/bar"         |
    # | "/tmp/bar/foo/"              | "/tmp/bar/foo"     |
    # | "/var/www/html"              | "/var/www"         |
    # | "C:\Windows\Users\Error.log" | "C:\Windows\Users" |
    # | "Hello, Jeff"                | "Hello, Jeff"      |
    # | ""                           | ""                 |
    # |------------------------------|--------------------|
    #
    # Unix OS allows to have "\" (backslash) if file or directory name.
    # In such case it'll be included to the dir name since separator
    # is "/" (regular slash) in Unix OS:
    # With the `path` "/tmp/v\a\r/hello" `dir-name` returns `/tmp/v\a\r`.
    [] > dirname
      string > @
        if.
          or.
            pth.size.eq 0
            len.eq -1
          pth
          as-bytes.
            txt.slice 0 len
      uri > pth!
      text > txt
        string pth
      txt.last-index-of separator > len!

  # Windows specified path.
  # Here `uri` is file system URI which may contain forward slashes '/'.
  # The object decorates `win32.validated` with forward slashes replaced with
  # back ones.
  [uri] > win32
    determined. > @
      validated
        string
          as-bytes.
            validated.separated-correctly
              uri
    "\\" > separator

    # Windows validated path with forward slashes replaced with back ones.
    #
    # Attention! The object is for internal usage only, please
    # don't use the object programmatically outside of `path` object.
    [uri] > validated
      uri > @
      $ > determined
      ^.separator > separator
      (file uri).as-file > as-file
      (dir (file uri)).as-dir > as-dir

      # Returns `true` if given `uri` is drive relative which means it
      # starts with "X:" where 'X' - system drive name.
      ((regex "/^[a-zA-Z]:/").matches uri).as-bool > [uri] > is-drive-relative

      # Returns `true` if given `uri` is root relative which means it
      # starts with windows separator '\'.
      [uri] > is-root-relative
        and. > @
          uri-as-bytes.size.gt 0
          (uri-as-bytes.slice 0 1).eq separator
        uri > uri-as-bytes!

      # Replaces slashes '/' with valid windows separator '\'.
      [uri] > separated-correctly
        if. > @
          (pth.index-of path.posix.separator).eq -1
          string uri-as-bytes
          string replaced
        uri > uri-as-bytes!
        text > pth
          string uri-as-bytes
        pth.replaced > replaced!
          regex "/\\//"
          separator

      # Returns `true` if current path is absolute, which means:
      # - either path root is root relative (starts with "\")
      # - or path is drive relative (starts with "X:\", where 'X' - 1 char disk name).
      [] > is-absolute
        if. > @
          uri-as-bytes.size.eq 0
          false
          or.
            is-root-relative uri-as-bytes
            and.
              uri-as-bytes.size.gt 1
              is-drive-relative uri-as-bytes
        uri > uri-as-bytes!

      # Return new `path` with normalized uri.
      # Normalization includes:
      # - converting multiple slashes into a single slash.
      # - resolving "." (current directory) and ".."  (parent directory) segments.
      # - handling of drive letters in Windows.
      [] > normalized
        determined. > @
          validated
            if.
              normalized.eq "\\\\"
              separator
              string normalized
        uri > uri-as-bytes!
        (^.is-drive-relative uri-as-bytes).as-bool > is-drive-relative
        (^.is-root-relative uri-as-bytes).as-bool > is-root-relative
        if. > driveless!
          is-drive-relative
          uri-as-bytes.slice
            2
            uri-as-bytes.size.plus -2
          uri-as-bytes
        and. > has-trailing-slash
          uri-as-bytes.size.gt 0
          eq.
            uri-as-bytes.slice
              uri-as-bytes.size.plus -1
              1
            separator
        joined. > path!
          text separator
          reduced.
            list
              split.
                text driveless
                ^.separator
            *
            [accum segment] >>
              if. > @
                segment.eq ".."
                if.
                  and.
                    accum.length.gt 0
                    (accum.value.eq "..").not
                  accum.prev
                  if.
                    and.
                      is-root-relative.not
                      is-drive-relative.not
                    accum.with segment
                    accum
                if.
                  or.
                    segment.eq "."
                    segment.eq ""
                  accum
                  accum.with segment
        as-bytes. > normalized
          if.
            driveless.size.eq 0
            "."
            concat.
              concat.
                if.
                  is-drive-relative
                  if.
                    (driveless.slice 0 1).eq separator
                    uri.slice 0 3
                    uri.slice 0 2
                  if.
                    is-root-relative
                    separator
                    --
                path
              if.
                has-trailing-slash
                separator
                --

      # Resolves `other` path against `^.uri` and returns as new `path` from it.
      # Original `uri` and `other` path for resolving may be:
      # - drive relative - start from "X:" where 'X' - system drive name
      # - root relative - start from windows separator '\'
      # - any - start from '.', '..' or any letter
      #
      # Accounting these options resolving work as follows:
      # |--------------------|----------------|-------------------|
      # | uri                | other          | result            |
      # |====================|================|===================|
      # | any                | any            | uri + other       |
      # | any                | drive relative | other             |
      # | any                | root relative  | other             |
      # | drive relative     | any            | uri + other       |
      # | drive relative     | drive relative | other             |
      # | drive relative     | root relative  | uri drive + other |
      # | root relative      | any            | uri + other       |
      # | root relative      | drive relative | other             |
      # | root relative      | root relative  | other             |
      # |--------------------|----------------|-------------------|
      # URI Resolution Rules.
      [other] > resolved
        normalized. > @
          validated
            string
              if.
                (^.is-drive-relative valid-other).as-bool
                valid-other
                if.
                  (^.is-root-relative valid-other).as-bool
                  if.
                    is-drive-relative uri-as-bytes
                    concat.
                      uri-as-bytes.slice 0 2
                      valid-other
                    valid-other
                  concat.
                    concat.
                      uri-as-bytes
                      separator
                    valid-other
        uri > uri-as-bytes!
        separated-correctly other > valid-other!

      # Takes the base name from the provided `path`, for example:
      # |------------------------------|---------------|
      # | path                         | result        |
      # |==============================|===============|
      # | "/tmp/bar/foo.txt"           | "foo.txt"     |
      # | "/tmp/bar/foo/"              | ""            |
      # | "/var/www/html"              | "html"        |
      # | "Hello, Jeff"                | "Hello, Jeff" |
      # | ""                           | ""            |
      # |------------------------------|---------------|
      #
      # Unix OS allows to have "\" (backslash) if file name.
      # In such case it'll be included to the base name since separator
      # is "/" (regular slash) in Unix OS:
      # With the `path` "/tmp/var/hello\world" `base-name` returns `hello\world`.
      [] > basename
        string > @
          if.
            or.
              pth.size.eq 0
              slice-start-idx.eq 0
            pth
            as-bytes.
              txt.slice
                slice-start-idx
                txt.length.minus
                  number slice-start-idx
        uri > pth!
        text > txt
          string pth
        plus. > slice-start-idx!
          txt.last-index-of separator
          1

      # Takes the extension part from the provided `path`, for example:
      # |------------------------------|--------|
      # | path                         | result |
      # |==============================|========|
      # | "/tmp/bar/foo.txt"           | ".txt" |
      # | "/tmp/bar/foo/"              | ""     |
      # | /var/www/html                | ""     |
      # | "Hello, Jeff"                | ""     |
      # | ""                           | ""     |
      # |------------------------------|--------|
      #
      # The object takes the `basename` from the provided path
      # and returns substring after "." if it's found.
      # If it's not - empty string is returned.
      [] > extname
        if. > @
          or.
            base.size.eq 0
            slice-start-idx.eq -1
          ""
          string
            as-bytes.
              txt.slice
                slice-start-idx
                txt.length.minus
                  number slice-start-idx
        basename > base!
        text > txt
          string base
        txt.last-index-of "." > slice-start-idx!

      # Takes the directory name from the provided `path`, for example:
      # |------------------------------|--------------------|
      # | path                         | result             |
      # |==============================|====================|
      # | "/tmp/bar/foo.txt"           | "\tmp\bar"         |
      # | "\tmp\bar\foo\"              | "\tmp\bar\foo"     |
      # | "/var/www/html"              | "\var\www"         |
      # | "C:\Windows\Users\Error.log" | "C:\Windows\Users" |
      # | "Hello, Jeff"                | "Hello, Jeff"      |
      # | ""                           | ""                 |
      # |------------------------------|--------------------|
      # Extracting Directory Names from File Paths.
      [] > dirname
        string > @
          if.
            or.
              pth.size.eq 0
              len.eq -1
            pth
            as-bytes.
              txt.slice 0 len
        uri > pth!
        text > txt
          string pth
        txt.last-index-of separator > len!

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-determines-separator-depending-on-os
    eq. > @
      path.separator
      if.
        os.is-windows
        path.win32.separator
        path.posix.separator

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-detects-absolute-posix-path
    and. > @
      (path.posix "/var/www/html").is-absolute
      (path.posix "foo/bar/baz").is-absolute.not

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-detects-absolute-win32-path
    and. > @
      and.
        (path.win32 "C:\\Windows\\Users").is-absolute
        (path.win32 "\\Windows\\Users").is-absolute
      (path.win32 "temp\\var").is-absolute.not

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-posix-path
    eq. > @
      (path.posix "/foo/bar/.//./baz//../x/").normalized
      "/foo/bar/x/"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-posix-relative-path
    eq. > @
      (path.posix "../../foo/./bar/../x/../y").normalized
      "../../foo/y"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-empty-posix-path-to-current-dir
    eq. > @
      (path.posix "").normalized
      "."

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-path-to-root
    eq. > @
      (path.posix "/foo/bar/baz/../../../../").normalized
      "/"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-absolute-win32-path-without-drive
    eq. > @
      (path.win32 "\\Windows\\Users\\..\\App\\\\.\\Local\\\\").normalized
      "\\Windows\\App\\Local\\"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-absolute-win32-path-with-drive
    eq. > @
      (path.win32 "C:\\Windows\\\\..\\Users\\.\\AppLocal").normalized
      "C:\\Users\\AppLocal"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-relative-win32-path
    eq. > @
      (path.win32 "..\\..\\foo\\bar\\..\\x\\y\\\\").normalized
      "..\\..\\foo\\x\\y\\"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-empty-win32-driveless-path-to-current-dir
    eq. > @
      (path.win32 "").normalized
      "."

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-win32-path-down-to-drive-with-separator
    eq. > @
      (path.win32 "C:\\Windows\\..").normalized
      "C:\\"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-win32-path-down-to-drive-without-separator
    eq. > @
      (path.win32 "C:hello\\..").normalized
      "C:"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-normalizes-win32-path-with-replacing-slashes
    eq. > @
      (path.win32 "/var/www/../html/").normalized
      "\\var\\html\\"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-posix-absolute-path-against-other-absolute-path
    eq. > @
      (path.posix "/var/temp").resolved "/www/html"
      "/www/html"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-posix-absolute-path-against-other-relative-path
    eq. > @
      (path.posix "/var/temp").resolved "./www/html"
      "/var/temp/www/html"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-posix-relative-path-against-other-absolute-path
    eq. > @
      (path.posix "./var/temp").resolved "/www/html"
      "/www/html"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-posix-relative-path-against-other-relative-path
    eq. > @
      (path.posix "./var/temp").resolved "../www/html"
      "var/www/html"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-relative-path-against-other-relative-path
    eq. > @
      (path.win32 ".\\temp\\var").resolved ".\\..\\x"
      "temp\\x"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-relative-path-against-other-drive-relative-path
    eq. > @
      (path.win32 ".\\temp\\var").resolved "C:\\Windows\\Users"
      "C:\\Windows\\Users"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-relative-path-against-other-root-relative-path
    eq. > @
      (path.win32 ".\\temp\\var").resolved "\\Windows\\Users"
      "\\Windows\\Users"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-drive-relative-path-against-other-relative-path
    eq. > @
      (path.win32 "C:\\users\\local").resolved ".\\var\\temp"
      "C:\\users\\local\\var\\temp"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-drive-relative-path-against-other-drive-relative-path
    eq. > @
      (path.win32 "C:\\users\\local").resolved "D:\\local\\var"
      "D:\\local\\var"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-drive-relative-path-against-other-root-relative-path
    eq. > @
      (path.win32 "C:\\users\\local").resolved "\\local\\var"
      "C:\\local\\var"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-root-relative-path-against-other-relative-path
    eq. > @
      (path.win32 "\\users\\local").resolved ".\\hello\\var"
      "\\users\\local\\hello\\var"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-root-relative-path-against-other-drive-relative-path
    eq. > @
      (path.win32 "\\users\\local").resolved "D:\\hello\\var"
      "D:\\hello\\var"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-resolves-win32-root-relative-path-against-other-root-relative-path
    eq. > @
      (path.win32 "\\users\\local").resolved "\\hello\\var"
      "\\hello\\var"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-takes-valid-basename
    eq. > @
      basename.
        path.joined
          * "var" "www" "html" "hello.eo"
      "hello.eo"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-empty-basename-from-path-ended-with-separator
    eq. > @
      basename.
        path.joined
          * "var" "www" "html" path.separator
      ""

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-base-with-backslash-in-path-on-posix
    eq. > @
      (path.posix "/var/www/html/foo\\bar").basename
      "foo\\bar"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-the-same-string-if-no-separator-is-found
    eq. > @
      (path "Somebody").basename
      "Somebody"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-takes-file-extname
    eq. > @
      extname.
        path.joined
          * "var" "www" "hello.txt"
      ".txt"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-take-extname-on-file-without-extension
    eq. > @
      extname.
        path.joined
          * "var" "www" "html"
      ""

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-take-extname-if-ends-with-separator
    eq. > @
      extname.
        path.joined
          * "var" "www" path.separator
      ""

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-valid-dirname-from-file-path
    eq. > @
      dirname.
        path.joined
          * "var" "www" "hello.txt"
      path.joined
        * "var" "www"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-valid-dirname-from-dir-path
    eq. > @
      dirname.
        path.joined
          * "var" "www" path.separator
      path.joined
        * "var" "www"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-valid-dirname-from-file-path-without-extension
    eq. > @
      dirname.
        path.joined
          * "var" "www" "html"
      path.joined
        * "var" "www"
