+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.57.2
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:53
+unlint redundant-object:58

# Non-conditional forward and backward jumps.
# Forward jump instantly returns provided object to `g.forward` without touching
# all the code below.
# Backward jump instantly returns the provided object to `go.to`
#
# Forward jump may look like this:
#
# ```
# go.to
#   [g]
#     seq > @
#       *
#         g.forward true
#         stdout "Will never be printed"
# ```
#
# Backward jump may be done this way:
#
# ```
# go.to
#   [g]
#     seq > @
#       *
#         stdout "Will be printed forever"
#         g.backward
# ```
# Go to.
[] > go
  malloc.of > identifier!
    8
    m.put m.id > [m]

  [body] > to
    try > @
      body token
      [e] >>
        if. > @
          identifier.eq e.id
          e.value
          error e
      true

    [] > token
      error > backward
        jump
          to body

      [value] > jump
        identifier > id

      [res] > forward
        error > @
          jump
            res

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-goto-jumps-backwards
    eq. > @
      malloc.of
        8
        [i]
          seq > @
            *
              i.put 1
              go.to
                [g] >>
                  seq > @
                    *
                      i.put (i.as-number.plus 1)
                      if.
                        i.as-number.lt 10
                        g.backward
                        true
              i
      10

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-goto-jumps-forward
    and. > @
      eq.
        div 7
        6
      eq.
        div 0
        0
    [x] > div
      malloc.for > @
        0
        [r] >>
          go.to > @
            [g] >>
              seq > @
                *
                  if.
                    x.eq 0
                    g.forward r
                    true
                  r.put (42.div x)

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-returns-from-method-body
    eq. > @
      max 7 42
      42
    [a b] > max
      go.to > @
        [g] >>
          seq > @
            *
              if.
                a.gt b
                g.forward a
                true
              b

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-nested-goto
    eq. > @
      go.to
        [g1]
          seq > @
            *
              go.to
                [g2] >>
                  g1.forward 42 > @
              7
      42
