+alias org.eolang.tt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.59.0
+rt node eo2js-runtime:0.0.0
+version 0.59.0
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:18
+unlint redundant-object:19
+unlint redundant-object:20

# The 64 bits signed integer.
# Here `as-bytes` must be a `bytes` object.
[as-bytes] > i64
  as-bytes > @
  times -1.as-i64 > neg
  as-i32.as-i16 > as-i16

  # Convert this `org.eolang.i64` to `org.eolang.i32`.
  # The `org.eolang.error` is returned if the `org.eolang.i64` number is more than
  # max `org.eolang.i32` value `2147483647`.
  [] > as-i32
    if. > @
      or.
        left.eq 00-00-00-00
        left.eq FF-FF-FF-FF
      i32 (as-bytes.slice 4 4)
      error
        sprintf
          "Can't convert i64 number %d to i32 because it's out of i32 bounds"
          * as-number
    (as-bytes.slice 0 4).as-bytes > left

  # Convert this `org.eolang.i64` to `org.eolang.number` object and return it.
  [] > as-number ?

  # Returns `org.eolang.true` if `$` < `x`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > lt
    0.as-i64.gt > @
      minus
        i64 value
    x > value!

  # Returns `org.eolang.true` if `$` <= `x`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > lte
    or. > @
      lt value
      ^.eq value
    x > value!

  # Returns `org.eolang.true` if `$` > `x`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > gt ?

  # Returns `org.eolang.true` if `$` >= `x`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > gte
    or. > @
      gt value
      ^.eq value
    x > value!

  # Multiplication of `$` and `x` as `org.eolang.i64`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > times ?

  # Sum of `$` and `x` as `org.eolang.i64`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > plus ?

  # Subtraction between `$` and `x`.
  # Here `x` must be an `i64` object.
  [x] > minus
    plus (i64 value).neg > @
    x > value!

  # Quotient of the division of `$` by `x` as `org.eolang.i64`.
  # Here `x` must be an `org.eolang.i64` object.
  # An `org.eolang.error` is returned if `x` is equal to 0.
  [x] > div ?

  # Tests that i64 number has correct byte representation.
  [] +> tests-i64-has-valid-bytes
    eq. > @
      42.as-i64.as-bytes
      00-00-00-00-00-00-00-2A

  # Tests that i64 bytes differ from regular number bytes representation.
  [] +> tests-i64-as-bytes-is-not-equal-to-number-bytes
    not. > @
      eq.
        i64 234.as-bytes
        234.as-i64.as-bytes

  # Tests that converting i64 to i32 and back preserves the value.
  [] +> tests-i64-to-i32-and-back
    eq. > @
      234.as-i64
      234.as-i64.as-i32.as-i64

  # Tests that converting negative i64 to i32 and back preserves the value.
  [] +> tests-negative-i64-to-i32-and-back
    eq. > @
      -234.as-i64
      -234.as-i64.as-i32.as-i64

  # Tests that converting i64 to i32 throws error when out of bounds.
  3147483647.as-i64.as-i32 > [] +> throws-on-converting-to-i32-if-out-of-bounds

  # Tests that i64 less-than comparison returns true for smaller values.
  [] +> tests-i64-less-true
    lt. > @
      10.as-i64
      50.as-i64

  # Tests that i64 less-than comparison returns false for equal values.
  [] +> tests-i64-less-equal
    not. > @
      lt.
        10.as-i64
        10.as-i64

  # Tests that i64 less-than comparison returns false for larger values.
  [] +> tests-i64-less-false
    not. > @
      lt.
        10.as-i64
        -5.as-i64

  # Tests that i64 greater-than comparison returns true for larger values.
  [] +> tests-i64-greater-true
    gt. > @
      -200.as-i64
      -1000.as-i64

  # Tests that i64 greater-than comparison returns false for smaller values.
  [] +> tests-i64-greater-false
    not. > @
      gt.
        0.as-i64
        100.as-i64

  # Tests that i64 greater-than comparison returns false for equal values.
  [] +> tests-i64-greater-equal
    not. > @
      gt.
        0.as-i64
        0.as-i64

  # Tests that i64 less-than-or-equal comparison returns true for smaller values.
  [] +> tests-i64-lte-true
    lte. > @
      -200.as-i64
      -100.as-i64

  # Tests that i64 less-than-or-equal comparison returns true for equal values.
  [] +> tests-i64-lte-equal
    lte. > @
      50.as-i64
      50.as-i64

  # Tests that i64 less-than-or-equal comparison returns false for larger values.
  [] +> tests-i64-lte-false
    not. > @
      lte.
        0.as-i64
        -10.as-i64

  # Tests that i64 greater-than-or-equal comparison returns true for larger values.
  [] +> tests-i64-gte-true
    gte. > @
      -1000.as-i64
      -1100.as-i64

  # Tests that i64 greater-than-or-equal comparison returns true for equal values.
  [] +> tests-i64-gte-equal
    gte. > @
      113.as-i64
      113.as-i64

  # Tests that i64 greater-than-or-equal comparison returns false for smaller values.
  [] +> tests-i64-gte-false
    not. > @
      gte.
        0.as-i64
        10.as-i64

  # Tests that i64 zero equals another i64 zero.
  [] +> tests-i64-zero-eq-to-i64-zero
    eq. > @
      0.@
      0.@

  # Tests that i64 equality comparison returns true for identical values.
  [] +> tests-i64-eq-true
    eq. > @
      123.@
      123.@

  # Tests that i64 equality comparison returns false for different values.
  [] +> tests-i64-eq-false
    not. > @
      eq.
        123.@
        42.@

  # Tests that i64 addition works correctly.
  [] +> tests-i64-one-plus-i64-one
    eq. > @
      1.as-i64.plus 1.as-i64
      2.as-i64

  # Tests that i64 subtraction works correctly.
  [] +> tests-i64-one-minus-i64-one
    eq. > @
      1.as-i64.minus 1.as-i64
      0.as-i64

  # Tests that i64 division by zero throws an error.
  2.as-i64.div 0.as-i64 > [] +> throws-on-division-i64-by-i64-zero

  # Tests that i64 division by one returns the original value.
  [] +> tests-i64-div-by-i64-one
    eq. > @
      dividend.div 1.as-i64
      dividend
    -235.as-i64 > dividend

  # Tests that i64 division with remainder works correctly.
  [] +> tests-i64-div-with-remainder
    eq. > @
      13.as-i64.div -5.as-i64
      -2.as-i64

  # Tests that i64 division result can be less than one.
  [] +> tests-i64-div-less-than-i64-one
    lt. > @
      1.as-i64.div 5.as-i64
      1.as-i64

  # Tests that i64 multiplication by zero equals zero.
  [] +> tests-i64-multiply-by-zero
    eq. > @
      1000.as-i64.times 0.as-i64
      0.as-i64
