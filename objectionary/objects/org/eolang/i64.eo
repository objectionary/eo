+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.53.0
+rt node eo2js-runtime:0.0.0
+version 0.53.0
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint rt-without-atoms
+unlint empty-object

# The 64 bits signed integer.
# Here `as-bytes` must be a `bytes` object.
[as-bytes] > i64
  as-bytes > @
  $ > as-i64
  times -1.as-i64 > neg
  as-i32.as-i16 > as-i16

  # Convert this `org.eolang.i64` to `org.eolang.i32`.
  # The `org.eolang.error` is returned if the `org.eolang.i64` number is more than
  # max `org.eolang.i32` value `2147483647`.
  [] > as-i32
    (as-bytes.slice 0 4).as-bytes > left
    if. > @
      or.
        left.eq 00-00-00-00
        left.eq FF-FF-FF-FF
      i32 (as-bytes.slice 4 4)
      error
        sprintf
          "Can't convert i64 number %d to i32 because it's out of i32 bounds"
          * as-number

  # Convert this `org.eolang.i64` to `org.eolang.number` object and return it.
  [] > as-number ?

  # Returns `org.eolang.true` if `$` < `x`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > lt
    x > value!
    0.as-i64.gt > @
      minus
        i64 value

  # Returns `true` if `$` <= `x`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > lte
    x > value!
    or. > @
      lt value
      ^.eq value

  # Returns `org.eolang.true` if `$` > `x`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > gt ?

  # Returns `true` if `$` >= `x`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > gte
    x > value!
    or. > @
      gt value
      ^.eq value

  # Multiplication of `$` and `x` as `org.eolang.i64`.
  # Here `x` must be an `org.eolang.i64` object.
  [x] > times ?

  # Sum of `$` and `x` as `org.eolang.i64`
  # Here `x` must be an `org.eolang.i64` object.
  [x] > plus ?

  # Subtraction between `$` and `x`.
  # Here `x` must be an `i64` object.
  [x] > minus
    x > value!
    plus (i64 value).neg > @

  # Quotient of the division of `$` by `x` as `org.eolang.i64`.
  # Here `x` must be an `org.eolang.i64` object.
  # An `org.eolang.error` is returned if or `x` is equal to 0.
  [x] > div ?
