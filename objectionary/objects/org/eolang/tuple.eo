+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.56.9
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT

# Tuple.
# An ordered, immutable collection of elements.
[prev value length] > tuple
  $ > as-tuple

  # Empty tuple.
  # A tuple with no elements. When dataized, it represents an immutable, empty collection.
  [] > empty
    $ > empty
    $ > as-tuple
    0 > length
    error "Can't get prev from the empty tuple" > prev
    error "Can't get value from the empty tuple" > value

    # Take one element from the tuple, at the given position.
    error "Can't get an object from the empty tuple" > [i] > at

    # Create a new tuple with this element added to the end of it.
    [x] > with
      as-tuple. > @
        tuple
          ^
          x
          (length.plus 1).as-number

  # Take one element from the tuple, at the given position.
  [i] > at
    if. > @
      or.
        0.gt index
        length.lte index
      error "Given index is out of tuple bounds"
      at-fast ^
    i > idx!
    if. > index!
      0.gt idx
      length.plus idx
      idx

    [tup] > at-fast
      if. > @
        (tup.length.plus -1).eq index
        tup.value
        at-fast tup.prev

  # Create a new tuple with this element added to the end of it.
  [x] > with
    as-tuple. > @
      tuple
        ^
        x
        (length.plus 1).as-number

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-makes-tuple-through-special-syntax
    eq. > @
      (* 1 2).length
      2

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-gets-lengths-of-empty-tuple-through-special-syntax
    eq. > @
      *.length
      0

  # Check that an empty tuples .length equals to zero.
  [] +> tests-empty-tuple-length
    eq. > @
      (arr *).elements.length
      0
    [elements] > arr

  # Check that tuple.length works properly for non-empty tuples.
  [] +> tests-non-empty-tuple-length-test
    eq. > @
      arr
        * "a" "b" "c" "d" "e"
      .elements
      .length
      5
    [elements] > arr

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-as-a-bound-attribute-size-0
    eq. > @
      anArray.length
      0
    * > anArray

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-as-a-bound-attribute-size-1
    eq. > @
      anArray.at 0
      100
    * > anArray
      100

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-as-a-bound-attribute-size-2
    and. > @
      eq.
        arr.at 0
        1
      eq.
        arr.at 1
        2
    * > arr
      1
      2

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-with
    and. > @
      and.
        and.
          eq.
            arr.at 0
            1
          eq.
            arr.at 1
            2
        eq.
          arr.at 2
          3
      eq.
        arr.at 3
        "with"
    with. > arr
      * 1 2 3
      "with"

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-wrong-tuple-at
    at. > @
      * 1 2 3 4
      20

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-fluent-with
    and. > @
      and.
        eq.
          arr.at 0
          1
        eq.
          arr.at 1
          2
      eq.
        arr.at 2
        3
    ((*.with 1).with 2).with 3 > arr

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-fluent-with-indented
    and. > @
      and.
        eq.
          arr.at 0
          1
        eq.
          arr.at 1
          2
      eq.
        arr.at 2
        3
    *
    .with 1
    .with 2
    .with 3 > arr

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-gets-lengths-of-empty-tuple
    eq. > @
      a.length
      0
    tuple.empty > a

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-gets-lengths-of-empty-tuple-without-additional-obj
    eq. > @
      tuple.empty.length
      0

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-creates-empty-tuple-with-number
    eq. > @
      a.at 0
      3
    tuple.empty.with 3 > a

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-at-fast-with-first-element
    eq. > @
      (arr.at 0).at-fast arr
      100
    * 100 101 102 > arr

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-at-fast-with-last-element
    eq. > @
      (arr.at 2).at-fast arr
      102
    * 100 101 102 > arr

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-empty-fluent-with-indented-keyword
    and. > @
      and.
        eq.
          arr.at 0
          1
        eq.
          arr.at 1
          2
      eq.
        arr.at 2
        3
    tuple
    .empty
    .with 1
    .with 2
    .with 3 > arr

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-with-negative-index-gets-last
    eq. > @
      arr.at -1
      4
    * 0 1 2 3 4 > arr

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-tuple-with-negative-index-gets-first
    eq. > @
      arr.at -5
      0
    * 0 1 2 3 4 > arr

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> throws-on-out-of-tuple-bounds-with-negative-index
    arr.at -6 > @
    * 0 1 2 3 4 > arr
