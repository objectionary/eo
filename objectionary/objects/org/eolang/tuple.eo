+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+version 0.58.6
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:17
+unlint redundant-object:19
+unlint redundant-object:20

# Tuple.
# An ordered, immutable collection of elements.
[tail head length] > tuple
  # Empty tuple.
  # A tuple with no elements. When dataized, it represents an immutable, empty collection.
  [] > empty
    0 > length
    error "Can't get tail from the empty tuple" > tail
    error "Can't get head from the empty tuple" > head

    # Take one element from the tuple, at the given position.
    error "Can't get an object from the empty tuple" > [i] > at

    # Create a new tuple with this element added to the end of it.
    [x] > with
      tuple > @
        ^
        x
        (length.plus 1).as-number

  # Take one element from the tuple, at the given position.
  [i] > at
    if. > @
      or.
        0.gt index
        length.lte index
      error "Given index is out of tuple bounds"
      at-fast ^
    i > idx!
    if. > index!
      0.gt idx
      length.plus idx
      idx

    [tup] > at-fast
      if. > @
        (tup.length.plus -1).eq index
        tup.head
        at-fast tup.tail

  # Create a new tuple with this element added to the end of it.
  [x] > with
    tuple > @
      ^
      x
      (length.plus 1).as-number

  # Tests that tuple creation through special syntax (* 1 2) works correctly.
  [] +> tests-makes-tuple-through-special-syntax
    eq. > @
      (* 1 2).length
      2

  # Tests that empty tuple length can be obtained through special syntax (*.length).
  [] +> tests-gets-lengths-of-empty-tuple-through-special-syntax
    eq. > @
      *.length
      0

  # Check that an empty tuple's .length equals zero.
  [] +> tests-empty-tuple-length
    eq. > @
      (arr *).elements.length
      0
    [elements] > arr

  # Check that tuple.length works properly for non-empty tuples.
  [] +> tests-non-empty-tuple-length-test
    eq. > @
      arr
        * "a" "b" "c" "d" "e"
      .elements
      .length
      5
    [elements] > arr

  # Tests that a tuple bound as an attribute with size 0 has correct length.
  [] +> tests-tuple-as-a-bound-attribute-size-0
    eq. > @
      anArray.length
      0
    * > anArray

  # Tests that a tuple bound as an attribute with size 1 allows element access.
  [] +> tests-tuple-as-a-bound-attribute-size-1
    eq. > @
      anArray.at 0
      100
    * > anArray
      100

  # Tests that a tuple bound as an attribute with size 2 allows access to both elements.
  [] +> tests-tuple-as-a-bound-attribute-size-2
    and. > @
      eq.
        arr.at 0
        1
      eq.
        arr.at 1
        2
    * > arr
      1
      2

  # Tests that the with method correctly adds an element to an existing tuple.
  [] +> tests-tuple-with
    and. > @
      and.
        and.
          eq.
            arr.at 0
            1
          eq.
            arr.at 1
            2
        eq.
          arr.at 2
          3
      eq.
        arr.at 3
        "with"
    with. > arr
      * 1 2 3
      "with"

  # Tests that accessing a tuple with an out-of-bounds index throws an error.
  [] +> throws-on-wrong-tuple-at
    at. > @
      * 1 2 3 4
      20

  # Tests that fluent chaining of with method works correctly for tuple construction.
  [] +> tests-tuple-fluent-with
    and. > @
      and.
        eq.
          arr.at 0
          1
        eq.
          arr.at 1
          2
      eq.
        arr.at 2
        3
    ((*.with 1).with 2).with 3 > arr

  # Tests that fluent chaining of with method works correctly with indented syntax.
  [] +> tests-tuple-fluent-with-indented
    and. > @
      and.
        eq.
          arr.at 0
          1
        eq.
          arr.at 1
          2
      eq.
        arr.at 2
        3
    *
    .with 1
    .with 2
    .with 3 > arr

  # Tests that the length of an explicitly created empty tuple is zero.
  [] +> tests-gets-lengths-of-empty-tuple
    eq. > @
      a.length
      0
    tuple.empty > a

  # Tests that the length of an empty tuple can be accessed directly without intermediate objects.
  [] +> tests-gets-lengths-of-empty-tuple-without-additional-obj
    eq. > @
      tuple.empty.length
      0

  # Tests that adding a number to an empty tuple creates a tuple with that element.
  [] +> tests-creates-empty-tuple-with-number
    eq. > @
      a.at 0
      3
    tuple.empty.with 3 > a

  # Tests that the at-fast method correctly retrieves the first element of a tuple.
  [] +> tests-at-fast-with-first-element
    eq. > @
      (arr.at 0).at-fast arr
      100
    * 100 101 102 > arr

  # Tests that the at-fast method correctly retrieves the last element of a tuple.
  [] +> tests-at-fast-with-last-element
    eq. > @
      (arr.at 2).at-fast arr
      102
    * 100 101 102 > arr

  # Tests that fluent chaining starting from empty tuple works with indented keyword syntax.
  [] +> tests-tuple-empty-fluent-with-indented-keyword
    and. > @
      and.
        eq.
          arr.at 0
          1
        eq.
          arr.at 1
          2
      eq.
        arr.at 2
        3
    tuple
    .empty
    .with 1
    .with 2
    .with 3 > arr

  # Tests that using negative index -1 correctly retrieves the last element of the tuple.
  [] +> tests-tuple-with-negative-index-gets-last
    eq. > @
      arr.at -1
      4
    * 0 1 2 3 4 > arr

  # Tests that using negative index -5 correctly retrieves the first element of a 5-element tuple.
  [] +> tests-tuple-with-negative-index-gets-first
    eq. > @
      arr.at -5
      0
    * 0 1 2 3 4 > arr

  # Tests that accessing a tuple with an out-of-bounds negative index throws an error.
  [] +> throws-on-out-of-tuple-bounds-with-negative-index
    arr.at -6 > @
    * 0 1 2 3 4 > arr
