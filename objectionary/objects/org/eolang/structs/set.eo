+alias org.eolang.structs.list
+alias org.eolang.structs.map
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.structs
+version 0.58.0
+spdx SPDX-FileCopyrightText: Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+unlint redundant-object:26
+unlint redundant-object:27

# Set - is an unordered `list` of unique objects.
[lst] > set
  this. > @
    initialized
      map
        list
          lst
        .mapped
          map.entry item true > [item]
        .origin

  # Initialized set with rebuilt unique sequence.
  [mp] > initialized
    mp.keys > @
    $ > this
    mp.size > size

    # Append new `item` to set. It must be possible to get
    # hash code of `item` so `item` must be dataizable.
    [item] > with
      this. > @
        set.initialized
          mp.with item true

    # Remove `item` from `set`. If `item` is not present,
    # the set won't be changed.
    [item] > without
      this. > @
        set.initialized
          mp.without item

    # Check if given `item` exists in set.
    mp.has item > [item] > has

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-set-rebuilds-itself
    eq. > @
      set
        * 1 2 2
      * 1 2

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-does-not-append-existed-item-to-set
    set
      * 1 2
    .with 1
    .size
    .eq 2 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-appends-new-item-to-set
    set
      * 1 2
    .with 3
    .has 3 > @

  # This unit test is supposed to check the functionality of the corresponding object.
  [] +> tests-empty-set-has-size-of-zero
    set
      *
    .size
    .eq 0 > @
