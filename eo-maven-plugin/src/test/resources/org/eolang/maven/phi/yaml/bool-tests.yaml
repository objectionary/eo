# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
---
eo: |
  # The MIT License (MIT)
  #
  # Copyright (c) 2016-2024 Objectionary.com
  #
  # Permission is hereby granted, free of charge, to any person obtaining a copy
  # of this software and associated documentation files (the "Software"), to deal
  # in the Software without restriction, including without limitation the rights
  # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  # copies of the Software, and to permit persons to whom the Software is
  # furnished to do so, subject to the following conditions:
  #
  # The above copyright notice and this permission notice shall be included
  # in all copies or substantial portions of the Software.
  #
  # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  # FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
  # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  # SOFTWARE.

  +architect yegor256@gmail.com
  +home https://github.com/objectionary/eo
  +tests
  +package org.eolang
  +version 0.0.0

  # Test.
  [] > compares-two-bools
    eq. > @
      true
      true

  # Test.
  [] > true-as-bool
    true.as-bool > @

  # Test.
  [] > compares-two-different-types
    not. > @
      eq.
        true
        42

  # Test.
  [] > compares-bool-to-bytes
    and. > @
      true.eq 01-
      false.eq 00-

  # Test.
  [] > compares-bool-to-string
    and. > @
      true.eq "\001"
      false.eq "\000"

  # Test.
  [] > compares-bool-to-bytes-reverse
    and. > @
      01-.as-bytes.eq true
      00-.as-bytes.eq false

phi: |-
  {
    ⟦
      org ↦ ⟦
        eolang ↦ ⟦
          compares-two-bools ↦ ⟦
            φ ↦ Φ.org.eolang.true.eq(
              α0 ↦ Φ.org.eolang.true
            )
          ⟧,
          true-as-bool ↦ ⟦
            φ ↦ Φ.org.eolang.true.as-bool
          ⟧,
          compares-two-different-types ↦ ⟦
            φ ↦ Φ.org.eolang.true.eq(
              α0 ↦ Φ.org.eolang.number(
                α0 ↦ Φ.org.eolang.bytes(
                  Δ ⤍ 40-45-00-00-00-00-00-00
                )
              )
            ).not
          ⟧,
          compares-bool-to-bytes ↦ ⟦
            φ ↦ Φ.org.eolang.true.eq(
              α0 ↦ Φ.org.eolang.bytes(
                Δ ⤍ 01-
              )
            ).and(
              α0 ↦ Φ.org.eolang.false.eq(
                α0 ↦ Φ.org.eolang.bytes(
                  Δ ⤍ 00-
                )
              )
            )
          ⟧,
          compares-bool-to-string ↦ ⟦
            φ ↦ Φ.org.eolang.true.eq(
              α0 ↦ Φ.org.eolang.string(
                α0 ↦ Φ.org.eolang.bytes(
                  Δ ⤍ 01-
                )
              )
            ).and(
              α0 ↦ Φ.org.eolang.false.eq(
                α0 ↦ Φ.org.eolang.string(
                  α0 ↦ Φ.org.eolang.bytes(
                    Δ ⤍ 00-
                  )
                )
              )
            )
          ⟧,
          compares-bool-to-bytes-reverse ↦ ⟦
            φ ↦ Φ.org.eolang.bytes(
              Δ ⤍ 01-
            ).as-bytes.eq(
              α0 ↦ Φ.org.eolang.true
            ).and(
              α0 ↦ Φ.org.eolang.bytes(
                Δ ⤍ 00-
              ).as-bytes.eq(
                α0 ↦ Φ.org.eolang.false
              )
            )
          ⟧,
          λ ⤍ Package
        ⟧,
        λ ⤍ Package
      ⟧
    ⟧
  }
