xsls: []
tests:
  - /program/license[text()!='']
  - /program/metas[count(meta)=4]
  - /program/metas/meta[head='foo' and tail='']
  - //o[@base='bool']
  - //o[@base='string']
  - //o[@name='hello' and @const]
  - //o[@as='i']
  - //o[@as='1']
  - //o[@as='0']
  - //o[@base='&']
  - //o[@base='.<']
  - //o[@base='.five']
  - //objects[not(.//o[@name=''])]
  - //o[@atom and @name='atom' and count(o)=2 and o[@name='a']]
eo: |
  # The purpose of this test case is to make
  # sure all possible syntax scenarios can
  # be parsed by the ANTLR

  +alias org.example.foo
  +alias Test Test
  +bar Some text
  +foo

  500.43.@ > one

  # This is just a simple string
  "Hello, друг!" > hello!

  # This is the default 64+ symbols comment in front of abstract object
  [tt a] > atom /int

  # This is very good object
  # This is the default 64+ symbols comment in front of abstract object
  [x] > first
    x > @
    second > hello
      $.plus.@ 5.< > i
      third > x!
        $
        <.
          z
        f
          12:foo
          false:^
          ((t' r 8.54 "yes".< "\t").print 88 0x1f):hey
          TRUE.<:vtx
          false:fle > a!
            []
              Q.x.f.d Q Q
              QQ.y QQ
              &.@.< > t
              ^.@.hey > you
              Q
              QQ
            kid.^.^
            "家"
          q
          .w
          .e:qwerty > qwe
      f'
        z'
          (z 5):0
          z:1
      a.
        b.
          c.
            42
          d
        e.
          f
      ^.
        ^.
          c
      a.
        b.
          $
      @.
        b
    oops
  
  # This is the default 64+ symbols comment in front of abstract object
  [] > obj
    "some" > @
    # This is the default 64+ symbols comment in front of abstract object
    [] > foo
      ^.@ > @

  # Comments are allowed only in front of top-level objects
  # This is the default 64+ symbols comment in front of abstract object
  [] > named
    one.two.three.four.five
      t.<
    .two "hello!"
    .three > a1
    .four (a b c') > a2
    .five > a3

  test
    me
      (now (f (f (f (f 1)))).f):i

  # This is the default 64+ symbols comment in front of abstract object
  [] > ooo
    # This is one
    # This is the default 64+ symbols comment in front of abstract object
    [] > o-1 /?

    # This is two
    # This is the default 64+ symbols comment in front of abstract object
    [] > o2

  -2.4E3 > x

  7.33e-10 > y
