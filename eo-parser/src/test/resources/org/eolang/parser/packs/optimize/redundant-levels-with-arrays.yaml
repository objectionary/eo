xsls:
  - /org/eolang/parser/wrap-method-calls.xsl
  - /org/eolang/parser/optimize/abstracts-float-up.xsl
  - /org/eolang/parser/optimize/remove-levels.xsl
tests:
  - /program/errors[count(*)=0]
  # 'main' object
  - //o[@name='main']
  - //o[@name='main' and count(o)=2]
  - //o[@name='main']/o[@base='tuple' and @name='arr' and count(o)=2]/o[@base='int']
  - //o[@name='main']/o[@base='tuple' and @name='arr' and count(o)=2]/o[not(@base='int')]
  - //o[@name='main']/o[@base='eq' and @name='@' and count(o)=2]
  - //o[@name='main']/o[@base='eq' and @name='@' and count(o)=2]/o[@base='tuple' and count(o)=1]/o[@base='int']
  # The first tuple - argument of arr from the example below
  - //o[@base='tuple' and count(o)=2]
  - //o[@base='tuple' and count(o)=2]/o[@base='int' and contains(text(), '1')]
  - //o[@base='tuple' and count(o)=2]/o[@base='int' and contains(text(), '2')]
  # The second tuple - first argument of eq from the example below
  - //o[@base='tuple' and count(o)=1]/o[@base='.at' and count(o)=2]/o[@base='int' and contains(text(), '1')]
  - //o[@base='tuple' and count(o)=1]/o[@base='.at' and count(o)=2]/o[@base='.at' and count(o)=2]/o[@base='arr']
  # The third tuple - second argument of eq from the example below
  - //o[@base='tuple' and count(o)=1]/o[@base='int' and contains(text(), '2')]
# Currently the test converts the code from the snippet to:
# ____
# [] > main
#   tuple > arr
#     0
#     tuple
#       1
#       2
#   eq > @
#     tuple
#       .at
#         .at
#           arr
#           1
#         1
#     tuple
#       2
# ____
eo: |
  # This is the default 64+ symbols comment in front of abstract object
  [] > main
    * 0 (* 1 2) > arr
    eq > @
      * ((arr.at 1).at 1)
      * 2