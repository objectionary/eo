# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
---
input: |
  +architect yegor256@gmail.com
  +home https://github.com/objectionary/eo
  +package org.eolang
  +rt jvm org.eolang:eo-runtime:0.0.0
  +version 0.0.0

  # No comments.
  [data] > bytes
    # No comments.
    [x] > eq /bool

    # No comments.
    [] > size /int

    # No comments.
    [start len] > slice /bytes

    # No comments.
    [] > as-string /string

    # Turn this chain of eight bytes into an integer.
    # If there are less or more than eight bytes, there will
    # be an error returned.
    [] > as-int /int

    # Turn this chain of eight bytes into a float.
    # If there are less or more than eight bytes, there will
    # be an error returned.
    [] > as-float /float

    # No comments.
    [b] > and /bytes

    # No comments.
    [b] > or /bytes

    # No comments.
    [b] > xor /bytes

    # No comments.
    [] > not /bytes

    # No comments.
    [x] > left
      ^.right x.neg > @

    # No comments.
    [x] > right /bytes

    # No comments.
    [] > as-bool
      ^.eq 01- > @

    # No comments.
    [] > as-bytes
      ^ > @

    # Concatenation of two byte sequences:
    # the current and the provided one,
    # as a new sequence.
    [b] > concat /bytes
sweet: |-
  {⟦
    org ↦ ⟦
      eolang ↦ ⟦
        bytes(data) ↦ ⟦
          eq(x) ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_eq
          ⟧,
          size ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_size
          ⟧,
          slice(start, len) ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_slice
          ⟧,
          as-string ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_as_string
          ⟧,
          as-int ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_as_int
          ⟧,
          as-float ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_as_float
          ⟧,
          and(b) ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_and
          ⟧,
          or(b) ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_or
          ⟧,
          xor(b) ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_xor
          ⟧,
          not ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_not
          ⟧,
          left(x) ↦ ⟦
            φ ↦ ξ.ρ.right(ξ.x.neg)
          ⟧,
          right(x) ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_right
          ⟧,
          as-bool ↦ ⟦
            φ ↦ ξ.ρ.eq(Φ̇.bytes(⟦ Δ ⤍ 01- ⟧))
          ⟧,
          as-bytes ↦ ⟦
            φ ↦ ξ.ρ
          ⟧,
          concat(b) ↦ ⟦
            λ ⤍ Lorg_eolang_bytes_concat
          ⟧
        ⟧,
        λ ⤍ Package
      ⟧,
      λ ⤍ Package
    ⟧
  ⟧}
salty: |-
  {
    ⟦
      org ↦ ⟦
        eolang ↦ ⟦
          bytes ↦ ⟦
            data ↦ ∅,
            eq ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_eq,
              x ↦ ∅
            ⟧,
            size ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_size
            ⟧,
            slice ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_slice,
              start ↦ ∅,
              len ↦ ∅
            ⟧,
            as-string ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_as_string
            ⟧,
            as-int ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_as_int
            ⟧,
            as-float ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_as_float
            ⟧,
            and ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_and,
              b ↦ ∅
            ⟧,
            or ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_or,
              b ↦ ∅
            ⟧,
            xor ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_xor,
              b ↦ ∅
            ⟧,
            not ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_not
            ⟧,
            left ↦ ⟦
              x ↦ ∅,
              φ ↦ ξ.ρ.right(
                α0 ↦ ξ.x.neg
              )
            ⟧,
            right ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_right,
              x ↦ ∅
            ⟧,
            as-bool ↦ ⟦
              φ ↦ ξ.ρ.eq(
                α0 ↦ Φ.org.eolang.bytes(
                  α0 ↦ ⟦ Δ ⤍ 01- ⟧
                )
              )
            ⟧,
            as-bytes ↦ ⟦
              φ ↦ ξ.ρ
            ⟧,
            concat ↦ ⟦
              λ ⤍ Lorg_eolang_bytes_concat,
              b ↦ ∅
            ⟧
          ⟧,
          λ ⤍ Package
        ⟧,
        λ ⤍ Package
      ⟧
    ⟧
  }
